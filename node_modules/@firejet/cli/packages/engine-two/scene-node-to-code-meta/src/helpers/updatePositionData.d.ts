import { CustomSceneNode } from '@firejet-sync/shared/types';
export interface UpdatePositionData {
    deltaWidth: number;
    deltaHeight: number;
    deltaX: number;
    deltaY: number;
}
/**TODO: Consider minwidth max width etc */
export declare function getFullPositionData(node: CustomSceneNode, meta: UpdatePositionData): {
    x: number;
    y: number;
    width: number;
    height: number;
    rotation: number;
    relativeTransform: Transform;
    absoluteBoundingBox: Rect & import("@firejet-sync/shared/types").Rectangle;
    absoluteRenderBounds: (Rect & import("@firejet-sync/shared/types").Rectangle) | null | undefined;
    minWidth: null;
    minHeight: null;
    maxWidth: null;
    maxHeight: null;
};
export declare function updatePositionData(node: CustomSceneNode, posData: UpdatePositionData): {
    x: number;
    y: number;
    width: number;
    height: number;
    rotation: number;
    relativeTransform: Transform;
    absoluteBoundingBox: Rect & import("@firejet-sync/shared/types").Rectangle;
    absoluteRenderBounds: (Rect & import("@firejet-sync/shared/types").Rectangle) | null | undefined;
    minWidth: null;
    minHeight: null;
    maxWidth: null;
    maxHeight: null;
    meta: Partial<{
        nodeHasEffectOnDesign?: boolean;
        svgPath: string;
        isComponentSet: boolean;
        componentSetId: string;
        instanceSwaps: Record<string, CustomSceneNode>;
        fillsOpaque: boolean[];
        zIndex: {
            required: boolean;
            value: number;
        };
        minSharedMeta: import("@firejet-sync/shared/types").MinSharedMeta;
        sizingMeta: {
            horizontal: {
                willCollapseOnHug: boolean;
                willExpandOnHug: boolean;
            };
            vertical: {
                willCollapseOnHug: boolean;
                willExpandOnHug: boolean;
            };
        };
    }>;
    type: "TEXT" | "SLICE" | "FRAME" | "GROUP" | "COMPONENT_SET" | "COMPONENT" | "INSTANCE" | "BOOLEAN_OPERATION" | "VECTOR" | "STAR" | "LINE" | "ELLIPSE" | "POLYGON" | "RECTANGLE" | "STICKY" | "CONNECTOR" | "SHAPE_WITH_TEXT" | "CODE_BLOCK" | "STAMP" | "WIDGET" | "EMBED" | "LINK_UNFURL" | "MEDIA" | "SECTION" | "HIGHLIGHT" | "WASHI_TAPE" | "TABLE";
    description?: string | undefined;
    children?: CustomSceneNode[];
    id: string;
    opacity?: number | undefined;
    name: string;
    removed: boolean;
    visible: boolean;
    componentPropertyReferences: { [nodeProperty in "visible" | "characters" | "mainComponent"]?: string; } | null;
    layoutSizingHorizontal?: "FIXED" | "HUG" | "FILL" | undefined;
    layoutSizingVertical?: "FIXED" | "HUG" | "FILL" | undefined;
    layoutPositioning?: "AUTO" | "ABSOLUTE" | undefined;
    layoutGrids?: readonly LayoutGrid[] | undefined;
    clipsContent?: boolean | undefined;
    strokeCap?: StrokeCap | typeof figma.mixed | undefined;
    strokeMiterLimit?: number | undefined;
    strokes: import("@firejet-sync/shared/types").CustomPaint[];
    strokeJoin?: typeof figma.mixed | StrokeJoin | undefined;
    strokeAlign?: "CENTER" | "INSIDE" | "OUTSIDE" | undefined;
    dashPattern?: readonly number[] | undefined;
    fills: import("@firejet-sync/shared/types").CustomPaint[];
    cornerSmoothing?: number | undefined;
    topLeftRadius?: number | undefined;
    topRightRadius?: number | undefined;
    bottomLeftRadius?: number | undefined;
    bottomRightRadius?: number | undefined;
    isMask?: boolean | undefined;
    maskType?: MaskType | undefined;
    effects?: readonly Effect[] | undefined;
    blendMode?: BlendMode | undefined;
    constraints?: Constraints | undefined;
    strokeTopWeight?: number | undefined;
    strokeBottomWeight?: number | undefined;
    strokeLeftWeight?: number | undefined;
    strokeRightWeight?: number | undefined;
    layoutMode?: "NONE" | "HORIZONTAL" | "VERTICAL" | undefined;
    layoutWrap?: "NO_WRAP" | "WRAP" | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    primaryAxisAlignItems?: "CENTER" | "MIN" | "MAX" | "SPACE_BETWEEN" | undefined;
    counterAxisAlignItems?: "CENTER" | "MIN" | "MAX" | "BASELINE" | undefined;
    counterAxisAlignContent?: "AUTO" | "SPACE_BETWEEN" | undefined;
    itemSpacing?: number | undefined;
    counterAxisSpacing?: number | null | undefined;
    itemReverseZIndex?: boolean | undefined;
    strokesIncludedInLayout?: boolean | undefined;
    reactions?: readonly Reaction[] | undefined;
    documentationLinks?: readonly DocumentationLink[] | undefined;
    key?: string | undefined;
    componentPropertyDefinitions?: ComponentPropertyDefinitions | undefined;
    componentProperties?: ComponentProperties | undefined;
    textAlignHorizontal?: "CENTER" | "LEFT" | "RIGHT" | "JUSTIFIED" | undefined;
    textAlignVertical?: "CENTER" | "TOP" | "BOTTOM" | undefined;
    textTruncation?: "DISABLED" | "ENDING" | undefined;
    maxLines?: number | null | undefined;
    paragraphIndent?: number | undefined;
    paragraphSpacing?: number | undefined;
    listSpacing?: number | undefined;
    hangingPunctuation?: boolean | undefined;
    hangingList?: boolean | undefined;
    leadingTrim?: typeof figma.mixed | LeadingTrim | undefined;
    styledTextSegments?: import("@firejet-sync/shared/types").CustomStyledTextSegment[];
    isVector?: boolean;
    exportAs?: import("@firejet-sync/shared/types").ReplaceContentType;
    figmaId: string | null;
};
