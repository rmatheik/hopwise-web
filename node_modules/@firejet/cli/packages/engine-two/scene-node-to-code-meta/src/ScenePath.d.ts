import { CustomSceneNode, GridProps } from '@firejet-sync/shared/types';
import { ComponentMeta, ConversionConfig } from '@firejet-sync/shared/types';
import { PropMap, ConversionComponentMeta } from '@firejet-sync/engine-two-helpers';
interface ScenePathMeta {
    gridProps: GridProps | undefined;
}
export interface ConversionMeta {
    config: ConversionConfig;
    props: ComponentMeta['props'];
    propMap: PropMap;
    componentMeta: Map<string, ConversionComponentMeta>;
    dependencies: ComponentMeta['dependencies'];
}
export declare const BANNED_KEYS_TO_SUBSTITUTE: Record<string, string>;
export declare class ScenePath {
    private handledKeys;
    readonly node: CustomSceneNode;
    readonly parent: CustomSceneNode | undefined;
    readonly parentPath: ScenePath | undefined;
    readonly conversionMeta: ConversionMeta;
    readonly meta: ScenePathMeta;
    constructor(props: {
        node: CustomSceneNode;
        parent?: ScenePath;
        conversionMeta: ConversionMeta;
    });
    /**We want to derive certain properties about the node, like perhaps it could be a grid candidate */
    populateMeta(): void;
    /**Whether the NODE (not the parent!) is absolute positioned */
    isAbsPos(): boolean;
    /**Whether the NODE (not the parent!) is flex positioned */
    isFlexPos(): boolean;
    get horizontalSizing(): "FIXED" | "HUG" | "FILL" | ConstraintType | undefined;
    get verticalSizing(): "FIXED" | "HUG" | "FILL" | ConstraintType | undefined;
    /**Returns an empty array if it is not an auto layout node */
    get autoLayoutChildren(): CustomSceneNode[];
    /**In CSS, the first child is always the backmost. This is not the case in figma
     * This function returns forward if the correct node child order matches figma
     * It returns reverse if the direction needs to be changed
     */
    getChildOrder(): 'FORWARD' | 'REVERSE';
    /**Get the width of the actual node itself when rotated. Otherwise same as normal width */
    getInnerWidth(): number;
    /**Get the outer unrotated width of the node */
    getOuterWidth(): number;
    /**Get the height of the actual node itself when rotated. Otherwise same as normal height */
    getInnerHeight(): number;
    /**Get the outer unrotated height of the node */
    getOuterHeight(): number;
    getInnerLeft(): number;
    getInnerRight(): number;
    getInnerTop(): number;
    getInnerBottom(): number;
    getOuterLeft(): number;
    getOuterRight(): number;
    getOuterTop(): number;
    getOuterBottom(): number;
    /**Gets a key and also adds it to the list of handled keys */
    use<Key extends keyof CustomSceneNode>(key: Key): NonNullable<CustomSceneNode[Key]>;
    /**Check if a key has been used yet */
    isUsed<Key extends keyof CustomSceneNode>(key: Key): boolean;
    getUnusedKeys(): string[];
}
export {};
