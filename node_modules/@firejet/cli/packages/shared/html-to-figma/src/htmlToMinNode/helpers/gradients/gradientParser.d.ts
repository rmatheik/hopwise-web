import { RgbaColor } from 'colord';
export interface SideOrCornerGradientLine {
    type: 'side-or-corner';
    value: 'left' | 'top' | 'bottom' | 'right' | 'left top' | 'top left' | 'left bottom' | 'bottom left' | 'right top' | 'top right' | 'right bottom' | 'bottom right';
}
export type GradientType = 'linear-gradient' | 'repeating-linear-gradient' | 'radial-gradient' | 'repeating-radial-gradient' | 'conic-gradient';
export type AngleGradientLine = {
    type: 'angle';
    value: number;
};
export type GradientNode = LinearGradient | RadialGradient | ConicGradient;
export type Length = {
    value: number;
    unit: string;
};
export type ColorStopList = ColorStopListItem[];
export type ColorStopListItem = ColorStop | ColorHint | AngularColorStop;
export type ColorStop = {
    type: 'color-stop';
    rgba: RgbaColor;
    position?: Length;
};
export type AngularColorStop = {
    type: 'angular-color-stop';
    rgba: RgbaColor;
    angle?: Length | [Length, Length];
};
export type ColorHint = {
    type: 'color-hint';
    hint: Length;
};
export type LinearGradient = {
    type: 'linear-gradient' | 'repeating-linear-gradient';
    gradientLine: SideOrCornerGradientLine | AngleGradientLine;
    colorStops: (ColorStop | ColorHint)[];
};
export type ConicGradient = {
    type: 'conic-gradient' | 'repeating-conic-gradient';
    angle?: number;
    position: string;
    colorStops: (AngularColorStop | ColorHint)[];
};
export type RadialGradient = {
    type: 'radial-gradient' | 'repeating-radial-gradient';
    endingShape: 'circle' | 'ellipse';
    size: 'closest-corner' | 'closest-side' | 'farthest-corner' | 'farthest-side' | Length[];
    position: string;
    colorStops: (ColorStop | ColorHint)[];
};
export declare function parseGradient(css: string): GradientNode[];
