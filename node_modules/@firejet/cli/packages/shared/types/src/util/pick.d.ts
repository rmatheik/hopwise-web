export type PickWithVal<T, V> = Pick<T, KeysWithVal<T, V>>;
export type PickAllWithVal<T, V> = Pick<T, KeysWithOverlappingVal<T, V>>;
export type KeysWithVal<T, V> = {
    [K in keyof T]: [V] extends [T[K]] ? K : never;
}[keyof T];
export type KeysWithOverlappingVal<T, V> = {
    [K in keyof T]: T[K] extends V ? K : never;
}[keyof T];
