import { NodeElementMeta, NodeElementMetaPartial } from '../nodeMetas';
export type Action = CreateChildAction | UpdateAction | DeleteChildAction | MoveChildAction | SaveAction;
export type FullAction<A extends Action = Action> = A extends CreateChildAction ? CreateChildActionFull : A extends UpdateAction ? UpdateActionFull : A extends DeleteChildAction ? DeleteChildActionFull : A extends MoveChildAction ? MoveChildActionFull : A extends SaveAction ? SaveAction : never;
export interface CreateChildActionFull {
    type: 'CREATE';
    nodeId: string;
    nodeData: NodeElementMeta;
    position: number;
    reverse: DeleteChildAction;
}
export interface UpdateActionFull {
    type: 'UPDATE';
    nodeId: string;
    nodeData: UpdateActionMeta;
    reverse: UpdateAction;
}
export interface DeleteChildActionFull {
    type: 'DELETE';
    childId: string;
    nodeId: string;
    reverse: CreateChildAction;
}
export interface MoveChildActionFull {
    type: 'MOVE';
    childId: string;
    nodeId: string;
    position: number;
    reverse: MoveChildAction;
}
export type DeleteChildAction = Omit<DeleteChildActionFull, 'reverse'>;
export type MoveChildAction = Omit<MoveChildActionFull, 'reverse'>;
export type UpdateAction = Omit<UpdateActionFull, 'reverse'>;
export type CreateChildAction = Omit<CreateChildActionFull, 'reverse' | 'nodeData'> & {
    nodeData: NodeElementMetaPartial;
};
export interface SaveAction {
    type: 'SAVE';
    nodeId: 'D0';
}
export interface UpdateActionMeta {
    style?: Record<string, string | null>;
}
