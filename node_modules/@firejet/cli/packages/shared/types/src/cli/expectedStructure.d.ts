import { Props } from './firejetCLIconfig';
export type Struct = ComponentStruct | RepeatStruct | SlotStruct | TextStruct | OptionalStruct | ContainerStruct | EitherStruct | EitherOptionStruct;
interface StructBase {
    type: string;
    /**Make this always exist except when defining in the config */
    structId?: number;
}
export interface EitherStruct extends StructBase {
    type: 'either';
    children: EitherOptionStruct[];
}
export interface EitherOptionStruct extends StructBase {
    type: 'either-option';
    children: Struct[];
}
/**Used when you need to create a div/label/whatever structure inside the component struct */
export interface ContainerStruct extends StructBase {
    type: 'container';
    tag: string;
    children: Struct[];
    /**Base styles can always be overriden with className and styles, because it is manually written as part of the struct */
    baseStyles: Record<string, string>;
}
export interface ComponentStruct extends StructBase {
    type: 'component';
    name: string;
    children: Struct[];
    props: Props;
}
export interface RepeatStruct extends StructBase {
    type: 'repeat';
    children: Struct[];
    /**Defaults to 3 */
    expectedCount?: number;
}
export interface OptionalStruct extends StructBase {
    type: 'optional';
    children: Struct[];
}
export interface SlotStruct extends StructBase {
    type: 'slot';
    structMeta?: {
        /**How deep children can be. Defaults to infinity */
        maxDepth?: number;
        /**How many children there can be, including nested children and parents. DEfaults to infinity */
        maxNodes?: number;
    };
    renderValue?: {
        tag?: string;
        styles?: Record<string, string>;
    };
}
export interface TextStruct extends StructBase {
    type: 'text';
    renderValue?: {
        placeholderText?: string;
    };
}
export {};
