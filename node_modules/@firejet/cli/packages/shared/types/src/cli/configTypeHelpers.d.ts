import { FJ } from '..';
import { ComponentStruct, ContainerStruct, EitherStruct, OptionalStruct, RepeatStruct, SlotStruct, Struct, TextStruct } from './expectedStructure';
import { Props } from './firejetCLIconfig';
export declare const typeHelpers: {
    prop: {
        enum: (values: string[]) => FJ.Enum;
        cssClass: (renderValue?: FJ.Design["renderValue"]) => FJ.Design;
        text: (placeholder?: string) => {
            type: "element";
            structure: FJ.Struct[];
            implementation?: "function" | "literal" | undefined;
            renderValue?: any;
        };
        boolean: () => FJ.Boolean;
        number: (renderValue: number) => FJ.Numerical;
        imgSrc: () => FJ.ImageSrc;
        ele: (structure: Struct[]) => FJ.Element;
        eleText: () => {
            type: "element";
            structure: FJ.Struct[];
            implementation?: "function" | "literal" | undefined;
            renderValue?: any;
        };
        eleSlot: () => {
            type: "element";
            structure: FJ.Struct[];
            implementation?: "function" | "literal" | undefined;
            renderValue?: any;
        };
    };
    struct: {
        either: (...options: Struct[][]) => EitherStruct;
        container: (children: Struct[], baseStyles?: Record<string, string>, tag?: string) => ContainerStruct;
        comp: (name: string, children?: Struct[], props?: Props) => ComponentStruct;
        repeat: (children: Struct[], expectedCount?: number) => RepeatStruct;
        optional: (children: Struct[]) => OptionalStruct;
        /**You can specify a tag on the slot placeholder in case styles are applied by tag */
        slot: (data?: {
            renderValue?: SlotStruct["renderValue"];
            structMeta?: SlotStruct["structMeta"];
        }) => SlotStruct;
        text: (placeholderText?: string) => TextStruct;
    };
    deps: (dependencies?: FJ.ComponentDef["dependencies"] | Record<string, string>, importOverride?: string) => Record<string, {
        path: string;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
    }> | undefined;
};
