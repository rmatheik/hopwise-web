import type { InlineConfig } from 'vite';
import z, { ZodType } from 'zod';
import { Struct } from './expectedStructure';
export declare const stringImplementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["string-literal"]>>>;
export declare const staticImplementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["literal", "function"]>>>;
export declare const enumImplementation: z.ZodObject<{
    type: z.ZodDefault<z.ZodOptional<z.ZodEnum<["string-literal"]>>>;
    values: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    type: "string-literal";
    values: string[];
}, {
    values: string[];
    type?: "string-literal" | undefined;
}>;
export type ImplementationType = z.infer<typeof staticImplementation> | z.infer<typeof stringImplementation>;
export declare const renderValue: z.ZodOptional<z.ZodAny>;
export declare const funcStubImplementation: z.ZodAny;
export declare const objectImplementation: z.ZodRecord<z.ZodString, z.ZodAny>;
export declare const textSchema: z.ZodObject<{
    type: z.ZodLiteral<"text">;
    implementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["string-literal"]>>>;
    renderValue: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "text";
    implementation: "string-literal";
    renderValue?: any;
}, {
    type: "text";
    implementation?: "string-literal" | undefined;
    renderValue?: any;
}>;
export declare const componentSchema: z.ZodObject<{
    type: z.ZodLiteral<"component">;
    componentName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "component";
    componentName: string;
}, {
    type: "component";
    componentName: string;
}>;
declare const baseImportableSchema: z.ZodObject<{
    path: z.ZodString;
    defaultExport: z.ZodOptional<z.ZodBoolean>;
    exportName: z.ZodOptional<z.ZodString>;
    importOverride: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    path: string;
    exportName?: string | undefined;
    defaultExport?: boolean | undefined;
    importOverride?: string | undefined;
}, {
    path: string;
    exportName?: string | undefined;
    defaultExport?: boolean | undefined;
    importOverride?: string | undefined;
}>;
export declare const elementSchema: z.ZodObject<{
    type: z.ZodLiteral<"element">;
    implementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["literal", "function"]>>>;
    renderValue: z.ZodOptional<z.ZodAny>;
    /**Tell FireJet what elements you expect, for example a <Card> might have <CardHeader> and <CardBody> */
    structure: ZodType<Struct[]>;
}, "strip", z.ZodTypeAny, {
    type: "element";
    implementation: "function" | "literal";
    structure: Struct[];
    renderValue?: any;
}, {
    type: "element";
    structure: Struct[];
    implementation?: "function" | "literal" | undefined;
    renderValue?: any;
}>;
export declare const imgSrcSchema: z.ZodObject<{
    type: z.ZodLiteral<"image-src">;
    implementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["string-literal"]>>>;
    renderValue: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "image-src";
    implementation: "string-literal";
    renderValue?: any;
}, {
    type: "image-src";
    implementation?: "string-literal" | undefined;
    renderValue?: any;
}>;
export declare const booleanSchema: z.ZodObject<{
    type: z.ZodLiteral<"boolean">;
    implementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["literal", "function"]>>>;
    renderValue: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "boolean";
    implementation: "function" | "literal";
    renderValue?: any;
}, {
    type: "boolean";
    implementation?: "function" | "literal" | undefined;
    renderValue?: any;
}>;
export declare const enumSchema: z.ZodObject<{
    type: z.ZodLiteral<"enum">;
    implementation: z.ZodObject<{
        type: z.ZodDefault<z.ZodOptional<z.ZodEnum<["string-literal"]>>>;
        values: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "string-literal";
        values: string[];
    }, {
        values: string[];
        type?: "string-literal" | undefined;
    }>;
    renderValue: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "enum";
    implementation: {
        type: "string-literal";
        values: string[];
    };
    renderValue?: any;
}, {
    type: "enum";
    implementation: {
        values: string[];
        type?: "string-literal" | undefined;
    };
    renderValue?: any;
}>;
export declare const designSchema: z.ZodObject<{
    type: z.ZodLiteral<"css-class">;
    implementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["string-literal"]>>>;
    renderValue: z.ZodOptional<z.ZodObject<{
        styles: z.ZodRecord<z.ZodString, z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        styles: Record<string, string>;
    }, {
        styles: Record<string, string>;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "css-class";
    implementation: "string-literal";
    renderValue?: {
        styles: Record<string, string>;
    } | undefined;
}, {
    type: "css-class";
    implementation?: "string-literal" | undefined;
    renderValue?: {
        styles: Record<string, string>;
    } | undefined;
}>;
export declare const functionalSchema: z.ZodObject<{
    type: z.ZodLiteral<"function">;
    implementation: z.ZodAny;
    renderValue: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "function";
    implementation?: any;
    renderValue?: any;
}, {
    type: "function";
    implementation?: any;
    renderValue?: any;
}>;
export declare const objectSchema: z.ZodObject<{
    type: z.ZodLiteral<"object">;
    implementation: z.ZodRecord<z.ZodString, z.ZodAny>;
    renderValue: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "object";
    implementation: Record<string, any>;
    renderValue?: any;
}, {
    type: "object";
    implementation: Record<string, any>;
    renderValue?: any;
}>;
export declare const numericalSchema: z.ZodObject<{
    type: z.ZodLiteral<"number">;
    /**Sometimes numbers are needed to render items with context, like progress bars.
     * A placeholder number will be used in the output code, but its not currently realistic to
     * get the number from the figma design */
    renderValue: z.ZodNumber;
    implementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["literal", "function"]>>>;
}, "strip", z.ZodTypeAny, {
    type: "number";
    implementation: "function" | "literal";
    renderValue: number;
}, {
    type: "number";
    renderValue: number;
    implementation?: "function" | "literal" | undefined;
}>;
export type ObjectDict = {
    type: 'object';
    implementation: Record<string, Any>;
};
export type Component = z.input<typeof componentSchema>;
export type Element = z.input<typeof elementSchema>;
export type Text = z.input<typeof textSchema>;
export type ImageSrc = z.input<typeof imgSrcSchema>;
export type Boolean = z.input<typeof booleanSchema>;
export type Enum = z.input<typeof enumSchema>;
export type Design = z.input<typeof designSchema>;
export type Functional = z.input<typeof functionalSchema>;
export type Numerical = z.input<typeof numericalSchema>;
export type Any = Element | Text | ImageSrc | Boolean | Enum | Design | Functional | Numerical | ObjectDict;
export declare const anySchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    type: z.ZodLiteral<"text">;
    implementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["string-literal"]>>>;
    renderValue: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "text";
    implementation: "string-literal";
    renderValue?: any;
}, {
    type: "text";
    implementation?: "string-literal" | undefined;
    renderValue?: any;
}>, z.ZodObject<{
    type: z.ZodLiteral<"element">;
    implementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["literal", "function"]>>>;
    renderValue: z.ZodOptional<z.ZodAny>;
    /**Tell FireJet what elements you expect, for example a <Card> might have <CardHeader> and <CardBody> */
    structure: ZodType<Struct[]>;
}, "strip", z.ZodTypeAny, {
    type: "element";
    implementation: "function" | "literal";
    structure: Struct[];
    renderValue?: any;
}, {
    type: "element";
    structure: Struct[];
    implementation?: "function" | "literal" | undefined;
    renderValue?: any;
}>, z.ZodObject<{
    type: z.ZodLiteral<"image-src">;
    implementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["string-literal"]>>>;
    renderValue: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "image-src";
    implementation: "string-literal";
    renderValue?: any;
}, {
    type: "image-src";
    implementation?: "string-literal" | undefined;
    renderValue?: any;
}>, z.ZodObject<{
    type: z.ZodLiteral<"boolean">;
    implementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["literal", "function"]>>>;
    renderValue: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "boolean";
    implementation: "function" | "literal";
    renderValue?: any;
}, {
    type: "boolean";
    implementation?: "function" | "literal" | undefined;
    renderValue?: any;
}>, z.ZodObject<{
    type: z.ZodLiteral<"css-class">;
    implementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["string-literal"]>>>;
    renderValue: z.ZodOptional<z.ZodObject<{
        styles: z.ZodRecord<z.ZodString, z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        styles: Record<string, string>;
    }, {
        styles: Record<string, string>;
    }>>;
}, "strip", z.ZodTypeAny, {
    type: "css-class";
    implementation: "string-literal";
    renderValue?: {
        styles: Record<string, string>;
    } | undefined;
}, {
    type: "css-class";
    implementation?: "string-literal" | undefined;
    renderValue?: {
        styles: Record<string, string>;
    } | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"function">;
    implementation: z.ZodAny;
    renderValue: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "function";
    implementation?: any;
    renderValue?: any;
}, {
    type: "function";
    implementation?: any;
    renderValue?: any;
}>, z.ZodObject<{
    type: z.ZodLiteral<"object">;
    implementation: z.ZodRecord<z.ZodString, z.ZodAny>;
    renderValue: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "object";
    implementation: Record<string, any>;
    renderValue?: any;
}, {
    type: "object";
    implementation: Record<string, any>;
    renderValue?: any;
}>, z.ZodObject<{
    type: z.ZodLiteral<"enum">;
    implementation: z.ZodObject<{
        type: z.ZodDefault<z.ZodOptional<z.ZodEnum<["string-literal"]>>>;
        values: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        type: "string-literal";
        values: string[];
    }, {
        values: string[];
        type?: "string-literal" | undefined;
    }>;
    renderValue: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "enum";
    implementation: {
        type: "string-literal";
        values: string[];
    };
    renderValue?: any;
}, {
    type: "enum";
    implementation: {
        values: string[];
        type?: "string-literal" | undefined;
    };
    renderValue?: any;
}>, z.ZodObject<{
    type: z.ZodLiteral<"number">;
    /**Sometimes numbers are needed to render items with context, like progress bars.
     * A placeholder number will be used in the output code, but its not currently realistic to
     * get the number from the figma design */
    renderValue: z.ZodNumber;
    implementation: z.ZodDefault<z.ZodOptional<z.ZodEnum<["literal", "function"]>>>;
}, "strip", z.ZodTypeAny, {
    type: "number";
    implementation: "function" | "literal";
    renderValue: number;
}, {
    type: "number";
    renderValue: number;
    implementation?: "function" | "literal" | undefined;
}>]>;
export declare const reactProviderSchema: z.ZodObject<z.objectUtil.extendShape<{
    path: z.ZodString;
    defaultExport: z.ZodOptional<z.ZodBoolean>;
    exportName: z.ZodOptional<z.ZodString>;
    importOverride: z.ZodOptional<z.ZodString>;
}, {}>, "strip", z.ZodTypeAny, {
    path: string;
    exportName?: string | undefined;
    defaultExport?: boolean | undefined;
    importOverride?: string | undefined;
}, {
    path: string;
    exportName?: string | undefined;
    defaultExport?: boolean | undefined;
    importOverride?: string | undefined;
}>;
export declare const component: z.ZodObject<z.objectUtil.extendShape<{
    path: z.ZodString;
    defaultExport: z.ZodOptional<z.ZodBoolean>;
    exportName: z.ZodOptional<z.ZodString>;
    importOverride: z.ZodOptional<z.ZodString>;
}, {
    /**Tell FireJet what elements you expect, for example a <Card> might have <CardHeader> and <CardBody> */
    structure: ZodType<Struct>;
    /**Dependencies to render the structure */
    dependencies: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        path: z.ZodString;
        defaultExport: z.ZodOptional<z.ZodBoolean>;
        exportName: z.ZodOptional<z.ZodString>;
        importOverride: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        path: string;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
    }, {
        path: string;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
    }>>>;
}>, "strip", z.ZodTypeAny, {
    path: string;
    structure: Struct;
    exportName?: string | undefined;
    defaultExport?: boolean | undefined;
    importOverride?: string | undefined;
    dependencies?: Record<string, {
        path: string;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
    }> | undefined;
}, {
    path: string;
    structure: Struct;
    exportName?: string | undefined;
    defaultExport?: boolean | undefined;
    importOverride?: string | undefined;
    dependencies?: Record<string, {
        path: string;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
    }> | undefined;
}>;
export declare const referenceDesignSchema: z.ZodObject<{
    url: z.ZodString;
    xpath: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    url: string;
    xpath?: string | undefined;
}, {
    url: string;
    xpath?: string | undefined;
}>;
export declare const firejetGroupSchema: z.ZodObject<{
    components: z.ZodRecord<z.ZodString, z.ZodObject<z.objectUtil.extendShape<{
        path: z.ZodString;
        defaultExport: z.ZodOptional<z.ZodBoolean>;
        exportName: z.ZodOptional<z.ZodString>;
        importOverride: z.ZodOptional<z.ZodString>;
    }, {
        /**Tell FireJet what elements you expect, for example a <Card> might have <CardHeader> and <CardBody> */
        structure: ZodType<Struct>;
        /**Dependencies to render the structure */
        dependencies: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            path: z.ZodString;
            defaultExport: z.ZodOptional<z.ZodBoolean>;
            exportName: z.ZodOptional<z.ZodString>;
            importOverride: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            path: string;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
        }, {
            path: string;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
        }>>>;
    }>, "strip", z.ZodTypeAny, {
        path: string;
        structure: Struct;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
        dependencies?: Record<string, {
            path: string;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
        }> | undefined;
    }, {
        path: string;
        structure: Struct;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
        dependencies?: Record<string, {
            path: string;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
        }> | undefined;
    }>>;
    globalCss: z.ZodArray<z.ZodString, "many">;
    viteConfig: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    postcssPath: z.ZodOptional<z.ZodString>;
    reactProviders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<z.objectUtil.extendShape<{
        path: z.ZodString;
        defaultExport: z.ZodOptional<z.ZodBoolean>;
        exportName: z.ZodOptional<z.ZodString>;
        importOverride: z.ZodOptional<z.ZodString>;
    }, {}>, "strip", z.ZodTypeAny, {
        path: string;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
    }, {
        path: string;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
    }>>>;
    defaultExport: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    components: Record<string, {
        path: string;
        structure: Struct;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
        dependencies?: Record<string, {
            path: string;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
        }> | undefined;
    }>;
    globalCss: string[];
    defaultExport?: boolean | undefined;
    viteConfig?: Record<string, any> | undefined;
    postcssPath?: string | undefined;
    reactProviders?: Record<string, {
        path: string;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
    }> | undefined;
}, {
    components: Record<string, {
        path: string;
        structure: Struct;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
        dependencies?: Record<string, {
            path: string;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
        }> | undefined;
    }>;
    globalCss: string[];
    defaultExport?: boolean | undefined;
    viteConfig?: Record<string, any> | undefined;
    postcssPath?: string | undefined;
    reactProviders?: Record<string, {
        path: string;
        exportName?: string | undefined;
        defaultExport?: boolean | undefined;
        importOverride?: string | undefined;
    }> | undefined;
}>;
export declare const firejetConfigSchema: z.ZodObject<{
    groups: z.ZodRecord<z.ZodString, z.ZodObject<{
        components: z.ZodRecord<z.ZodString, z.ZodObject<z.objectUtil.extendShape<{
            path: z.ZodString;
            defaultExport: z.ZodOptional<z.ZodBoolean>;
            exportName: z.ZodOptional<z.ZodString>;
            importOverride: z.ZodOptional<z.ZodString>;
        }, {
            /**Tell FireJet what elements you expect, for example a <Card> might have <CardHeader> and <CardBody> */
            structure: ZodType<Struct>;
            /**Dependencies to render the structure */
            dependencies: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                path: z.ZodString;
                defaultExport: z.ZodOptional<z.ZodBoolean>;
                exportName: z.ZodOptional<z.ZodString>;
                importOverride: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                path: string;
                exportName?: string | undefined;
                defaultExport?: boolean | undefined;
                importOverride?: string | undefined;
            }, {
                path: string;
                exportName?: string | undefined;
                defaultExport?: boolean | undefined;
                importOverride?: string | undefined;
            }>>>;
        }>, "strip", z.ZodTypeAny, {
            path: string;
            structure: Struct;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
            dependencies?: Record<string, {
                path: string;
                exportName?: string | undefined;
                defaultExport?: boolean | undefined;
                importOverride?: string | undefined;
            }> | undefined;
        }, {
            path: string;
            structure: Struct;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
            dependencies?: Record<string, {
                path: string;
                exportName?: string | undefined;
                defaultExport?: boolean | undefined;
                importOverride?: string | undefined;
            }> | undefined;
        }>>;
        globalCss: z.ZodArray<z.ZodString, "many">;
        viteConfig: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
        postcssPath: z.ZodOptional<z.ZodString>;
        reactProviders: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<z.objectUtil.extendShape<{
            path: z.ZodString;
            defaultExport: z.ZodOptional<z.ZodBoolean>;
            exportName: z.ZodOptional<z.ZodString>;
            importOverride: z.ZodOptional<z.ZodString>;
        }, {}>, "strip", z.ZodTypeAny, {
            path: string;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
        }, {
            path: string;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
        }>>>;
        defaultExport: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        components: Record<string, {
            path: string;
            structure: Struct;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
            dependencies?: Record<string, {
                path: string;
                exportName?: string | undefined;
                defaultExport?: boolean | undefined;
                importOverride?: string | undefined;
            }> | undefined;
        }>;
        globalCss: string[];
        defaultExport?: boolean | undefined;
        viteConfig?: Record<string, any> | undefined;
        postcssPath?: string | undefined;
        reactProviders?: Record<string, {
            path: string;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
        }> | undefined;
    }, {
        components: Record<string, {
            path: string;
            structure: Struct;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
            dependencies?: Record<string, {
                path: string;
                exportName?: string | undefined;
                defaultExport?: boolean | undefined;
                importOverride?: string | undefined;
            }> | undefined;
        }>;
        globalCss: string[];
        defaultExport?: boolean | undefined;
        viteConfig?: Record<string, any> | undefined;
        postcssPath?: string | undefined;
        reactProviders?: Record<string, {
            path: string;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
        }> | undefined;
    }>>;
    referenceDesigns: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        url: z.ZodString;
        xpath: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        url: string;
        xpath?: string | undefined;
    }, {
        url: string;
        xpath?: string | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    groups: Record<string, {
        components: Record<string, {
            path: string;
            structure: Struct;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
            dependencies?: Record<string, {
                path: string;
                exportName?: string | undefined;
                defaultExport?: boolean | undefined;
                importOverride?: string | undefined;
            }> | undefined;
        }>;
        globalCss: string[];
        defaultExport?: boolean | undefined;
        viteConfig?: Record<string, any> | undefined;
        postcssPath?: string | undefined;
        reactProviders?: Record<string, {
            path: string;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
        }> | undefined;
    }>;
    referenceDesigns?: Record<string, {
        url: string;
        xpath?: string | undefined;
    }> | undefined;
}, {
    groups: Record<string, {
        components: Record<string, {
            path: string;
            structure: Struct;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
            dependencies?: Record<string, {
                path: string;
                exportName?: string | undefined;
                defaultExport?: boolean | undefined;
                importOverride?: string | undefined;
            }> | undefined;
        }>;
        globalCss: string[];
        defaultExport?: boolean | undefined;
        viteConfig?: Record<string, any> | undefined;
        postcssPath?: string | undefined;
        reactProviders?: Record<string, {
            path: string;
            exportName?: string | undefined;
            defaultExport?: boolean | undefined;
            importOverride?: string | undefined;
        }> | undefined;
    }>;
    referenceDesigns?: Record<string, {
        url: string;
        xpath?: string | undefined;
    }> | undefined;
}>;
export type FireJetConfigGroupResolved = z.infer<typeof firejetGroupSchema>;
export type FireJetConfigGroup = z.input<typeof firejetGroupSchema>;
export type BaseImportable = z.infer<typeof baseImportableSchema>;
export type ReactProvider = z.infer<typeof reactProviderSchema>;
export type ComponentDef = z.infer<typeof component>;
export type Props = Record<string, Any>;
export type PropsWithoutImplementation = Record<string, Omit<Any, 'implementation'>>;
export type FireJetConfigResolved = z.infer<typeof firejetConfigSchema>;
export type FireJetConfig = Omit<z.input<typeof firejetConfigSchema>, 'viteConfig'> & {
    viteConfig?: InlineConfig;
};
export * from './expectedStructure';
