export type Json = string | number | boolean | null | {
    [key: string]: Json | undefined;
} | Json[];
export type Database = {
    graphql_public: {
        Tables: {
            [_ in never]: never;
        };
        Views: {
            [_ in never]: never;
        };
        Functions: {
            graphql: {
                Args: {
                    operationName?: string;
                    query?: string;
                    variables?: Json;
                    extensions?: Json;
                };
                Returns: Json;
            };
        };
        Enums: {
            [_ in never]: never;
        };
        CompositeTypes: {
            [_ in never]: never;
        };
    };
    public: {
        Tables: {
            change_log: {
                Row: {
                    created_at: string | null;
                    desc: string | null;
                    id: number;
                    title: string | null;
                    type: Database['public']['Enums']['changelog_type'] | null;
                };
                Insert: {
                    created_at?: string | null;
                    desc?: string | null;
                    id?: number;
                    title?: string | null;
                    type?: Database['public']['Enums']['changelog_type'] | null;
                };
                Update: {
                    created_at?: string | null;
                    desc?: string | null;
                    id?: number;
                    title?: string | null;
                    type?: Database['public']['Enums']['changelog_type'] | null;
                };
                Relationships: [];
            };
            feedback_log: {
                Row: {
                    codeNotReadable: boolean | null;
                    codeNotResponsive: boolean | null;
                    created_at: string | null;
                    detailedIssues: string | null;
                    email: string | null;
                    emotionalState: string | null;
                    featureLacks: string | null;
                    gptEnhanced: boolean | null;
                    id: number;
                    imgUrl: string | null;
                    imgUrls: string[] | null;
                    negativeFeedback: string | null;
                    notPixelPerfect: boolean | null;
                    positiveFeedback: string | null;
                    priceFeedback: string | null;
                    projectUrl: string | null;
                    rawTree: string | null;
                    renderImgUrl: string | null;
                    selectedFrame: Json | null;
                    uuid: string | null;
                };
                Insert: {
                    codeNotReadable?: boolean | null;
                    codeNotResponsive?: boolean | null;
                    created_at?: string | null;
                    detailedIssues?: string | null;
                    email?: string | null;
                    emotionalState?: string | null;
                    featureLacks?: string | null;
                    gptEnhanced?: boolean | null;
                    id?: number;
                    imgUrl?: string | null;
                    imgUrls?: string[] | null;
                    negativeFeedback?: string | null;
                    notPixelPerfect?: boolean | null;
                    positiveFeedback?: string | null;
                    priceFeedback?: string | null;
                    projectUrl?: string | null;
                    rawTree?: string | null;
                    renderImgUrl?: string | null;
                    selectedFrame?: Json | null;
                    uuid?: string | null;
                };
                Update: {
                    codeNotReadable?: boolean | null;
                    codeNotResponsive?: boolean | null;
                    created_at?: string | null;
                    detailedIssues?: string | null;
                    email?: string | null;
                    emotionalState?: string | null;
                    featureLacks?: string | null;
                    gptEnhanced?: boolean | null;
                    id?: number;
                    imgUrl?: string | null;
                    imgUrls?: string[] | null;
                    negativeFeedback?: string | null;
                    notPixelPerfect?: boolean | null;
                    positiveFeedback?: string | null;
                    priceFeedback?: string | null;
                    projectUrl?: string | null;
                    rawTree?: string | null;
                    renderImgUrl?: string | null;
                    selectedFrame?: Json | null;
                    uuid?: string | null;
                };
                Relationships: [];
            };
            fonts: {
                Row: {
                    copyright: string | null;
                    family_name: string;
                    full_name: string;
                    id: number;
                    postscript_name: string;
                    subfamily_name: string;
                    url: string | null;
                    version: string | null;
                };
                Insert: {
                    copyright?: string | null;
                    family_name: string;
                    full_name: string;
                    id?: number;
                    postscript_name: string;
                    subfamily_name: string;
                    url?: string | null;
                    version?: string | null;
                };
                Update: {
                    copyright?: string | null;
                    family_name?: string;
                    full_name?: string;
                    id?: number;
                    postscript_name?: string;
                    subfamily_name?: string;
                    url?: string | null;
                    version?: string | null;
                };
                Relationships: [];
            };
            hosted_preview: {
                Row: {
                    created_at: string;
                    files: Json | null;
                    id: string;
                };
                Insert: {
                    created_at?: string;
                    files?: Json | null;
                    id?: string;
                };
                Update: {
                    created_at?: string;
                    files?: Json | null;
                    id?: string;
                };
                Relationships: [];
            };
            key_pairs: {
                Row: {
                    created_at: string | null;
                    id: number;
                    read_key: string | null;
                    session: Json | null;
                    write_key: string;
                };
                Insert: {
                    created_at?: string | null;
                    id?: number;
                    read_key?: string | null;
                    session?: Json | null;
                    write_key?: string;
                };
                Update: {
                    created_at?: string | null;
                    id?: number;
                    read_key?: string | null;
                    session?: Json | null;
                    write_key?: string;
                };
                Relationships: [];
            };
            onboarding_steps: {
                Row: {
                    created_at: string;
                    desc: string | null;
                    id: number;
                    media_url: string | null;
                    title: string | null;
                };
                Insert: {
                    created_at?: string;
                    desc?: string | null;
                    id?: number;
                    media_url?: string | null;
                    title?: string | null;
                };
                Update: {
                    created_at?: string;
                    desc?: string | null;
                    id?: number;
                    media_url?: string | null;
                    title?: string | null;
                };
                Relationships: [];
            };
            payment_details: {
                Row: {
                    created_at: string | null;
                    id: number;
                    subscription_id: string;
                    user_id: string;
                };
                Insert: {
                    created_at?: string | null;
                    id?: number;
                    subscription_id: string;
                    user_id: string;
                };
                Update: {
                    created_at?: string | null;
                    id?: number;
                    subscription_id?: string;
                    user_id?: string;
                };
                Relationships: [
                    {
                        foreignKeyName: 'payment_details_user_id_fkey';
                        columns: ['user_id'];
                        isOneToOne: false;
                        referencedRelation: 'users';
                        referencedColumns: ['id'];
                    },
                    {
                        foreignKeyName: 'payment_details_user_id_fkey';
                        columns: ['user_id'];
                        isOneToOne: false;
                        referencedRelation: 'users_view';
                        referencedColumns: ['id'];
                    }
                ];
            };
            payment_details_dev: {
                Row: {
                    created_at: string | null;
                    id: number;
                    subscription_id: string;
                    user_id: string;
                };
                Insert: {
                    created_at?: string | null;
                    id?: number;
                    subscription_id: string;
                    user_id: string;
                };
                Update: {
                    created_at?: string | null;
                    id?: number;
                    subscription_id?: string;
                    user_id?: string;
                };
                Relationships: [
                    {
                        foreignKeyName: 'payment_details_dev_user_id_fkey';
                        columns: ['user_id'];
                        isOneToOne: false;
                        referencedRelation: 'users';
                        referencedColumns: ['id'];
                    },
                    {
                        foreignKeyName: 'payment_details_dev_user_id_fkey';
                        columns: ['user_id'];
                        isOneToOne: false;
                        referencedRelation: 'users_view';
                        referencedColumns: ['id'];
                    }
                ];
            };
            signups: {
                Row: {
                    company_name: string | null;
                    created_at: string | null;
                    email: string | null;
                    id: number;
                    intended_use: string | null;
                    job_title: string | null;
                    purpose: string | null;
                    team_id: string;
                };
                Insert: {
                    company_name?: string | null;
                    created_at?: string | null;
                    email?: string | null;
                    id?: number;
                    intended_use?: string | null;
                    job_title?: string | null;
                    purpose?: string | null;
                    team_id?: string;
                };
                Update: {
                    company_name?: string | null;
                    created_at?: string | null;
                    email?: string | null;
                    id?: number;
                    intended_use?: string | null;
                    job_title?: string | null;
                    purpose?: string | null;
                    team_id?: string;
                };
                Relationships: [];
            };
            sync_files: {
                Row: {
                    created_at: string | null;
                    file: Json;
                    id: number;
                    path: string;
                    project: number;
                    updated_by: string | null;
                };
                Insert: {
                    created_at?: string | null;
                    file: Json;
                    id?: number;
                    path: string;
                    project: number;
                    updated_by?: string | null;
                };
                Update: {
                    created_at?: string | null;
                    file?: Json;
                    id?: number;
                    path?: string;
                    project?: number;
                    updated_by?: string | null;
                };
                Relationships: [
                    {
                        foreignKeyName: 'sync_files_project_fkey';
                        columns: ['project'];
                        isOneToOne: false;
                        referencedRelation: 'sync_projects';
                        referencedColumns: ['id'];
                    }
                ];
            };
            sync_permissions: {
                Row: {
                    created_at: string | null;
                    id: number;
                    permissions: Database['public']['Enums']['user_permissions'];
                    project_id: number;
                    user: string;
                };
                Insert: {
                    created_at?: string | null;
                    id?: number;
                    permissions: Database['public']['Enums']['user_permissions'];
                    project_id: number;
                    user: string;
                };
                Update: {
                    created_at?: string | null;
                    id?: number;
                    permissions?: Database['public']['Enums']['user_permissions'];
                    project_id?: number;
                    user?: string;
                };
                Relationships: [
                    {
                        foreignKeyName: 'sync_permissions_project_id_fkey';
                        columns: ['project_id'];
                        isOneToOne: false;
                        referencedRelation: 'sync_projects';
                        referencedColumns: ['id'];
                    },
                    {
                        foreignKeyName: 'sync_permissions_user_fkey';
                        columns: ['user'];
                        isOneToOne: false;
                        referencedRelation: 'users';
                        referencedColumns: ['id'];
                    },
                    {
                        foreignKeyName: 'sync_permissions_user_fkey';
                        columns: ['user'];
                        isOneToOne: false;
                        referencedRelation: 'users_view';
                        referencedColumns: ['id'];
                    }
                ];
            };
            sync_projects: {
                Row: {
                    created_at: string | null;
                    id: number;
                    project_permissions: Database['public']['Enums']['project_permissions'];
                };
                Insert: {
                    created_at?: string | null;
                    id?: number;
                    project_permissions?: Database['public']['Enums']['project_permissions'];
                };
                Update: {
                    created_at?: string | null;
                    id?: number;
                    project_permissions?: Database['public']['Enums']['project_permissions'];
                };
                Relationships: [];
            };
            sync_projects_meta: {
                Row: {
                    created_at: string | null;
                    locked_by: string | null;
                    project_id: number;
                    project_name: string;
                };
                Insert: {
                    created_at?: string | null;
                    locked_by?: string | null;
                    project_id: number;
                    project_name?: string;
                };
                Update: {
                    created_at?: string | null;
                    locked_by?: string | null;
                    project_id?: number;
                    project_name?: string;
                };
                Relationships: [
                    {
                        foreignKeyName: 'sync_projects_meta_locked_by_fkey';
                        columns: ['locked_by'];
                        isOneToOne: false;
                        referencedRelation: 'users';
                        referencedColumns: ['id'];
                    },
                    {
                        foreignKeyName: 'sync_projects_meta_locked_by_fkey';
                        columns: ['locked_by'];
                        isOneToOne: false;
                        referencedRelation: 'users_view';
                        referencedColumns: ['id'];
                    },
                    {
                        foreignKeyName: 'sync_projects_meta_project_id_fkey';
                        columns: ['project_id'];
                        isOneToOne: true;
                        referencedRelation: 'sync_projects';
                        referencedColumns: ['id'];
                    }
                ];
            };
            tailwind_dict_cache: {
                Row: {
                    created_at: string | null;
                    dict_string: Json;
                    hash_val: string;
                    id: number;
                };
                Insert: {
                    created_at?: string | null;
                    dict_string: Json;
                    hash_val: string;
                    id?: number;
                };
                Update: {
                    created_at?: string | null;
                    dict_string?: Json;
                    hash_val?: string;
                    id?: number;
                };
                Relationships: [];
            };
            user_compiled_codebase: {
                Row: {
                    code_js: string;
                    created_at: string;
                    enterprise_team_id: string;
                    group_name: string;
                    id: string;
                    style_css: string;
                };
                Insert: {
                    code_js: string;
                    created_at?: string;
                    enterprise_team_id: string;
                    group_name: string;
                    id?: string;
                    style_css: string;
                };
                Update: {
                    code_js?: string;
                    created_at?: string;
                    enterprise_team_id?: string;
                    group_name?: string;
                    id?: string;
                    style_css?: string;
                };
                Relationships: [];
            };
            user_components: {
                Row: {
                    code: string;
                    code_meta_tree: Json;
                    component_def: Json | null;
                    component_name: string;
                    conditionals: Json | null;
                    fixed_scene_node: Json;
                    group_id: string | null;
                    id: string;
                    img: string;
                    min_node: Json;
                    object_tree: Json;
                    original_scene_node: Json;
                    pro_email: string | null;
                };
                Insert: {
                    code: string;
                    code_meta_tree: Json;
                    component_def?: Json | null;
                    component_name: string;
                    conditionals?: Json | null;
                    fixed_scene_node: Json;
                    group_id?: string | null;
                    id?: string;
                    img: string;
                    min_node: Json;
                    object_tree: Json;
                    original_scene_node: Json;
                    pro_email?: string | null;
                };
                Update: {
                    code?: string;
                    code_meta_tree?: Json;
                    component_def?: Json | null;
                    component_name?: string;
                    conditionals?: Json | null;
                    fixed_scene_node?: Json;
                    group_id?: string | null;
                    id?: string;
                    img?: string;
                    min_node?: Json;
                    object_tree?: Json;
                    original_scene_node?: Json;
                    pro_email?: string | null;
                };
                Relationships: [
                    {
                        foreignKeyName: 'public_user_components_groupId_fkey';
                        columns: ['group_id'];
                        isOneToOne: false;
                        referencedRelation: 'user_compiled_codebase';
                        referencedColumns: ['id'];
                    }
                ];
            };
            website_components: {
                Row: {
                    component_name: string | null;
                    created_at: string;
                    created_by: string | null;
                    id: number;
                    img: string | null;
                    min_node_path: string;
                    screen_width: number | null;
                    theme: string | null;
                    website_url: string | null;
                };
                Insert: {
                    component_name?: string | null;
                    created_at?: string;
                    created_by?: string | null;
                    id?: number;
                    img?: string | null;
                    min_node_path: string;
                    screen_width?: number | null;
                    theme?: string | null;
                    website_url?: string | null;
                };
                Update: {
                    component_name?: string | null;
                    created_at?: string;
                    created_by?: string | null;
                    id?: number;
                    img?: string | null;
                    min_node_path?: string;
                    screen_width?: number | null;
                    theme?: string | null;
                    website_url?: string | null;
                };
                Relationships: [];
            };
        };
        Views: {
            signup_count: {
                Row: {
                    id: number | null;
                };
                Insert: {
                    id?: number | null;
                };
                Update: {
                    id?: number | null;
                };
                Relationships: [];
            };
            users_view: {
                Row: {
                    aud: string | null;
                    banned_until: string | null;
                    confirmation_sent_at: string | null;
                    confirmation_token: string | null;
                    confirmed_at: string | null;
                    created_at: string | null;
                    email: string | null;
                    email_change: string | null;
                    email_change_confirm_status: number | null;
                    email_change_sent_at: string | null;
                    email_change_token_current: string | null;
                    email_change_token_new: string | null;
                    email_confirmed_at: string | null;
                    encrypted_password: string | null;
                    id: string | null;
                    instance_id: string | null;
                    invited_at: string | null;
                    is_super_admin: boolean | null;
                    last_sign_in_at: string | null;
                    phone: string | null;
                    phone_change: string | null;
                    phone_change_sent_at: string | null;
                    phone_change_token: string | null;
                    phone_confirmed_at: string | null;
                    raw_app_meta_data: Json | null;
                    raw_user_meta_data: Json | null;
                    reauthentication_sent_at: string | null;
                    reauthentication_token: string | null;
                    recovery_sent_at: string | null;
                    recovery_token: string | null;
                    role: string | null;
                    updated_at: string | null;
                };
                Insert: {
                    aud?: string | null;
                    banned_until?: string | null;
                    confirmation_sent_at?: string | null;
                    confirmation_token?: string | null;
                    confirmed_at?: string | null;
                    created_at?: string | null;
                    email?: string | null;
                    email_change?: string | null;
                    email_change_confirm_status?: number | null;
                    email_change_sent_at?: string | null;
                    email_change_token_current?: string | null;
                    email_change_token_new?: string | null;
                    email_confirmed_at?: string | null;
                    encrypted_password?: string | null;
                    id?: string | null;
                    instance_id?: string | null;
                    invited_at?: string | null;
                    is_super_admin?: boolean | null;
                    last_sign_in_at?: string | null;
                    phone?: string | null;
                    phone_change?: string | null;
                    phone_change_sent_at?: string | null;
                    phone_change_token?: string | null;
                    phone_confirmed_at?: string | null;
                    raw_app_meta_data?: Json | null;
                    raw_user_meta_data?: Json | null;
                    reauthentication_sent_at?: string | null;
                    reauthentication_token?: string | null;
                    recovery_sent_at?: string | null;
                    recovery_token?: string | null;
                    role?: string | null;
                    updated_at?: string | null;
                };
                Update: {
                    aud?: string | null;
                    banned_until?: string | null;
                    confirmation_sent_at?: string | null;
                    confirmation_token?: string | null;
                    confirmed_at?: string | null;
                    created_at?: string | null;
                    email?: string | null;
                    email_change?: string | null;
                    email_change_confirm_status?: number | null;
                    email_change_sent_at?: string | null;
                    email_change_token_current?: string | null;
                    email_change_token_new?: string | null;
                    email_confirmed_at?: string | null;
                    encrypted_password?: string | null;
                    id?: string | null;
                    instance_id?: string | null;
                    invited_at?: string | null;
                    is_super_admin?: boolean | null;
                    last_sign_in_at?: string | null;
                    phone?: string | null;
                    phone_change?: string | null;
                    phone_change_sent_at?: string | null;
                    phone_change_token?: string | null;
                    phone_confirmed_at?: string | null;
                    raw_app_meta_data?: Json | null;
                    raw_user_meta_data?: Json | null;
                    reauthentication_sent_at?: string | null;
                    reauthentication_token?: string | null;
                    recovery_sent_at?: string | null;
                    recovery_token?: string | null;
                    role?: string | null;
                    updated_at?: string | null;
                };
                Relationships: [];
            };
        };
        Functions: {
            check_permission: {
                Args: {
                    projid: number;
                };
                Returns: string;
            };
            check_project_public: {
                Args: {
                    projid: number;
                };
                Returns: string;
            };
            check_role: {
                Args: {
                    projid: number;
                };
                Returns: string;
            };
            get_team_id: {
                Args: Record<PropertyKey, never>;
                Returns: string;
            };
            has_owner: {
                Args: {
                    projid: number;
                };
                Returns: boolean;
            };
            insert_project_permission: {
                Args: {
                    project_id: string;
                    user_id: string;
                };
                Returns: undefined;
            };
        };
        Enums: {
            changelog_type: 'BUG_FIX' | 'FEATURE' | 'INFO' | 'INTERNAL';
            conversion_status: 'SUCCESS' | 'FAIL' | 'PROCESSING';
            project_permissions: 'public' | 'private';
            user_permissions: 'admin' | 'owner' | 'editor' | 'viewer';
        };
        CompositeTypes: {
            [_ in never]: never;
        };
    };
    storage: {
        Tables: {
            buckets: {
                Row: {
                    allowed_mime_types: string[] | null;
                    avif_autodetection: boolean | null;
                    created_at: string | null;
                    file_size_limit: number | null;
                    id: string;
                    name: string;
                    owner: string | null;
                    owner_id: string | null;
                    public: boolean | null;
                    updated_at: string | null;
                };
                Insert: {
                    allowed_mime_types?: string[] | null;
                    avif_autodetection?: boolean | null;
                    created_at?: string | null;
                    file_size_limit?: number | null;
                    id: string;
                    name: string;
                    owner?: string | null;
                    owner_id?: string | null;
                    public?: boolean | null;
                    updated_at?: string | null;
                };
                Update: {
                    allowed_mime_types?: string[] | null;
                    avif_autodetection?: boolean | null;
                    created_at?: string | null;
                    file_size_limit?: number | null;
                    id?: string;
                    name?: string;
                    owner?: string | null;
                    owner_id?: string | null;
                    public?: boolean | null;
                    updated_at?: string | null;
                };
                Relationships: [];
            };
            migrations: {
                Row: {
                    executed_at: string | null;
                    hash: string;
                    id: number;
                    name: string;
                };
                Insert: {
                    executed_at?: string | null;
                    hash: string;
                    id: number;
                    name: string;
                };
                Update: {
                    executed_at?: string | null;
                    hash?: string;
                    id?: number;
                    name?: string;
                };
                Relationships: [];
            };
            objects: {
                Row: {
                    bucket_id: string | null;
                    created_at: string | null;
                    id: string;
                    last_accessed_at: string | null;
                    metadata: Json | null;
                    name: string | null;
                    owner: string | null;
                    owner_id: string | null;
                    path_tokens: string[] | null;
                    updated_at: string | null;
                    version: string | null;
                };
                Insert: {
                    bucket_id?: string | null;
                    created_at?: string | null;
                    id?: string;
                    last_accessed_at?: string | null;
                    metadata?: Json | null;
                    name?: string | null;
                    owner?: string | null;
                    owner_id?: string | null;
                    path_tokens?: string[] | null;
                    updated_at?: string | null;
                    version?: string | null;
                };
                Update: {
                    bucket_id?: string | null;
                    created_at?: string | null;
                    id?: string;
                    last_accessed_at?: string | null;
                    metadata?: Json | null;
                    name?: string | null;
                    owner?: string | null;
                    owner_id?: string | null;
                    path_tokens?: string[] | null;
                    updated_at?: string | null;
                    version?: string | null;
                };
                Relationships: [
                    {
                        foreignKeyName: 'objects_bucketId_fkey';
                        columns: ['bucket_id'];
                        isOneToOne: false;
                        referencedRelation: 'buckets';
                        referencedColumns: ['id'];
                    }
                ];
            };
            s3_multipart_uploads: {
                Row: {
                    bucket_id: string;
                    created_at: string;
                    id: string;
                    in_progress_size: number;
                    key: string;
                    owner_id: string | null;
                    upload_signature: string;
                    version: string;
                };
                Insert: {
                    bucket_id: string;
                    created_at?: string;
                    id: string;
                    in_progress_size?: number;
                    key: string;
                    owner_id?: string | null;
                    upload_signature: string;
                    version: string;
                };
                Update: {
                    bucket_id?: string;
                    created_at?: string;
                    id?: string;
                    in_progress_size?: number;
                    key?: string;
                    owner_id?: string | null;
                    upload_signature?: string;
                    version?: string;
                };
                Relationships: [
                    {
                        foreignKeyName: 's3_multipart_uploads_bucket_id_fkey';
                        columns: ['bucket_id'];
                        isOneToOne: false;
                        referencedRelation: 'buckets';
                        referencedColumns: ['id'];
                    }
                ];
            };
            s3_multipart_uploads_parts: {
                Row: {
                    bucket_id: string;
                    created_at: string;
                    etag: string;
                    id: string;
                    key: string;
                    owner_id: string | null;
                    part_number: number;
                    size: number;
                    upload_id: string;
                    version: string;
                };
                Insert: {
                    bucket_id: string;
                    created_at?: string;
                    etag: string;
                    id?: string;
                    key: string;
                    owner_id?: string | null;
                    part_number: number;
                    size?: number;
                    upload_id: string;
                    version: string;
                };
                Update: {
                    bucket_id?: string;
                    created_at?: string;
                    etag?: string;
                    id?: string;
                    key?: string;
                    owner_id?: string | null;
                    part_number?: number;
                    size?: number;
                    upload_id?: string;
                    version?: string;
                };
                Relationships: [
                    {
                        foreignKeyName: 's3_multipart_uploads_parts_bucket_id_fkey';
                        columns: ['bucket_id'];
                        isOneToOne: false;
                        referencedRelation: 'buckets';
                        referencedColumns: ['id'];
                    },
                    {
                        foreignKeyName: 's3_multipart_uploads_parts_upload_id_fkey';
                        columns: ['upload_id'];
                        isOneToOne: false;
                        referencedRelation: 's3_multipart_uploads';
                        referencedColumns: ['id'];
                    }
                ];
            };
        };
        Views: {
            [_ in never]: never;
        };
        Functions: {
            can_insert_object: {
                Args: {
                    bucketid: string;
                    name: string;
                    owner: string;
                    metadata: Json;
                };
                Returns: undefined;
            };
            extension: {
                Args: {
                    name: string;
                };
                Returns: string;
            };
            filename: {
                Args: {
                    name: string;
                };
                Returns: string;
            };
            foldername: {
                Args: {
                    name: string;
                };
                Returns: string[];
            };
            get_size_by_bucket: {
                Args: Record<PropertyKey, never>;
                Returns: {
                    size: number;
                    bucket_id: string;
                }[];
            };
            list_multipart_uploads_with_delimiter: {
                Args: {
                    bucket_id: string;
                    prefix_param: string;
                    delimiter_param: string;
                    max_keys?: number;
                    next_key_token?: string;
                    next_upload_token?: string;
                };
                Returns: {
                    key: string;
                    id: string;
                    created_at: string;
                }[];
            };
            list_objects_with_delimiter: {
                Args: {
                    bucket_id: string;
                    prefix_param: string;
                    delimiter_param: string;
                    max_keys?: number;
                    start_after?: string;
                    next_token?: string;
                };
                Returns: {
                    name: string;
                    id: string;
                    metadata: Json;
                    updated_at: string;
                }[];
            };
            search: {
                Args: {
                    prefix: string;
                    bucketname: string;
                    limits?: number;
                    levels?: number;
                    offsets?: number;
                    search?: string;
                    sortcolumn?: string;
                    sortorder?: string;
                };
                Returns: {
                    name: string;
                    id: string;
                    updated_at: string;
                    created_at: string;
                    last_accessed_at: string;
                    metadata: Json;
                }[];
            };
        };
        Enums: {
            [_ in never]: never;
        };
        CompositeTypes: {
            [_ in never]: never;
        };
    };
};
type PublicSchema = Database[Extract<keyof Database, 'public'>];
export type Tables<PublicTableNameOrOptions extends keyof (PublicSchema['Tables'] & PublicSchema['Views']) | {
    schema: keyof Database;
}, TableName extends PublicTableNameOrOptions extends {
    schema: keyof Database;
} ? keyof (Database[PublicTableNameOrOptions['schema']]['Tables'] & Database[PublicTableNameOrOptions['schema']]['Views']) : never = never> = PublicTableNameOrOptions extends {
    schema: keyof Database;
} ? (Database[PublicTableNameOrOptions['schema']]['Tables'] & Database[PublicTableNameOrOptions['schema']]['Views'])[TableName] extends {
    Row: infer R;
} ? R : never : PublicTableNameOrOptions extends keyof (PublicSchema['Tables'] & PublicSchema['Views']) ? (PublicSchema['Tables'] & PublicSchema['Views'])[PublicTableNameOrOptions] extends {
    Row: infer R;
} ? R : never : never;
export type TablesInsert<PublicTableNameOrOptions extends keyof PublicSchema['Tables'] | {
    schema: keyof Database;
}, TableName extends PublicTableNameOrOptions extends {
    schema: keyof Database;
} ? keyof Database[PublicTableNameOrOptions['schema']]['Tables'] : never = never> = PublicTableNameOrOptions extends {
    schema: keyof Database;
} ? Database[PublicTableNameOrOptions['schema']]['Tables'][TableName] extends {
    Insert: infer I;
} ? I : never : PublicTableNameOrOptions extends keyof PublicSchema['Tables'] ? PublicSchema['Tables'][PublicTableNameOrOptions] extends {
    Insert: infer I;
} ? I : never : never;
export type TablesUpdate<PublicTableNameOrOptions extends keyof PublicSchema['Tables'] | {
    schema: keyof Database;
}, TableName extends PublicTableNameOrOptions extends {
    schema: keyof Database;
} ? keyof Database[PublicTableNameOrOptions['schema']]['Tables'] : never = never> = PublicTableNameOrOptions extends {
    schema: keyof Database;
} ? Database[PublicTableNameOrOptions['schema']]['Tables'][TableName] extends {
    Update: infer U;
} ? U : never : PublicTableNameOrOptions extends keyof PublicSchema['Tables'] ? PublicSchema['Tables'][PublicTableNameOrOptions] extends {
    Update: infer U;
} ? U : never : never;
export type Enums<PublicEnumNameOrOptions extends keyof PublicSchema['Enums'] | {
    schema: keyof Database;
}, EnumName extends PublicEnumNameOrOptions extends {
    schema: keyof Database;
} ? keyof Database[PublicEnumNameOrOptions['schema']]['Enums'] : never = never> = PublicEnumNameOrOptions extends {
    schema: keyof Database;
} ? Database[PublicEnumNameOrOptions['schema']]['Enums'][EnumName] : PublicEnumNameOrOptions extends keyof PublicSchema['Enums'] ? PublicSchema['Enums'][PublicEnumNameOrOptions] : never;
export {};
