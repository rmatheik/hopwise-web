import { CodeExpression, LayoutMeta, LayoutStyles, MinLayout, MinLayoutElement, SerializedPropAttr } from '@firejet-sync/shared/types';
import { MatchContextPath, SerializedMatchContextPath } from './matchContextPath';
type MinLayoutId = string;
export type MatchIteration = {
    fixedLayouts: MinLayoutElement[];
    templateLayouts: MinLayout[];
    ctx: MatchContext;
    /**
     * All the matches can be identified uniquely by the propAttr, until it goes through a repeat match
     * When going through a repeat match, because it can be matched multiple times, we need to store which
     * repeat group we are matching to
     */
    matchContextPath: MatchContextPath;
};
export type MatchResultFailed = {
    type: 'failed';
};
export type MatchResultIncomplete = {
    type: 'incomplete';
};
export type MatchResultSuccess = {
    type: 'success';
    ctx: MatchContext;
};
/**When set to undefined, means hasnt matched yet */
export type MatchResult = MatchResultFailed | MatchResultIncomplete | MatchResultSuccess;
export type MatchScore = number;
export type MatchContext = {
    slotProps: Record<SerializedMatchContextPath, Record<SerializedPropAttr, SlotVal>>;
    mismatchData: Record<SerializedMatchContextPath, Record<MinLayoutId, SlotVal[]>>;
};
export type SlotVal = {
    type: 'style';
    val: LayoutStyles;
} | {
    type: 'text';
    val: CodeExpression | undefined;
} | {
    type: 'slot';
    val: LayoutMeta[];
} | {
    type: 'repeat';
    val: {
        numRepeats: number;
    };
};
export type NonNestedMatchData = MatchContext;
export {};
