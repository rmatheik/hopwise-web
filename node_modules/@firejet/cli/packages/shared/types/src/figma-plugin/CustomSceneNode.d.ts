import { MinSharedMeta, Rectangle } from '@firejet-sync/shared/types';
type AllKeys<T> = T extends any ? keyof T : never;
type ValueType<T, K extends keyof any> = T extends any ? K extends keyof T ? T[K] : never : never;
type CombinedType<N> = {
    [key in AllKeys<N>]: ValueType<N, key>;
};
export type CustomStyledTextSegment = Omit<StyledTextSegment, 'start' | 'end' | 'fills' | 'fontName'> & {
    fills: CustomPaint[];
    fontName: Mutable<FontName>;
};
export type CustomImagePaint = Omit<Mutable<ImagePaint>, 'imageHash'> & {
    imageHash: string;
    imageData?: {
        type: 'URL';
        url: string;
    } | {
        type: 'UNINT_8_ARRAY';
        data: number[];
    };
};
export type CustomPaint = CustomSolidPaint | CustomGradientPaint | CustomVideoPaint | CustomImagePaint;
export type CustomSolidPaint = Mutable<SolidPaint>;
export type CustomGradientPaint = Omit<Mutable<GradientPaint>, 'gradientStops'> & {
    gradientStops: CustomGradientStops[];
};
export type CustomVideoPaint = Mutable<VideoPaint>;
export type CustomGradientStops = Omit<Mutable<ColorStop>, 'boundVariables'>;
export type CustomSceneNodeWithParent = Omit<CustomSceneNode, 'children'> & {
    parent: CustomSceneNodeWithParent | undefined;
    children?: CustomSceneNodeWithParent[];
};
export type FullCustomSceneNode = Omit<Mutable<Partial<CombinedType<SceneNode>> & {
    styledTextSegments?: CustomStyledTextSegment[];
} & BaseNode>, 'children' | 'parent' | 'fills' | 'strokes' | FuncKeys<CombinedType<SceneNode>>> & {
    absoluteBoundingBox: Rectangle;
    absoluteRenderBounds: Rectangle | null | undefined;
    children?: CustomSceneNode[];
    /**Internal flag, because sometimes after a node is marked as vector you remove the style that makes it a vector */
    isVector?: boolean;
    exportAs?: ReplaceContentType;
    /**We use this to get the original object's figma Id,because sometimes we need 2 of the same object for declashing*/
    figmaId: string | null;
    fills: CustomPaint[];
    strokes: CustomPaint[];
    meta: Partial<{
        /**Internal flag, makes the node get considered as 'nodeHasEffectOnDesign' even if it does not actually so that it can be used as slots for component detection */
        nodeHasEffectOnDesign?: boolean;
        /**If we are importing a custom scene node, this svg path is required */
        svgPath: string;
        /**Internal flag to see whether the children have to be merged as part of a component set */
        isComponentSet: boolean;
        componentSetId: string;
        instanceSwaps: Record<string, CustomSceneNode>;
        /**Internal flag to check which of the fills in the node are opaque */
        fillsOpaque: boolean[];
        zIndex: {
            required: boolean;
            value: number;
        };
        minSharedMeta: MinSharedMeta;
        sizingMeta: {
            horizontal: {
                willCollapseOnHug: boolean;
                willExpandOnHug: boolean;
            };
            vertical: {
                willCollapseOnHug: boolean;
                willExpandOnHug: boolean;
            };
        };
    }>;
};
export type ReplaceContentType = 'IMG' | 'SVG' | 'IMG_BY_ID' | 'SVG_INLINE';
export interface ReplaceContent {
    type: ReplaceContentType;
    id: string;
}
export declare const LEGAL_FIGMA_KEYS: ("meta" | "type" | "x" | "y" | "width" | "height" | "description" | "children" | "id" | "minHeight" | "maxHeight" | "minWidth" | "maxWidth" | "opacity" | "name" | "removed" | "visible" | "componentPropertyReferences" | "absoluteRenderBounds" | "layoutSizingHorizontal" | "layoutSizingVertical" | "relativeTransform" | "absoluteBoundingBox" | "layoutPositioning" | "layoutGrids" | "clipsContent" | "strokeCap" | "strokeMiterLimit" | "strokes" | "strokeJoin" | "strokeAlign" | "dashPattern" | "fills" | "cornerSmoothing" | "topLeftRadius" | "topRightRadius" | "bottomLeftRadius" | "bottomRightRadius" | "isMask" | "maskType" | "effects" | "blendMode" | "constraints" | "strokeTopWeight" | "strokeBottomWeight" | "strokeLeftWeight" | "strokeRightWeight" | "layoutMode" | "layoutWrap" | "paddingLeft" | "paddingRight" | "paddingTop" | "paddingBottom" | "primaryAxisAlignItems" | "counterAxisAlignItems" | "counterAxisAlignContent" | "itemSpacing" | "counterAxisSpacing" | "itemReverseZIndex" | "strokesIncludedInLayout" | "reactions" | "documentationLinks" | "key" | "componentPropertyDefinitions" | "componentProperties" | "textAlignHorizontal" | "textAlignVertical" | "textTruncation" | "maxLines" | "paragraphIndent" | "paragraphSpacing" | "listSpacing" | "hangingPunctuation" | "hangingList" | "leadingTrim" | "styledTextSegments" | "isVector" | "exportAs" | "figmaId")[];
export declare const LEGAL_FIGMA_KEYS_SET: Set<string>;
export declare const ILLEGAL_FIGMA_KEYS: ("code" | "fontSize" | "fontWeight" | "letterSpacing" | "lineHeight" | "text" | "isAsset" | "locked" | "stuckNodes" | "attachedConnectors" | "boundVariables" | "inferredVariables" | "resolvedVariableModes" | "explicitVariableModes" | "constrainProportions" | "rotation" | "absoluteTransform" | "layoutAlign" | "layoutGrow" | "exportSettings" | "detachedInfo" | "gridStyleId" | "guides" | "inferredAutoLayout" | "expanded" | "backgrounds" | "backgroundStyleId" | "fillGeometry" | "strokeStyleId" | "strokeWeight" | "strokeGeometry" | "fillStyleId" | "cornerRadius" | "effectStyleId" | "horizontalPadding" | "verticalPadding" | "primaryAxisSizingMode" | "counterAxisSizingMode" | "annotations" | "devStatus" | "overflowDirection" | "numberOfFixedChildren" | "overlayPositionType" | "overlayBackground" | "overlayBackgroundInteraction" | "defaultVariant" | "variantGroupProperties" | "remote" | "instances" | "variantProperties" | "mainComponent" | "scaleFactor" | "exposedInstances" | "isExposedInstance" | "overrides" | "booleanOperation" | "vectorNetwork" | "vectorPaths" | "handleMirroring" | "pointCount" | "innerRadius" | "arcData" | "textAutoResize" | "autoRename" | "textStyleId" | "hasMissingFont" | "fontName" | "textCase" | "openTypeFeatures" | "textDecoration" | "hyperlink" | "characters" | "authorVisible" | "authorName" | "isWideWidth" | "textBackground" | "connectorLineType" | "connectorStart" | "connectorEnd" | "connectorStartStrokeCap" | "connectorEndStrokeCap" | "shapeType" | "codeLanguage" | "stuckTo" | "widgetId" | "widgetSyncedState" | "embedData" | "linkUnfurlData" | "mediaData" | "sectionContentsHidden" | "numRows" | "numColumns")[];
export type CustomSceneNode = Pick<FullCustomSceneNode, (typeof LEGAL_FIGMA_KEYS)[number]>;
type Mutable<T> = {
    -readonly [P in keyof T]: T[P];
};
type FuncKeys<T> = {
    [K in keyof T]: T[K] extends (...args: any[]) => any ? K : never;
}[keyof T];
export {};
