import type { DataType, Property } from 'csstype';
export declare const GLOBALS: readonly ["inherit", "initial", "revert", "revert-layer", "unset"];
export type Globals = (typeof GLOBALS)[number];
export type StyleKey = keyof BaseSupportedStyles;
export type CompoundStyleKey = keyof CompoundStyles;
export type AllStyleKeys = keyof ALLSupportedStyles;
export type Color = `rgba(${number},${number},${number},${number})`;
export type SizeVal = number | `${number}%` | `calc(${string})`;
export type FlexPositionBase = 'flex-start' | 'flex-end' | 'center' | 'stretch';
export type Position = 'bottom' | 'center' | 'left' | 'right' | 'top';
export type BackgroundPosition = `${number}% ${number}%` | `${number}px ${number}px` | `${Position} ${Position}`;
export interface BaseSupportedStyles {
    display: Globals | DataType.DisplayOutside | DataType.DisplayInside | DataType.DisplayInternal | DataType.DisplayLegacy | 'contents' | 'list-item' | 'none';
    position: Property.Position;
    overflow: Globals | '-moz-hidden-unscrollable' | 'auto' | 'clip' | 'hidden' | 'scroll' | 'visible';
    zIndex: number | 'auto';
    order: number | 'auto';
    opacity: number;
    top: SizeVal | 'auto';
    bottom: SizeVal | 'auto';
    left: SizeVal | 'auto';
    right: SizeVal | 'auto';
    width: SizeVal | 'auto';
    height: SizeVal | 'auto';
    maxHeight: SizeVal | 'none';
    maxWidth: SizeVal | 'none';
    minHeight: SizeVal | 'none';
    minWidth: SizeVal | 'none';
    paddingBottom: SizeVal;
    paddingTop: SizeVal;
    paddingLeft: SizeVal;
    paddingRight: SizeVal;
    marginLeft: SizeVal;
    marginRight: SizeVal;
    marginTop: SizeVal;
    marginBottom: SizeVal;
    borderBottomLeftRadius: SizeVal;
    borderBottomRightRadius: SizeVal;
    borderTopLeftRadius: SizeVal;
    borderTopRightRadius: SizeVal;
    borderStyle: 'dotted' | 'dashed' | 'solid' | 'double' | 'groove' | 'ridge' | 'inset' | 'outset' | 'none';
    borderColor: Color | 'currentColor';
    borderTopWidth: Globals | DataType.LineWidth<SizeVal>;
    borderBottomWidth: Globals | DataType.LineWidth<SizeVal>;
    borderLeftWidth: Globals | DataType.LineWidth<SizeVal>;
    borderRightWidth: Globals | DataType.LineWidth<SizeVal>;
    outline: 'none';
    flexDirection: Property.FlexDirection;
    justifyContent: FlexPositionBase | 'space-between' | 'space-around' | 'space-evenly';
    alignItems: FlexPositionBase | 'baseline';
    columnGap: SizeVal;
    rowGap: SizeVal;
    flexWrap: Property.FlexWrap;
    alignSelf: FlexPositionBase | 'auto';
    flexGrow: Globals | number;
    flexShrink: Globals | number;
    backgroundColor: Color;
    backgroundImage: NonNullable<string>;
    backgroundRepeat: Globals | 'no-repeat' | 'repeat' | 'repeat-x' | 'repeat-y' | 'round' | 'space';
    backgroundPosition: BackgroundPosition | Position;
    backgroundSize: Globals | BackgroundPosition | 'auto' | 'contain' | 'cover';
    backgroundClip: 'text' | 'none';
    transform: NonNullable<string>;
    transformOrigin: BackgroundPosition | Position;
    boxShadow: Property.BoxShadow;
    filter: Property.Filter;
    backdropFilter: Property.BackdropFilter;
    mixBlendMode: Property.MixBlendMode;
    maskType: string;
    content: Property.Content;
    objectFit: 'contain' | 'cover' | 'fill';
    objectPosition: BackgroundPosition | Position;
    cursor: 'alias' | 'all-scroll' | 'auto' | 'cell' | 'col-resize' | 'context-menu' | 'copy' | 'crosshair' | 'default' | 'e-resize' | 'ew-resize' | 'grab' | 'grabbing' | 'help' | 'move' | 'n-resize' | 'ne-resize' | 'nesw-resize' | 'no-drop' | 'none' | 'not-allowed' | 'ns-resize' | 'nw-resize' | 'nwse-resize' | 'pointer' | 'progress' | 'row-resize' | 's-resize' | 'se-resize' | 'sw-resize' | 'text' | 'vertical-text' | 'w-resize' | 'wait' | 'zoom-in' | 'zoom-out';
    color: Color | 'inherit' | 'currentColor';
    fontFamily: NonNullable<string>;
    fontSize: Globals | number;
    fontStyle: Globals | 'italic' | 'normal' | 'oblique';
    fontWeight: Globals | number;
    letterSpacing: Globals | number | `${number}em` | 'normal';
    lineClamp: number | 'none';
    lineHeight: Globals | SizeVal | 'normal';
    textAlign: Property.TextAlign;
    textDecoration: 'auto' | 'blink' | 'dashed' | 'dotted' | 'double' | 'from-font' | 'grammar-error' | 'line-through' | 'none' | 'overline' | 'solid' | 'spelling-error' | 'underline' | 'wavy';
    textOverflow: Globals | 'clip' | 'ellipsis';
    textTransform: Property.TextTransform;
    listStyleType: Property.ListStyleType;
    whiteSpace: 'normal' | 'nowrap' | 'pre' | 'pre-wrap' | 'pre-line' | 'break-spaces';
}
export interface CompoundStyles {
    inset: BaseSupportedStyles['top'];
    padding: BaseSupportedStyles['paddingTop'];
    paddingX: BaseSupportedStyles['paddingTop'];
    paddingY: BaseSupportedStyles['paddingTop'];
    margin: BaseSupportedStyles['marginTop'];
    marginX: BaseSupportedStyles['marginTop'];
    marginY: BaseSupportedStyles['marginTop'];
    borderWidth: BaseSupportedStyles['borderTopWidth'];
    borderRadius: BaseSupportedStyles['borderTopLeftRadius'];
}
export interface ALLSupportedStyles extends BaseSupportedStyles, CompoundStyles {
}
export type LayoutStyles = Partial<BaseSupportedStyles>;
export type PseudoClass = ':active' | ':checked' | ':disabled' | ':empty' | ':enabled' | ':first-child' | ':first-of-type' | ':focus' | ':focus-within' | ':hover' | ':in-range' | ':invalid' | `:lang(${string})` | ':last-child' | ':last-of-type' | ':link' | `:has(${string})` | `:not(${string})` | `:nth-child(${string})` | `:nth-last-child(${string})` | `:nth-last-of-type(${string})` | `:nth-of-type(${string})` | ':only-of-type' | ':only-child' | ':optional' | ':out-of-range' | ':read-only' | ':read-write' | ':required' | ':root' | ':target' | ':valid' | ':visited';
export type PseudoElement = '::after' | '::before' | '::first-letter' | '::first-line' | '::marker' | '::placeholder' | '::selection';
export type PseudoSelector = PseudoClass | PseudoElement;
