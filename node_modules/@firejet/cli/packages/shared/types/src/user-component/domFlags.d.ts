import { SlotStruct, TextStruct } from '../cli/expectedStructure';
/**Note that values have to be lower case, otherwise in the DOM, attrs get converted to lowercase anyway */
export declare const FIREJET_COMPONENT_ID_FLAG = "firejet_component_id";
export declare const FIREJET_RENDER_WRAPPER_FLAG = "firejet_render_wrapper";
export declare const FIREJET_PROP_ATTR_NAME = "firejet_prop_attr";
export type SerializedPropPath = string;
export interface PropPath {
    structId: number;
    path: string[];
}
export interface PropAttrBase {
    type: string;
    propPath: PropPath;
}
export interface PropAttrCSSClass extends PropAttrBase {
    type: 'css-class';
}
export interface PropAttrText extends PropAttrBase {
    type: 'text';
    renderValue: TextStruct['renderValue'];
}
export interface PropAttrImageSrc extends PropAttrBase {
    type: 'image-src';
}
export interface PropAttrSlot extends PropAttrBase {
    type: 'slot';
    structMeta: SlotStruct['structMeta'];
}
export interface PropAttrSlotText extends PropAttrBase {
    type: 'slot-text';
    renderValue: TextStruct['renderValue'];
}
export interface PropAttrRepeat extends PropAttrBase {
    type: 'repeat';
    repeatIdx: number;
}
export interface PropAttrEither extends PropAttrBase {
    type: 'either';
}
export interface PropAttrEitherOption extends PropAttrBase {
    type: 'either-option';
}
export interface PropAttrOptional extends PropAttrBase {
    type: 'optional';
}
export type PropAttr = PropAttrCSSClass | PropAttrText | PropAttrImageSrc | PropAttrSlot | PropAttrSlotText | PropAttrRepeat | PropAttrOptional | PropAttrEither | PropAttrEitherOption;
export type SerializedPropAttr = string;
export type RecordPropAttr = Record<string, PropAttr>;
