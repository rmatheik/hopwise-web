import { CodeExpression, ComponentMeta, LayoutElementMeta, LayoutStyles, MinSharedMeta, Rectangle } from '..';
import { SlotStruct } from '../cli/expectedStructure';
interface MixinId {
    id: string;
}
interface MixinAbsBox {
    absBox: Rectangle;
}
interface MixinCommon extends MixinId, MixinAbsBox {
}
interface MixinMeta {
    meta: {
        minSharedMeta?: MinSharedMeta;
        pointer?: {
            /**A pointer to parent element where you can find the layout to replace
             * To replace the top level component we keep a component pointer as well
             */
            parent?: LayoutElementMeta | ComponentMeta;
            /**A pointer to the actual layout to replace*/
            layout: LayoutElementMeta;
        };
    };
}
export type MinLayout = MinLayoutElement | MinLayoutSlot | MinLayoutEither | MinLayoutRepeat | MinLayoutOptional | MinLayoutEitherOption;
/**
 * The idea here is given a layout meta, break it down to a simple format where it can be checked with
 *  another layout meta
 *
 * Only consider elements
 */
export interface MinLayoutElement extends MixinMeta, MixinCommon {
    id: string;
    type: 'literal';
    tag: MinLiteral<string>;
    text: MinLiteral<CodeExpression> | undefined;
    styles: MinLiteral<MinStyle>;
    direction: MinLiteral<'row' | 'column' | 'any'>;
    children: MinLayout[];
}
export interface MinLayoutSlot extends MixinCommon {
    type: 'slot';
    slotName: string;
    structMeta?: SlotStruct['structMeta'];
}
export type MinStyle = LayoutStyles;
export type MinLiteral<T> = {
    type: 'literal';
    /**Specifically expected val */
    val: T;
    slotName: string | undefined;
};
export interface MinLayoutRepeat extends MixinCommon {
    type: 'repeat';
    children: MinLayout[];
}
export interface MinLayoutEither extends MixinCommon {
    type: 'either';
    children: MinLayoutEitherOption[];
}
export interface MinLayoutEitherOption extends MixinCommon {
    type: 'either-option';
    children: MinLayout[];
}
export interface MinLayoutOptional extends MixinCommon {
    type: 'optional';
    children: MinLayout[];
}
export {};
