type MappableObj = {
    [key: string]: any;
};
type MapFunc1<T, O> = (val: T[StringKeys<T>]) => O | undefined;
type MapFunc2<T, O> = (val: T[StringKeys<T>], key: StringKeys<T>) => [O, StringKeys<T>] | undefined;
/**If your map function returns undefined it is not included in the new object */
export declare function mapObj<T extends MappableObj, O>(obj: T, mapFunc: MapFunc2<T, O>): Record<StringKeys<T>, O>;
export declare function mapObj<T extends MappableObj, O>(obj: T, mapFunc: MapFunc1<T, O>): Record<StringKeys<T>, O>;
export {};
