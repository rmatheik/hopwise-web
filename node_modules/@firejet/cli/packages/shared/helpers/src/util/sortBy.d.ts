import { Side as _Side } from '@firejet-sync/shared/types';
type Side = Exclude<_Side, 'CENTER'>;
type Position = {
    pos: Record<Side, number>;
};
/**WARNING: THIS FUNCTION SORTS BY THE VALUE OF THE SIDE SPECIFIED
 * If you want to sort such that they are in order when aligned on the side, use sortByAlignedOn
 */
export declare function sortBySide(side: Side): <T extends Position>(nodeA: T, nodeB: T) => number;
export declare function sortByAlignedOn<NodeType extends Position>(side: Side): (nodeA: NodeType, nodeB: NodeType) => number;
export declare function sortByAlignedOn<NodeType>(side: Side, resolvePos: (node: NodeType) => Position): (nodeA: NodeType, nodeB: NodeType) => number;
export declare const B_FIRST = 1;
export declare const A_FIRST = -1;
export declare function getPrimarySortAxis(strategy: Side): 'x' | 'y';
/**
 * Creates a sorting function based on the specified direction and resolver.
 * @param dir Sorting direction, either 'LOW_TO_HIGH' or 'HIGH_TO_LOW'.
 * @param resolver Function to resolve the value to sort by from an item.
 * @returns A comparator function suitable for use in Array.prototype.sort.
 */
export declare function sortBy<T>(dir: 'LOW_TO_HIGH' | 'HIGH_TO_LOW', resolver: (item: T) => number): (a: T, b: T) => number;
export {};
