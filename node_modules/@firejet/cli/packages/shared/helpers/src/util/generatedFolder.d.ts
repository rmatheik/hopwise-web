import { GeneratedFile, GeneratedFolder } from '@firejet-sync/shared/types';
import type { SandpackBundlerFiles } from '@codesandbox/sandpack-client';
import type { FilesMap } from '@codesandbox/nodebox';
type SandboxFiles = {
    [fileName: string]: string;
};
export interface TraverseFolderMeta {
    fullPath: string;
}
export declare function traverseFolder(folder: GeneratedFolder, handler: (file: GeneratedFile, meta: TraverseFolderMeta) => void, parentMeta?: TraverseFolderMeta): void;
export declare function folderToPathMap(folder: GeneratedFolder, basePath?: string): Record<string, GeneratedFile | GeneratedFolder>;
export declare function filterRelevantFiles(folder: GeneratedFolder, ignoreFilesByName?: string[], ignoreFoldersByName?: string[]): GeneratedFolder;
export type DetectedFramework = ReturnType<typeof filesObjToFramework>;
export declare function filesObjToFramework(files: Record<string, any>): "html" | "react" | "svelte" | "vue-ts";
export declare function generatedFolderToSandpackBundlerFiles(folder: GeneratedFolder): SandpackBundlerFiles;
/**
 * @param folder The folder to convert to a file map
 * @param filter A function that returns whether the file or folder should be mapped. File will be mapped if the filter returns true
 * @param files Existing filemap. All modifications happen in place
 * @param path the path of folder
 * @returns The files for convenience
 */
export declare function generatedFolderToFileMap(folder: GeneratedFolder, filter?: (item: GeneratedFile | GeneratedFolder, path: string) => boolean, files?: FilesMap, path?: string): FilesMap;
export declare function sandboxFilesToSandpackBundlerFiles(sandpackFiles: SandboxFiles): SandpackBundlerFiles;
export declare function generatedFolderToCodeSandboxHostedFiles(folder: GeneratedFolder): Record<string, {
    content: string;
}>;
export declare function generatedFolderToSandboxFiles(folder: GeneratedFolder): SandboxFiles;
/**
 * Find a file within the folder structure by a specified key.
 * The fileKey should be a concatenation of folder and file names joined by a separator.
 * @param folder - The root folder to start the search from
 * @param fileKey - The concatenated key of folder and file names
 * @param separator - The separator used in fileKey
 * @returns The file object if found, or undefined if not found
 */
export declare function findFileByKey(folder: GeneratedFolder, fileKey: string, separator?: string): GeneratedFile | undefined;
/**
 * Find a file within the folder structure by a specified key.
 * The fileKey should be a concatenation of folder and file names joined by a separator.
 * @param folder - The root folder to start the search from
 * @param fileKey - The concatenated key of folder and file names
 * @param editFile - Function to edit the file
 * @param editFolder - Function to edit all the parent folders
 * @param separator - The separator used in fileKey
 * @returns Whether the file was found
 */
export declare function editFileByKey(folder: GeneratedFolder, fileKey: string, editFile: (file: GeneratedFile) => void, editFolder: (file: GeneratedFolder) => void, separator?: string): boolean;
/**
 * No leading slashes allowed!
 */
export declare function deleteFileByKey(folder: GeneratedFolder, fileKey: string, separator?: string): void;
export {};
