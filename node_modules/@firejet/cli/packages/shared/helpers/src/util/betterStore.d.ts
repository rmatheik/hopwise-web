export declare function createBetterStore<T extends Record<string, any>>(storeDefaults: T): {
    use: <K extends keyof T, V extends T[K]>(key: K) => V;
    set: <K extends keyof T, V extends T[K]>(key: K, val: V) => void;
    get: <K extends keyof T, V extends T[K]>(key: K) => V;
    subscribe: <K extends keyof T, V extends T[K]>(key: K, listener: (newVal: V, oldVal: V) => void) => () => void;
    useStore: import("zustand").UseBoundStore<Omit<import("zustand").StoreApi<T>, "subscribe"> & {
        subscribe: {
            (listener: (selectedState: T, previousSelectedState: T) => void): () => void;
            <U>(selector: (state: T) => U, listener: (selectedState: U, previousSelectedState: U) => void, options?: {
                equalityFn?: ((a: U, b: U) => boolean) | undefined;
                fireImmediately?: boolean;
            } | undefined): () => void;
        };
    }>;
};
