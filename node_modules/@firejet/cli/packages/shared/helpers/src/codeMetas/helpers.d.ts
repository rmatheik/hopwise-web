import { ALLSupportedStyles, AllStyleKeys, BaseSupportedStyles, CodeExpression, CodeMeta, ComponentDependency, ComponentMeta, CompoundStyles, DependencyMeta, ExternalDependency, KeysWithVal, LayoutElementMeta, LayoutMeta, LayoutStaticMeta, LayoutStyles, MinLayoutElement, MinNode, RawTSCode, StyleKey, TSSourceCode } from '@firejet-sync/shared/types';
export declare function isDesignMinNode(node: MinNode): boolean;
export declare function isDesignMinLayoutElement(minLayout: MinLayoutElement): boolean;
export declare function isDesignNode(layout: LayoutMeta): boolean;
export declare function visitSourceCode(expression: CodeExpression, visitor: (code: TSSourceCode, expressionNode: RawTSCode) => void): void;
/**
 * Throws when expression contains set-state and framework is not set
 */
export declare function exprToTsCode(expression: CodeExpression, framework?: 'REACT' | 'VUE' | 'SVELTE'): TSSourceCode;
export declare function setStyle<K extends AllStyleKeys>(styles: LayoutElementMeta['styles'], styleName: K, styleVal: ALLSupportedStyles[K] | undefined): void;
export declare function setEleStyle<K extends AllStyleKeys>(ele: LayoutElementMeta, styleName: K, styleVal: ALLSupportedStyles[K] | undefined): void;
export declare function setNestedStyle<K extends AllStyleKeys>(ele: LayoutElementMeta, mediaQuery: keyof LayoutElementMeta['nestedStyles'], styleName: K, styleVal: ALLSupportedStyles[K] | undefined): void;
export declare function setConditionalStyle<K extends AllStyleKeys>(ele: LayoutElementMeta, conditonal: keyof LayoutElementMeta['conditionalStyles'], styleName: K, styleVal: ALLSupportedStyles[K] | undefined): void;
export declare function setPseudoStyle<K extends AllStyleKeys>(ele: LayoutElementMeta, selector: keyof LayoutElementMeta['pseudoElementStyles'], styleName: K, styleVal: ALLSupportedStyles[K] | undefined): void;
type Mapper = {
    [K in StyleKey]: (val: BaseSupportedStyles[K], key: K) => BaseSupportedStyles[K] | undefined;
}[StyleKey];
export declare function mapStyles(styles: LayoutStyles, mapper: Mapper): void;
export declare function hasEleStyles(ele: LayoutElementMeta, styles: LayoutStyles): boolean;
export declare function mergeStyles(ele: LayoutStyles, styles: LayoutStyles, filter?: <K extends StyleKey>(val: BaseSupportedStyles[K], key: K) => boolean): void;
export declare function mergeEleStyles(ele: LayoutElementMeta, styles: LayoutStyles, replace?: boolean): void;
export declare function createEleAttrs(rawAttrs: Record<string, CodeExpression>): LayoutElementMeta['attrs'];
export declare function setEleAttrs(ele: LayoutElementMeta, attrs: Record<string, CodeExpression>, replace?: boolean): void;
export declare function createLayoutElementMeta(name: string, tag?: string): LayoutElementMeta;
export declare function replaceVariablesInAttrs(layout: LayoutElementMeta, renameMap: Record<string, string>): void;
export declare function replaceVariablesInClasses(layout: LayoutElementMeta, renameMap: Record<string, string>): void;
export declare function getCompDependencyForComponent(component: ComponentMeta): ComponentDependency;
/**
 * @param val Constant string to use as the value for the LayoutStaticMeta
 */
export declare function createLayoutStaticMeta(val: string): LayoutStaticMeta;
/**
 * @param val Value to use for the LayoutStaticMeta
 */
export declare function createLayoutStaticMeta(val: CodeExpression): LayoutStaticMeta;
export declare function createComponent(name: string, layout: LayoutMeta): ComponentMeta;
export type UpdatePropNameDict = {
    [componentName: string]: {
        [oldPropName: string]: string;
    };
};
export declare function updateProps(codeMeta: CodeMeta, updatePropNameDict: UpdatePropNameDict): void;
/**get the metadata to replace a layout in a with an instance, as well as the new component to make*/
export declare function getReplaceWithComponentMeta(newComponentName: string, layout: LayoutMeta, mainComponent: ComponentMeta): {
    newLayout: LayoutMeta;
    newComponent: ComponentMeta;
};
export declare function renameComponent(component: ComponentMeta, newName: string): void;
export declare function componentToDependencyMeta(component: ComponentMeta): ComponentDependency;
export declare function getStyle<const K extends AllStyleKeys>(styles: LayoutElementMeta['styles'], styleName: K): ALLSupportedStyles[K] | undefined;
/**Tries to obtain a number from a style. Returns 0 if undefined or inapplicable */
export declare function getStyleNum(styles: LayoutElementMeta['styles'], styleKey: KeysWithVal<BaseSupportedStyles, number>): number;
export declare function getStyleNum(styles: LayoutElementMeta['styles'], styleKey: KeysWithVal<CompoundStyles, number>): number | undefined;
/**This function quietly drops non static attrs! */
export declare function getAttrObjStaticsOnly(layout: LayoutElementMeta): Record<string, CodeExpression>;
export declare function addDependency(layout: LayoutMeta, dep: DependencyMeta, codeMeta?: CodeMeta): void;
export declare function addDependency(dependencies: DependencyMeta[], dep: DependencyMeta, codeMeta?: CodeMeta): void;
export declare function addComponentDependency(dependencies: DependencyMeta[], dep: ComponentDependency): void;
export declare function addExternalDependency(dependencies: DependencyMeta[], dep: ExternalDependency, codeMeta?: CodeMeta): void;
export {};
