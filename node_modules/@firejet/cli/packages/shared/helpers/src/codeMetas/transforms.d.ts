import { BaseSupportedStyles, CodeExpression, ConditionalClassFull, ConditionalStyleFull, LayoutAttrBinding, LayoutAttrBindingFull, LayoutAttrNormalFull, LayoutAttrStyleFull, LayoutElementMeta, LayoutNestedFull, LayoutPseudoElementFull, LayoutStyleFull, LayoutStyles, StyleKey } from '@firejet-sync/shared/types';
export declare function getAttrsArr(layout: LayoutElementMeta): LayoutAttrNormalFull[];
export declare function getBindingAttrsArr(layout: LayoutElementMeta): LayoutAttrBindingFull[];
export declare function getStyleAttrsArr(layout: LayoutElementMeta): LayoutAttrStyleFull[];
export declare function setAttr(layout: LayoutElementMeta, attrKey: string, attrVal: CodeExpression): void;
export declare function setBindingAttr(layout: LayoutElementMeta, attrKey: string, value: CodeExpression): void;
export declare function setBindingAttr(layout: LayoutElementMeta, attrKey: string, value: Omit<LayoutAttrBinding, 'type'>): void;
export declare function getConstAttr<T extends {
    attrs: LayoutElementMeta['attrs'];
} = LayoutElementMeta>(obj: T, attrKey: string): string | number | boolean | undefined;
export declare function setConstAttr<T extends {
    attrs: LayoutElementMeta['attrs'];
} = LayoutElementMeta>(obj: T, attrKey: string, attrVal: string | number | boolean): void;
export declare function setMultipleAttrs(layout: LayoutElementMeta, attrs: Record<string, CodeExpression>): void;
export declare function attrArrToObj(attrs: LayoutAttrNormalFull[]): LayoutElementMeta['attrs'];
export declare function getFullStyle<K extends StyleKey = StyleKey>(styleName: K, style: BaseSupportedStyles[K]): LayoutStyleFull;
export declare const EXTRA_TRANFORMS: Partial<Record<StyleKey, (val: string) => string>>;
export declare function styleToCssVal(nameCml: StyleKey, style: BaseSupportedStyles[StyleKey]): string;
export declare function styleToJsVal(style: BaseSupportedStyles[StyleKey]): CodeExpression;
export declare function getStylesArrFromObj(styleObj: LayoutStyles): LayoutStyleFull[];
export declare function getAttrArrFromObj(attrObj: LayoutElementMeta['attrs']): LayoutAttrNormalFull[];
export declare function stylesArrToStylesObj(styles: LayoutStyleFull[]): LayoutElementMeta['styles'];
export declare function getStylesArr(layout: LayoutElementMeta): LayoutStyleFull[];
export declare function getNestedStylesArr(layout: LayoutElementMeta): {
    styles: LayoutStyles;
    atRuleName: string;
}[];
export declare function getPseudoElementStylesArr(layout: LayoutElementMeta): {
    styles: LayoutStyles;
    pseudoElement: import("@firejet-sync/shared/types").PseudoSelector;
}[];
export declare function nestedStylesArrToObj(nestedStyles: LayoutNestedFull[]): LayoutElementMeta['nestedStyles'];
export declare function pseudoElementArrToObj(nestedStyles: LayoutPseudoElementFull[]): LayoutElementMeta['pseudoElementStyles'];
export declare function getConditionalStylesArr(layout: LayoutElementMeta): ConditionalStyleFull[];
export declare function conditionalStylesArrToObj(conditionalStylesFull: ConditionalStyleFull[]): LayoutElementMeta['conditionalStyles'];
export declare function getConditionalAttrsArr(layout: LayoutElementMeta): {
    attrs?: {
        [nameCml: string]: import("@firejet-sync/shared/types").LayoutAttr;
    } | undefined;
    condition: string;
}[];
export declare function getConditionalClassesArr(layout: LayoutElementMeta): {
    classes: string[];
    condition: string;
}[];
export declare function conditionalClassesArrToObj(conditionalClassesFull: ConditionalClassFull[]): LayoutElementMeta['conditionalClasses'];
