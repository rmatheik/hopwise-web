import { FJElement, Rectangle } from '@firejet-sync/shared/types';
export declare const getOverlappingElements: (largeContainer: FJElement, elements: FJElement[]) => FJElement[];
export declare const getAbsoluteChildPosition: (parent: FJElement, child: FJElement) => Coord;
export declare const distanceToBox: (point: Coord, box: Rectangle) => number;
export declare const getCenter: (box: Rectangle) => Coord;
export declare const distance: (p1: Coord, p2: Coord) => number;
export declare const add: (p1: Coord, p2: Coord) => {
    x: number;
    y: number;
};
/**p1 - p2 */
export declare const subtract: (p1: Coord, p2: Coord) => {
    x: number;
    y: number;
};
export declare const lerp2D: (start: Coord, end: Coord, amount?: number) => Coord;
export type Coord = {
    x: number;
    y: number;
};
export interface Box {
    x: number;
    y: number;
    farX: number;
    farY: number;
    width: number;
    height: number;
}
export declare function getBox(target: FJElement): Box;
export declare function domRectToBox(domRect: DOMRect): Box;
export declare function flattenBox(originalBox: Box): Box;
export declare function pushXOutOfY(boxX: Box, boxY: Box): Box;
export declare function checkAlignment(rect1: Box, rect2: Box): 'HORIZONTAL' | 'VERTICAL' | undefined;
export declare function getClosestElement(cursorPos: Coord, nodes: Element[]): FJElement | undefined;
/**Returns NaN if undefined is passed to it */
export declare function parseCssValue(val: string | undefined, key?: string): [number, string];
export declare function parseUnit(str: string | undefined, out?: [number, string]): [number, string];
