import { ComponentData, FJElement } from '@firejet-sync/shared/types';
export declare function isDocumentElement(element: FJElement | EventTarget): boolean;
export declare function isCanvasWrapper(element: FJElement | EventTarget): boolean;
export declare function setFireJetId(element: FJElement, id: string): void;
export declare function getAttrsFromElement(element: FJElement, exclude?: string[]): Record<string, string>;
export declare function getChildNodes(element: FJElement): Node[];
export declare function getElementType(element: FJElement | undefined | EventTarget | null): 'DOCUMENT' | 'ELEMENT' | 'COMPONENT' | undefined;
export declare function isFireJetElement(element: FJElement | undefined | EventTarget | null, allowDeleted?: boolean): element is FJElement;
export declare function generateComponentId(componentData: ComponentData, idx: number): string;
export declare function getFireJetId(element: FJElement | undefined | EventTarget | null): string | undefined;
export declare function getFireJetElementAll(id: string): FJElement[];
export declare function isChildOfDocument(element: FJElement | undefined): boolean;
export declare function isFJElementType(node: any): node is FJElement;
export declare function getFireJetElement(id: string, parent?: FJElement): FJElement | null;
export declare const OVERRIDE_STYLE_IDENTIFIER = "FJ_OVERRIDE_STYLES";
export declare const GET_OVERRIDE_STYLE_REGEX: () => RegExp;
export declare function getOverrideStyles(element: FJElement): Record<string, string | null>;
export declare function removeOverrideStyles(element: FJElement): void;
export declare function setOverrideStyles(element: FJElement, styles: Record<string, string | null>): void;
export declare function someFireJetParent(element: FJElement, condition: (element: FJElement | null) => boolean): boolean;
/**Gets the nearest ancestor element that is a firejet element */
export declare function getFireJetParent(element: FJElement): FJElement | null;
export declare function getChildren(element: FJElement): FJElement[];
/**Get child nodes that are FireJetElements */
export declare function getFireJetChildren(element: FJElement, excludeDeleted?: boolean): FJElement[];
export declare function getFJChildPosition(parent: FJElement | undefined, child: FJElement, ignoredNodes: FJElement[]): number;
export declare function softDeleteNode(node: FJElement): void;
export declare function softDeleteNodeById(id: string): void;
export declare function isSoftInserted(element: FJElement): boolean;
export declare function isSoftDeleted(element: FJElement): boolean;
export declare function softInsertChild(parentNode: FJElement, child: FJElement, position: number, deleteOnCodeSync?: boolean): void;
export declare function onNodeAdded(nodeId: string, parentNode: FJElement, callback: () => void, fakeNodesAllowed?: boolean): void;
