export type FJError = {
    message: string;
    meta?: {
        message?: string;
        data?: any;
        action?: string;
    };
    isFJError?: boolean;
    stack: string;
};
export declare const error: (message: FJError["message"], meta?: FJError["meta"]) => Error;
export declare function popDevErrors(): FJError[];
export declare const throwOnDev: (message: string, meta?: {
    message?: string;
    data?: any;
    action?: string;
} | undefined) => void;
export declare const assertOnDev: (assertion: boolean, message: string, meta?: {
    message?: string;
    data?: any;
    action?: string;
} | undefined) => boolean;
type AnyFunction = (...args: any[]) => void | any;
export declare function tryCatchWrapper<T extends AnyFunction>(inputFunction: T, throwOnDev?: boolean): Promise<void>;
/**Like the tryCatchWrapper but it yolos errors completely even in dev */
export declare function tryWrapper<T extends AnyFunction>(inputFunction: T): Promise<void>;
export declare function tryGet<T>(getter: () => T, fallback: T, handleErr?: (e: any) => void): T;
export declare function tryGet<T>(getter: () => Promise<T>, fallback: T, handleErr?: (e: any) => void): Promise<T>;
export type ParsedError = FJError;
export declare function parseError(e: any): ParsedError;
export {};
