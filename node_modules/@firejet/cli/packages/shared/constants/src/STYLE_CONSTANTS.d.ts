import { BaseSupportedStyles, StyleKey, KeysWithOverlappingVal, Expand } from '@firejet-sync/shared/types';
type SingleStyleMeta<K extends StyleKey> = {
    onWrapper: boolean;
    onMain: boolean;
    unsetVal: BaseSupportedStyles[K];
} & ({
    inherited: true;
    defaultVal: BaseSupportedStyles[K];
} | {
    inherited: false;
    defaultVal?: BaseSupportedStyles[K];
});
export type StyleMetaMap = {
    [K in StyleKey]: SingleStyleMeta<K>;
};
export declare const STYLE_META: {
    readonly bottom: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly top: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly left: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly right: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly width: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly height: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly alignSelf: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly flexGrow: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly flexShrink: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 1;
    };
    readonly maxHeight: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly maxWidth: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly minHeight: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly minWidth: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly opacity: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 1;
        readonly defaultVal: 1;
    };
    readonly position: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "static";
    };
    readonly borderBottomLeftRadius: {
        readonly onWrapper: true;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly borderBottomRightRadius: {
        readonly onWrapper: true;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly borderTopLeftRadius: {
        readonly onWrapper: true;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly borderTopRightRadius: {
        readonly onWrapper: true;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly filter: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly marginLeft: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly marginRight: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly marginTop: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly marginBottom: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly zIndex: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly order: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly objectFit: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "fill";
        readonly defaultVal: "fill";
    };
    readonly content: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "normal";
    };
    readonly objectPosition: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "center";
    };
    readonly boxShadow: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly backgroundColor: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "rgba(0,0,0,0)";
        readonly defaultVal: "rgba(0,0,0,0)";
    };
    readonly backgroundImage: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly backgroundRepeat: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "repeat";
        readonly defaultVal: "repeat";
    };
    readonly backgroundPosition: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "0% 0%";
    };
    readonly backgroundSize: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly outline: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly borderStyle: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly borderColor: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "currentColor";
    };
    readonly borderTopWidth: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "medium";
    };
    readonly borderBottomWidth: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "medium";
    };
    readonly borderLeftWidth: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "medium";
    };
    readonly borderRightWidth: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "medium";
    };
    readonly flexDirection: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "row";
        readonly defaultVal: "row";
    };
    readonly overflow: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "visible";
        readonly defaultVal: "visible";
    };
    readonly mixBlendMode: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "normal";
    };
    readonly alignItems: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "flex-start";
        readonly defaultVal: "stretch";
    };
    readonly backdropFilter: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly columnGap: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly rowGap: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly display: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "block";
        readonly defaultVal: "block";
    };
    readonly maskType: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "luminance";
    };
    readonly lineClamp: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly paddingBottom: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly paddingTop: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly paddingLeft: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly paddingRight: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly justifyContent: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "flex-start";
        readonly defaultVal: "flex-start";
    };
    readonly fontSize: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: 16;
    };
    readonly fontFamily: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "unset";
        readonly defaultVal: "unset";
    };
    readonly fontWeight: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: 400;
    };
    readonly textDecoration: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "none";
        readonly defaultVal: "none";
    };
    readonly lineHeight: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: "normal";
    };
    readonly letterSpacing: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "normal";
        readonly defaultVal: "normal";
    };
    readonly color: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: "rgba(0,0,0,1)";
    };
    readonly textAlign: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: "left";
    };
    readonly textOverflow: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "clip";
    };
    readonly flexWrap: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "nowrap";
        readonly defaultVal: "nowrap";
    };
    readonly transformOrigin: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "center";
    };
    readonly transform: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly textTransform: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "none";
        readonly defaultVal: "none";
    };
    readonly fontStyle: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "normal";
        readonly defaultVal: "normal";
    };
    readonly listStyleType: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "disc";
    };
    readonly backgroundClip: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly whiteSpace: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "normal";
        readonly defaultVal: "normal";
    };
    readonly cursor: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: true;
        readonly unsetVal: "auto";
        readonly defaultVal: "auto";
    };
};
export declare const COMPOUND_STYLES: {
    readonly inset: ["top", "bottom", "left", "right"];
    readonly padding: ["paddingTop", "paddingBottom", "paddingLeft", "paddingRight"];
    readonly paddingX: ["paddingLeft", "paddingRight"];
    readonly paddingY: ["paddingTop", "paddingBottom"];
    readonly margin: ["marginTop", "marginBottom", "marginLeft", "marginRight"];
    readonly marginX: ["marginLeft", "marginRight"];
    readonly marginY: ["marginTop", "marginBottom"];
    readonly borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"];
    readonly borderWidth: ["borderTopWidth", "borderLeftWidth", "borderRightWidth", "borderBottomWidth"];
};
type NumberConverter = (num: number) => string;
export declare const unitless: StringConstructor;
export declare const px: NumberConverter;
export declare const UNITLESS_STYLES: readonly ["zIndex", "order", "opacity", "flexGrow", "flexShrink", "fontWeight", "letterSpacing", "lineClamp"];
export declare const PX_STYLES: readonly ["top", "bottom", "left", "right", "width", "height", "maxHeight", "maxWidth", "minHeight", "minWidth", "paddingBottom", "paddingTop", "paddingLeft", "paddingRight", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius", "borderTopWidth", "borderBottomWidth", "borderLeftWidth", "borderRightWidth", "columnGap", "rowGap", "letterSpacing", "lineHeight", "fontSize"];
export declare const NUMBER_TO_CSS_UNIT: {
    [x: string]: StringConstructor | NumberConverter;
};
/**Keys that should be set on the wrapper */
export declare const WRAPPER_STYLE_KEYS: KeysWithOverlappingVal<{
    readonly bottom: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly top: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly left: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly right: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly width: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly height: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly alignSelf: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly flexGrow: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly flexShrink: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 1;
    };
    readonly maxHeight: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly maxWidth: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly minHeight: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly minWidth: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly opacity: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 1;
        readonly defaultVal: 1;
    };
    readonly position: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "static";
    };
    readonly borderBottomLeftRadius: {
        readonly onWrapper: true;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly borderBottomRightRadius: {
        readonly onWrapper: true;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly borderTopLeftRadius: {
        readonly onWrapper: true;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly borderTopRightRadius: {
        readonly onWrapper: true;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly filter: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly marginLeft: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly marginRight: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly marginTop: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly marginBottom: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly zIndex: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly order: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly objectFit: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "fill";
        readonly defaultVal: "fill";
    };
    readonly content: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "normal";
    };
    readonly objectPosition: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "center";
    };
    readonly boxShadow: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly backgroundColor: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "rgba(0,0,0,0)";
        readonly defaultVal: "rgba(0,0,0,0)";
    };
    readonly backgroundImage: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly backgroundRepeat: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "repeat";
        readonly defaultVal: "repeat";
    };
    readonly backgroundPosition: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "0% 0%";
    };
    readonly backgroundSize: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly outline: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly borderStyle: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly borderColor: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "currentColor";
    };
    readonly borderTopWidth: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "medium";
    };
    readonly borderBottomWidth: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "medium";
    };
    readonly borderLeftWidth: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "medium";
    };
    readonly borderRightWidth: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "medium";
    };
    readonly flexDirection: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "row";
        readonly defaultVal: "row";
    };
    readonly overflow: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "visible";
        readonly defaultVal: "visible";
    };
    readonly mixBlendMode: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "normal";
    };
    readonly alignItems: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "flex-start";
        readonly defaultVal: "stretch";
    };
    readonly backdropFilter: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly columnGap: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly rowGap: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly display: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "block";
        readonly defaultVal: "block";
    };
    readonly maskType: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "luminance";
    };
    readonly lineClamp: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly paddingBottom: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly paddingTop: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly paddingLeft: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly paddingRight: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly justifyContent: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "flex-start";
        readonly defaultVal: "flex-start";
    };
    readonly fontSize: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: 16;
    };
    readonly fontFamily: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "unset";
        readonly defaultVal: "unset";
    };
    readonly fontWeight: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: 400;
    };
    readonly textDecoration: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "none";
        readonly defaultVal: "none";
    };
    readonly lineHeight: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: "normal";
    };
    readonly letterSpacing: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "normal";
        readonly defaultVal: "normal";
    };
    readonly color: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: "rgba(0,0,0,1)";
    };
    readonly textAlign: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: "left";
    };
    readonly textOverflow: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "clip";
    };
    readonly flexWrap: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "nowrap";
        readonly defaultVal: "nowrap";
    };
    readonly transformOrigin: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "center";
    };
    readonly transform: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly textTransform: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "none";
        readonly defaultVal: "none";
    };
    readonly fontStyle: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "normal";
        readonly defaultVal: "normal";
    };
    readonly listStyleType: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "disc";
    };
    readonly backgroundClip: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly whiteSpace: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "normal";
        readonly defaultVal: "normal";
    };
    readonly cursor: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: true;
        readonly unsetVal: "auto";
        readonly defaultVal: "auto";
    };
}, {
    onWrapper: true;
}>[];
/**Keys that should be set on the main element */
export declare const MAIN_ELEMENT_STYLE_KEYS: KeysWithOverlappingVal<{
    readonly bottom: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly top: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly left: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly right: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly width: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly height: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly alignSelf: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly flexGrow: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly flexShrink: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 1;
    };
    readonly maxHeight: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly maxWidth: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly minHeight: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly minWidth: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly opacity: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 1;
        readonly defaultVal: 1;
    };
    readonly position: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "static";
    };
    readonly borderBottomLeftRadius: {
        readonly onWrapper: true;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly borderBottomRightRadius: {
        readonly onWrapper: true;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly borderTopLeftRadius: {
        readonly onWrapper: true;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly borderTopRightRadius: {
        readonly onWrapper: true;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly filter: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly marginLeft: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly marginRight: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly marginTop: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly marginBottom: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly zIndex: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly order: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly objectFit: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "fill";
        readonly defaultVal: "fill";
    };
    readonly content: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "normal";
    };
    readonly objectPosition: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "center";
    };
    readonly boxShadow: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly backgroundColor: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "rgba(0,0,0,0)";
        readonly defaultVal: "rgba(0,0,0,0)";
    };
    readonly backgroundImage: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly backgroundRepeat: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "repeat";
        readonly defaultVal: "repeat";
    };
    readonly backgroundPosition: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "0% 0%";
    };
    readonly backgroundSize: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "auto";
    };
    readonly outline: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly borderStyle: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly borderColor: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "currentColor";
    };
    readonly borderTopWidth: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "medium";
    };
    readonly borderBottomWidth: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "medium";
    };
    readonly borderLeftWidth: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "medium";
    };
    readonly borderRightWidth: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "medium";
    };
    readonly flexDirection: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "row";
        readonly defaultVal: "row";
    };
    readonly overflow: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "visible";
        readonly defaultVal: "visible";
    };
    readonly mixBlendMode: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "normal";
    };
    readonly alignItems: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "flex-start";
        readonly defaultVal: "stretch";
    };
    readonly backdropFilter: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly columnGap: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly rowGap: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
    };
    readonly display: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "block";
        readonly defaultVal: "block";
    };
    readonly maskType: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "luminance";
    };
    readonly lineClamp: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly paddingBottom: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly paddingTop: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly paddingLeft: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly paddingRight: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: 0;
        readonly defaultVal: 0;
    };
    readonly justifyContent: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "flex-start";
        readonly defaultVal: "flex-start";
    };
    readonly fontSize: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: 16;
    };
    readonly fontFamily: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "unset";
        readonly defaultVal: "unset";
    };
    readonly fontWeight: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: 400;
    };
    readonly textDecoration: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "none";
        readonly defaultVal: "none";
    };
    readonly lineHeight: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: "normal";
    };
    readonly letterSpacing: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "normal";
        readonly defaultVal: "normal";
    };
    readonly color: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: "rgba(0,0,0,1)";
    };
    readonly textAlign: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "inherit";
        readonly defaultVal: "left";
    };
    readonly textOverflow: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "clip";
    };
    readonly flexWrap: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "nowrap";
        readonly defaultVal: "nowrap";
    };
    readonly transformOrigin: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "center";
    };
    readonly transform: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly textTransform: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "none";
        readonly defaultVal: "none";
    };
    readonly fontStyle: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "normal";
        readonly defaultVal: "normal";
    };
    readonly listStyleType: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: false;
        readonly unsetVal: "disc";
    };
    readonly backgroundClip: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: false;
        readonly unsetVal: "none";
    };
    readonly whiteSpace: {
        readonly onWrapper: false;
        readonly onMain: true;
        readonly inherited: true;
        readonly unsetVal: "normal";
        readonly defaultVal: "normal";
    };
    readonly cursor: {
        readonly onWrapper: true;
        readonly onMain: false;
        readonly inherited: true;
        readonly unsetVal: "auto";
        readonly defaultVal: "auto";
    };
}, {
    onMain: true;
}>[];
export declare const INHERITED_STYLE_KEYS: Expand<KeysWithOverlappingVal<typeof STYLE_META, {
    inherited: true;
}>>[];
export declare const ALL_STYLE_KEYS: ("width" | "height" | "position" | "backgroundColor" | "backgroundImage" | "backgroundPosition" | "backgroundSize" | "borderColor" | "boxShadow" | "outline" | "cursor" | "content" | "flexGrow" | "flexShrink" | "fontFamily" | "fontSize" | "fontWeight" | "minHeight" | "maxHeight" | "minWidth" | "maxWidth" | "zIndex" | "letterSpacing" | "lineHeight" | "listStyleType" | "opacity" | "order" | "objectPosition" | "transformOrigin" | "backdropFilter" | "filter" | "maskType" | "paddingLeft" | "paddingRight" | "paddingTop" | "paddingBottom" | "textDecoration" | "fontStyle" | "left" | "right" | "top" | "bottom" | "textTransform" | "textAlign" | "textOverflow" | "color" | "marginTop" | "borderTopWidth" | "borderTopLeftRadius" | "display" | "overflow" | "marginLeft" | "marginRight" | "marginBottom" | "borderBottomLeftRadius" | "borderBottomRightRadius" | "borderTopRightRadius" | "borderStyle" | "borderBottomWidth" | "borderLeftWidth" | "borderRightWidth" | "flexDirection" | "justifyContent" | "alignItems" | "columnGap" | "rowGap" | "flexWrap" | "alignSelf" | "backgroundRepeat" | "backgroundClip" | "transform" | "mixBlendMode" | "objectFit" | "lineClamp" | "whiteSpace")[];
export declare const WRAPPER_STYLE_KEYS_SET: Set<string>;
export declare const MAIN_ELEMENT_STYLE_KEYS_SET: Set<string>;
export declare const ALL_STYLE_KEYS_SET: Set<string>;
export declare const NAMED_COLORS: {
    readonly '#f0f8ff': "aliceblue";
    readonly '#faebd7': "antiquewhite";
    readonly '#00ffff': "aqua";
    readonly '#7fffd4': "aquamarine";
    readonly '#f0ffff': "azure";
    readonly '#f5f5dc': "beige";
    readonly '#ffe4c4': "bisque";
    readonly '#000000': "black";
    readonly '#ffebcd': "blanchedalmond";
    readonly '#0000ff': "blue";
    readonly '#8a2be2': "blueviolet";
    readonly '#a52a2a': "brown";
    readonly '#deb887': "burlywood";
    readonly '#5f9ea0': "cadetblue";
    readonly '#7fff00': "chartreuse";
    readonly '#d2691e': "chocolate";
    readonly '#ff7f50': "coral";
    readonly '#6495ed': "cornflowerblue";
    readonly '#fff8dc': "cornsilk";
    readonly '#dc143c': "crimson";
    readonly '#00008b': "darkblue";
    readonly '#008b8b': "darkcyan";
    readonly '#b8860b': "darkgoldenrod";
    readonly '#a9a9a9': "darkgray";
    readonly '#006400': "darkgreen";
    readonly '#bdb76b': "darkkhaki";
    readonly '#8b008b': "darkmagenta";
    readonly '#556b2f': "darkolivegreen";
    readonly '#ff8c00': "darkorange";
    readonly '#9932cc': "darkorchid";
    readonly '#8b0000': "darkred";
    readonly '#e9967a': "darksalmon";
    readonly '#8fbc8f': "darkseagreen";
    readonly '#483d8b': "darkslateblue";
    readonly '#2f4f4f': "darkslategray";
    readonly '#00ced1': "darkturquoise";
    readonly '#9400d3': "darkviolet";
    readonly '#ff1493': "deeppink";
    readonly '#00bfff': "deepskyblue";
    readonly '#696969': "dimgray";
    readonly '#1e90ff': "dodgerblue";
    readonly '#b22222': "firebrick";
    readonly '#fffaf0': "floralwhite";
    readonly '#228b22': "forestgreen";
    readonly '#ff00ff': "fuchsia";
    readonly '#dcdcdc': "gainsboro";
    readonly '#f8f8ff': "ghostwhite";
    readonly '#ffd700': "gold";
    readonly '#daa520': "goldenrod";
    readonly '#808080': "gray";
    readonly '#008000': "green";
    readonly '#adff2f': "greenyellow";
    readonly '#f0fff0': "honeydew";
    readonly '#ff69b4': "hotpink";
    readonly '#cd5c5c': "indianred";
    readonly '#4b0082': "indigo";
    readonly '#fffff0': "ivory";
    readonly '#f0e68c': "khaki";
    readonly '#e6e6fa': "lavender";
    readonly '#fff0f5': "lavenderblush";
    readonly '#7cfc00': "lawngreen";
    readonly '#fffacd': "lemonchiffon";
    readonly '#add8e6': "lightblue";
    readonly '#f08080': "lightcoral";
    readonly '#e0ffff': "lightcyan";
    readonly '#fafad2': "lightgoldenrodyellow";
    readonly '#d3d3d3': "lightgray";
    readonly '#90ee90': "lightgreen";
    readonly '#ffb6c1': "lightpink";
    readonly '#ffa07a': "lightsalmon";
    readonly '#20b2aa': "lightseagreen";
    readonly '#87cefa': "lightskyblue";
    readonly '#778899': "lightslategray";
    readonly '#b0c4de': "lightsteelblue";
    readonly '#ffffe0': "lightyellow";
    readonly '#00ff00': "lime";
    readonly '#32cd32': "limegreen";
    readonly '#faf0e6': "linen";
    readonly '#800000': "maroon";
    readonly '#66cdaa': "mediumaquamarine";
    readonly '#0000cd': "mediumblue";
    readonly '#ba55d3': "mediumorchid";
    readonly '#9370db': "mediumpurple";
    readonly '#3cb371': "mediumseagreen";
    readonly '#7b68ee': "mediumslateblue";
    readonly '#00fa9a': "mediumspringgreen";
    readonly '#48d1cc': "mediumturquoise";
    readonly '#c71585': "mediumvioletred";
    readonly '#191970': "midnightblue";
    readonly '#f5fffa': "mintcream";
    readonly '#ffe4e1': "mistyrose";
    readonly '#ffe4b5': "moccasin";
    readonly '#ffdead': "navajowhite";
    readonly '#000080': "navy";
    readonly '#fdf5e6': "oldlace";
    readonly '#808000': "olive";
    readonly '#6b8e23': "olivedrab";
    readonly '#ffa500': "orange";
    readonly '#ff4500': "orangered";
    readonly '#da70d6': "orchid";
    readonly '#eee8aa': "palegoldenrod";
    readonly '#98fb98': "palegreen";
    readonly '#afeeee': "paleturquoise";
    readonly '#db7093': "palevioletred";
    readonly '#ffefd5': "papayawhip";
    readonly '#ffdab9': "peachpuff";
    readonly '#cd853f': "peru";
    readonly '#ffc0cb': "pink";
    readonly '#dda0dd': "plum";
    readonly '#b0e0e6': "powderblue";
    readonly '#800080': "purple";
    readonly '#663399': "rebeccapurple";
    readonly '#ff0000': "red";
    readonly '#bc8f8f': "rosybrown";
    readonly '#4169e1': "royalblue";
    readonly '#8b4513': "saddlebrown";
    readonly '#fa8072': "salmon";
    readonly '#f4a460': "sandybrown";
    readonly '#2e8b57': "seagreen";
    readonly '#fff5ee': "seashell";
    readonly '#a0522d': "sienna";
    readonly '#c0c0c0': "silver";
    readonly '#87ceeb': "skyblue";
    readonly '#6a5acd': "slateblue";
    readonly '#708090': "slategray";
    readonly '#fffafa': "snow";
    readonly '#00ff7f': "springgreen";
    readonly '#4682b4': "steelblue";
    readonly '#d2b48c': "tan";
    readonly '#008080': "teal";
    readonly '#d8bfd8': "thistle";
    readonly '#ff6347': "tomato";
    readonly '#40e0d0': "turquoise";
    readonly '#ee82ee': "violet";
    readonly '#f5deb3': "wheat";
    readonly '#ffffff': "white";
    readonly '#f5f5f5': "whitesmoke";
    readonly '#ffff00': "yellow";
    readonly '#9acd32': "yellowgreen";
};
export {};
