import { FJ } from '@firejet-sync/shared/types';
export declare const DEFAULT_FIREJET_CONFIG_PATH = ".firejet.config";
export declare const DEFAULT_FIREJET_CONFIG: FJ.FireJetConfigResolved;
export declare const SAMPLE_SMALL_FIREJET_CONFIG = "({\n  globalCss: ['./src/index.css'],\n  viteConfig: undefined,\n  components: {\n    Card: {\n      file: './src/components/Card.tsx',\n      defaultExport: false,\n      exportName: 'Card',\n      props: {\n        title: { type: 'element', implementation: 'literal'},\n        children: { type: 'element', implementation: 'literal'}\n      }\n    }\n  }\n})";
export declare const SAMPLE_FIREJET_CONFIG_STRING = "({\n  globalCss: ['/path/to/global/css/file1.css', '/path/to/global/css/file2.css'],\n  viteConfig: undefined, //If your components are not rendering properly you can provide a custom vite config, otherwise leave this empty\n  components: {\n    React: {\n      exportName: 'ReactComponentName',\n      /**This should be relative or absolute from where the firjet cli is invoked */\n      file: './relative/path/to/component.tsx',\n      /**Props definitions are used to tell firejet */\n      props: {},\n      /**When set to true, will get the component as the default export from the file.\n       * Otherwise will get the component by the key in the dictionary. */\n      defaultExport: false,\n    },\n    Vue: {\n      exportName: 'VueComponentName',\n      file: './relative/path/to/component.vue',\n      props: {\n        /**element is any valid element in html, like \"<div>Hello</div>, or even just the text \"Hello\"\n         * literal means literally the element, like \"Hello\"\n         * implementation defaults to 'literal' if not specified\n         */\n        title: { type: 'element' },\n        title2: { type: 'element', implementation: 'literal' },\n        /**function means to get the value, you have to call a function, like () => \"Hello\"\n         * The function must not require any arguments\n         */\n        text: { type: 'element', implementation: 'function' },\n        /**\n         * object is a nested Record<FJ.Any> in JS, where you can nest your props\n         */\n        author: {\n          type: 'object',\n          implementation: {\n            name: { type: 'element' },\n            title: { type: 'element', implementation: 'literal' },\n          },\n        },\n        /**image-src is for any string used as the source for an image\n         * implementation defaults to 'string-literal' if not specified\n         */\n        src: { type: 'image-src' },\n        src2: { type: 'image-src', implementation: 'string-literal' },\n        /**\n         * boolean is for any true/false value\n         * Can be implemented as literal or function\n         */\n        isVisible: { type: 'boolean' },\n        /**\n         * css-class is for any css classes\n         * Accepts values like 'custom-css-class' or 'p-2 rounded-md' for tailwind\n         * Can be implemented as string-literal\n         */\n        className: { type: 'css-class' },\n        /**\n         * function is for stubbing any functions that need to be accepted by the component\n         * Accepts values like '(text) => log(text)'\n         * Can be implemented as any function\n         */\n        onClick: { type: 'function' },\n      },\n    },\n    Svelte: {\n      file: './src/components/Button.svelte',\n      props: {},\n      exportName: 'SvelteComponentName'\n    },\n  },\n})";
