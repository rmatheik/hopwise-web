import { FJ, PropAttrSlot, PropAttrSlotText, PropCombination, PropPath } from '@firejet-sync/shared/types';
export declare const getComponent: (componentName: string, propsObj?: string, children?: string) => string;
export declare const getUniqueEle: (data: PropAttrSlot, styleOverrides?: Record<string, string>, tagOverride?: string) => string;
export declare const getUniqueStringLiteral: (data: PropAttrSlotText) => string;
export declare function generateStructJsx(struct: FJ.Struct, ctx: GenerateStructJSXContext): string;
export interface GenerateStructJSXContext {
    propCombi: PropCombination;
    mainComponent: FJ.ComponentDef;
    propPath: PropPath;
    extraClassStyles: ExtraClassStyles;
}
/**The props of an object, stringified */
type PropsObjStr = string;
export type ClassName = string;
export type StyleObj = Record<string, string>;
export type ExtraClassStyles = Record<ClassName, StyleObj>;
export declare function generateProps(struct: {
    props: FJ.Props;
    structId?: number;
}, ctx: GenerateStructJSXContext): PropsObjStr;
export declare function getAllPropCombinations(struct: FJ.Struct): PropCombination[];
export {};
