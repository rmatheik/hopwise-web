import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import Icon from "../Icon/index.js";
import View from "../View/index.js";
import Text from "../Text/index.js";
const Alert = (props) => {
    const { title, children, icon, actionsSlot, color = "neutral", inline, bleed, className, attributes, } = props;
    const isNeutral = color === "neutral";
    const renderContent = () => {
        if (inline) {
            return (_jsxs(_Fragment, { children: [title && (_jsx(Text, { variant: "body-3", weight: "medium", as: "span", children: title })), title && children && " ", children && (_jsx(Text, { variant: "body-3", as: "span", children: children }))] }));
        }
        return (_jsxs(View, { gap: 1, children: [title && (_jsx(Text, { variant: "body-3", weight: "medium", children: title })), children && _jsx(Text, { variant: "body-3", children: children })] }));
    };
    const applyActions = (content) => {
        if (!actionsSlot)
            return content;
        return (_jsxs(View, { gap: inline ? 4 : 2, direction: inline ? "row" : "column", children: [inline ? _jsx(View.Item, { grow: true, children: content }) : content, actionsSlot && (_jsx(Text, { variant: "body-3", weight: "medium", children: _jsx(View, { direction: "row", gap: 3, children: actionsSlot }) }))] }));
    };
    return (_jsx(View, { direction: "row", gap: 3, padding: 4, bleed: bleed, borderRadius: "medium", borderColor: `${color}-faded`, backgroundColor: `${color}-faded`, className: className, attributes: Object.assign(Object.assign({}, attributes), { role: color === "critical" ? "alert" : "status" }), children: icon ? (_jsxs(_Fragment, { children: [_jsx(Icon, { svg: icon, size: 5, color: isNeutral ? "primary" : color }), _jsx(View.Item, { grow: true, children: applyActions(renderContent()) })] })) : (applyActions(renderContent())) }));
};
export default Alert;
