"use client";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import React from "react";
import { classNames, responsiveVariables, responsiveClassNames, debounceHandler, } from "../../utilities/helpers.js";
import View from "../View/index.js";
import useRTL from "../../hooks/useRTL.js";
import useIsomorphicLayoutEffect from "../../hooks/useIsomorphicLayoutEffect.js";
import CarouselControl from "./CarouselControl.js";
import * as T from "./Carousel.types.js";
import s from "./Carousel.module.css";
const Carousel = (props) => {
    const { children, gap = 3, visibleItems, bleed, navigationDisplay, instanceRef, className, attributes, } = props;
    const [mounted, setMounted] = React.useState(false);
    const [scrollPosition, setScrollPosition] = React.useState(0);
    const [isRTL] = useRTL();
    const scrollElRef = React.useRef(null);
    const bleedClassNames = {};
    if (typeof bleed === "object") {
        Object.entries(bleed).forEach(([key, value]) => {
            bleedClassNames[key] = typeof value === "number" && value > 0;
        });
    }
    const rootClassNames = classNames(s.root, className, ...responsiveClassNames(s, "--bleed", typeof bleed === "number" ? true : bleedClassNames));
    const handleScroll = debounceHandler((event) => {
        const el = event.target;
        setScrollPosition(el.scrollLeft);
    }, 16);
    const getItemsGap = () => {
        const style = getComputedStyle(scrollElRef.current);
        // Safari returns Npx Npx as a value, we need only the first one
        const xGap = style.gap.split(" ")[0];
        return Number(xGap.replace("px", ""));
    };
    const navigateRight = () => {
        const scrollEl = scrollElRef.current;
        scrollEl.scrollBy({
            left: scrollEl.clientWidth + getItemsGap(),
            top: 0,
            behavior: "smooth",
        });
    };
    const navigateLeft = () => {
        const scrollEl = scrollElRef.current;
        scrollEl.scrollBy({
            left: -scrollEl.clientWidth - getItemsGap(),
            top: 0,
            behavior: "smooth",
        });
    };
    const navigateBack = isRTL ? navigateRight : navigateLeft;
    const navigateForward = isRTL ? navigateLeft : navigateRight;
    React.useImperativeHandle(instanceRef, () => ({
        navigateBack,
        navigateForward,
    }));
    /**
     * Changing flag here since scroll ref changing won't rerender the controls and show them after SSR
     */
    useIsomorphicLayoutEffect(() => {
        setMounted(true);
    }, []);
    return (_jsxs("section", Object.assign({}, attributes, { className: rootClassNames, style: Object.assign(Object.assign({}, responsiveVariables("--rs-carousel-items", visibleItems)), responsiveVariables("--rs-carousel-bleed", bleed)), children: [navigationDisplay !== "hidden" && (_jsxs(_Fragment, { children: [_jsx(CarouselControl, { isRTL: isRTL, type: T.ControlType.back, scrollElRef: scrollElRef, scrollPosition: scrollPosition, onClick: navigateBack, mounted: mounted }), _jsx(CarouselControl, { isRTL: isRTL, type: T.ControlType.forward, scrollElRef: scrollElRef, scrollPosition: scrollPosition, onClick: navigateForward, mounted: mounted })] })), _jsx(View, { as: "ul", direction: "row", wrap: false, gap: gap, className: s.scroll, attributes: { ref: scrollElRef, onScroll: handleScroll }, children: React.Children.map(children, (child) => (_jsx(View.Item, { className: s.item, as: "li", children: child }))) })] })));
};
export default Carousel;
