"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import { classNames } from "../../utilities/helpers.js";
import Button from "../Button/index.js";
import IconChevronRight from "../../icons/ChevronRight.js";
import IconChevronLeft from "../../icons/ChevronLeft.js";
import useIsomorphicLayoutEffect from "../../hooks/useIsomorphicLayoutEffect.js";
import * as T from "./Carousel.types.js";
import s from "./Carousel.module.css";
const CarouselControl = (props) => {
    const { type, scrollElRef, scrollPosition, onClick, isRTL, mounted } = props;
    const [visible, setVisible] = React.useState(false);
    const [rendered, setRendered] = React.useState(false);
    const isNext = type === T.ControlType.forward;
    const isDisplayedAsNext = type === (isRTL ? T.ControlType.back : T.ControlType.forward);
    const controlClassNames = classNames(s.control, isDisplayedAsNext ? s["--control-next"] : s["--control-prev"], visible && s["--control-visible"], rendered && s["--control-rendered"]);
    useIsomorphicLayoutEffect(() => {
        const scrollEl = scrollElRef.current;
        if (!scrollEl || !mounted)
            return;
        let timer;
        const normalizedScrollPosition = Math.abs(scrollPosition);
        const isScrollAtStart = normalizedScrollPosition <= 0;
        const isScrollAtEnd = normalizedScrollPosition + scrollEl.clientWidth >= scrollEl.scrollWidth - 1;
        const hideControl = isNext ? isScrollAtEnd : isScrollAtStart;
        if (hideControl) {
            setVisible(false);
            timer = setTimeout(() => setRendered(false), 1500);
        }
        else {
            setRendered(true);
            setVisible(true);
        }
        return () => {
            if (timer)
                clearTimeout(timer);
        };
    }, [scrollPosition, scrollElRef.current, mounted]);
    return (_jsx("div", { className: controlClassNames, "aria-hidden": "true", children: _jsx(Button, { onClick: onClick, icon: isDisplayedAsNext ? IconChevronRight : IconChevronLeft, rounded: true, variant: "faded", elevated: true, attributes: { "aria-disabled": !visible } }) }));
};
export default CarouselControl;
