"use client";
import { Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from "react";
import { classNames } from "../../utilities/helpers.js";
import Actionable from "../Actionable/index.js";
import View from "../View/index.js";
import Icon from "../Icon/index.js";
import IconChevronDown from "../../icons/ChevronDown.js";
import AccordionContext from "./Accordion.context.js";
import s from "./Accordion.module.css";
const AccordionTrigger = (props) => {
    const { children } = props;
    const { active, onToggle, triggerId, contentId, iconPosition = "end", iconSize, } = React.useContext(AccordionContext);
    const iconClassNames = classNames(s.icon, active && s["icon--active"]);
    const handleClick = () => {
        onToggle === null || onToggle === void 0 ? void 0 : onToggle(!active);
    };
    const attributes = { "aria-expanded": active, "aria-controls": contentId, id: triggerId };
    if (typeof children === "function") {
        return _jsx(_Fragment, { children: children(Object.assign(Object.assign({}, attributes), { onClick: handleClick }), { active }) });
    }
    return (_jsx(Actionable, { onClick: handleClick, fullWidth: true, attributes: attributes, children: _jsxs(View, { gap: 2, direction: iconPosition === "start" ? "row-reverse" : "row", align: "center", children: [_jsx(View.Item, { grow: true, children: children }), _jsx(Icon, { size: iconSize || 4, svg: IconChevronDown, className: iconClassNames })] }) }));
};
export default AccordionTrigger;
