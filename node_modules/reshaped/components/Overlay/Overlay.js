"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import { onNextFrame } from "../../utilities/animation.js";
import { classNames } from "../../utilities/helpers.js";
import TrapFocus from "../../utilities/a11y/TrapFocus.js";
import useToggle from "../../hooks/useToggle.js";
import useIsomorphicLayoutEffect from "../../hooks/useIsomorphicLayoutEffect.js";
import useHotkeys from "../../hooks/useHotkeys.js";
import useScrollLock from "../../hooks/useScrollLock.js";
import useIsDismissible from "../../hooks/_private/useIsDismissible.js";
import Portal from "../_private/Portal/index.js";
import s from "./Overlay.module.css";
const Overlay = (props) => {
    const { active, children, transparent, onClose, className, attributes } = props;
    const clickThrough = transparent === true;
    const opacity = clickThrough ? 0 : (1 - (transparent || 0)) * 0.7;
    const [mounted, setMounted] = React.useState(false);
    const [animated, setAnimated] = React.useState(false);
    const contentRef = React.useRef(null);
    const isMouseDownValidRef = React.useRef(false);
    const { lockScroll, unlockScroll } = useScrollLock();
    const { active: rendered, activate: render, deactivate: remove } = useToggle(active || false);
    const { active: visible, activate: show, deactivate: hide } = useToggle(active || false);
    const isDismissible = useIsDismissible(active, contentRef);
    const rootClassNames = classNames(s.root, visible && s["--visible"], clickThrough && s["--click-through"], animated && s["--animated"], className);
    const isInsideChild = (el) => {
        if (!contentRef.current)
            return;
        const firstChild = contentRef.current.firstChild;
        if (!firstChild)
            return;
        return firstChild.contains(el);
    };
    const close = React.useCallback(() => {
        if (!visible || !isDismissible())
            return;
        if (onClose)
            onClose();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [visible, isDismissible]);
    const handleMouseDown = (event) => {
        isMouseDownValidRef.current = !isInsideChild(event.target);
    };
    const handleMouseUp = (event) => {
        const isMouseUpValid = !isInsideChild(event.target);
        const shouldClose = isMouseDownValidRef.current && isMouseUpValid && !clickThrough;
        if (!shouldClose)
            return;
        close();
    };
    const handleTransitionEnd = (e) => {
        if (e.propertyName !== "transform" || !e.pseudoElement)
            return;
        setAnimated(false);
        if (visible)
            return;
        if (!clickThrough)
            unlockScroll();
        remove();
    };
    useHotkeys({ Escape: close }, [close]);
    React.useEffect(() => {
        setAnimated(true);
        if (active && !rendered)
            render();
        if (!active && rendered)
            hide();
    }, [active, render, hide, rendered]);
    // Show overlay after it was rendered
    React.useEffect(() => {
        if (!rendered)
            return;
        if (!clickThrough)
            lockScroll();
        onNextFrame(() => {
            show();
        });
    }, [rendered, show, lockScroll, clickThrough]);
    React.useEffect(() => {
        if (!rendered || !contentRef.current)
            return;
        const trapFocus = new TrapFocus(contentRef.current);
        trapFocus.trap({
            initialFocusEl: contentRef.current.querySelector("[role=dialog][tabindex='-1']"),
        });
        return () => trapFocus.release();
    }, [rendered]);
    // Unlock scroll on unmount
    React.useEffect(() => {
        return () => {
            if (!clickThrough)
                unlockScroll();
        };
    }, [unlockScroll, clickThrough]);
    useIsomorphicLayoutEffect(() => {
        setMounted(true);
    }, []);
    if (!rendered || !mounted)
        return null;
    return (_jsx(Portal, { children: _jsx(Portal.Scope, { children: (ref) => (_jsx("div", Object.assign({}, attributes, { ref: ref, style: { "--rs-overlay-opacity": opacity }, role: "button", tabIndex: -1, className: rootClassNames, onMouseDown: handleMouseDown, onMouseUp: handleMouseUp, onTransitionEnd: handleTransitionEnd, children: _jsx("div", { className: s.wrapper, children: _jsx("div", { className: s.inner, children: _jsx("div", { className: s.content, ref: contentRef, children: typeof children === "function" ? children({ active: visible }) : children }) }) }) }))) }) }));
};
export default Overlay;
