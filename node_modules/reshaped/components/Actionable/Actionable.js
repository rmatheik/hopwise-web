"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import { classNames } from "../../utilities/helpers.js";
import * as keys from "../../constants/keys.js";
import s from "./Actionable.module.css";
const Actionable = forwardRef((props, ref) => {
    const { children, href, onClick, type, disabled, insetFocus, borderRadius, as, fullWidth, className, attributes, } = props;
    const rootClassNames = classNames(s.root, className, disabled && s["--disabled"], borderRadius && s[`--radius-${borderRadius}`], insetFocus && s["--inset"], fullWidth && s["--full-width"]);
    const rootAttributes = Object.assign({}, attributes);
    const hasClickHandler = onClick || (attributes === null || attributes === void 0 ? void 0 : attributes.onClick);
    const hasFocusHandler = (attributes === null || attributes === void 0 ? void 0 : attributes.onFocus) || (attributes === null || attributes === void 0 ? void 0 : attributes.onBlur);
    const isLink = Boolean(href || (attributes === null || attributes === void 0 ? void 0 : attributes.href));
    const isButton = Boolean(hasClickHandler || hasFocusHandler || type);
    const renderedAsButton = !isLink && isButton && (!as || as === "button");
    let TagName;
    if (isLink) {
        TagName = "a";
        rootAttributes.href = disabled ? undefined : href || (attributes === null || attributes === void 0 ? void 0 : attributes.href);
    }
    else if (renderedAsButton) {
        TagName = "button";
        rootAttributes.type = type || (attributes === null || attributes === void 0 ? void 0 : attributes.type) || "button";
        rootAttributes.disabled = disabled || (attributes === null || attributes === void 0 ? void 0 : attributes.disabled);
    }
    else if (isButton) {
        const isFocusable = as === "label";
        const simulateButton = !isFocusable || hasClickHandler || hasFocusHandler;
        TagName = as || "span";
        rootAttributes.role = simulateButton ? "button" : undefined;
        rootAttributes.tabIndex = simulateButton ? 0 : undefined;
    }
    else {
        TagName = as || "span";
    }
    const handlePress = (event) => {
        var _a;
        if (disabled)
            return;
        onClick === null || onClick === void 0 ? void 0 : onClick(event);
        (_a = attributes === null || attributes === void 0 ? void 0 : attributes.onClick) === null || _a === void 0 ? void 0 : _a.call(attributes, event);
    };
    const handleKeyDown = (event) => {
        const isSpace = event.key === keys.SPACE;
        const isEnter = event.key === keys.ENTER;
        if (!isSpace && !isEnter)
            return;
        if (rootAttributes.role !== "button")
            return;
        event.preventDefault();
        handlePress(event);
    };
    return (_jsx(TagName, Object.assign({ ref: ref }, rootAttributes, { className: rootClassNames, onClick: handlePress, onKeyDown: handleKeyDown, children: children })));
});
export default Actionable;
