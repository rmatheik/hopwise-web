import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from "react";
import { classNames, responsiveClassNames, responsivePropDependency } from "../../utilities/helpers.js";
import Icon from "../Icon/index.js";
import Loader from "../Loader/index.js";
import Actionable from "../Actionable/index.js";
import ButtonGroup from "./ButtonGroup.js";
import ButtonAligner from "./ButtonAligner.js";
import s from "./Button.module.css";
const Button = forwardRef((props, ref) => {
    const { variant = "solid", color = "neutral", elevated, highlighted, fullWidth, loading, disabled, type, href, size = "medium", children, rounded, onClick, icon, endIcon, as, className, attributes, } = props;
    const iconOnly = (icon || endIcon) && !children;
    const rootClassName = classNames(s.root, className, color && s[`--color-${color}`], variant && s[`--variant-${variant}`], responsiveClassNames(s, "--size", size), responsiveClassNames(s, "--full-width", fullWidth), elevated && variant !== "ghost" && s["--elevated"], rounded && s["--rounded"], disabled && s["--disabled"], loading && s["--loading"], highlighted && s["--highlighted"], iconOnly && s["--icon-only"]);
    const renderIcon = (position) => {
        const isStartValid = position === "start" && icon;
        const isEndValid = position === "end" && endIcon;
        const isInvalid = !(isStartValid || isEndValid);
        if (isInvalid)
            return null;
        const iconClassName = classNames(s.icon, position === "end" && s["--icon-position-end"]);
        const iconSize = responsivePropDependency(size, (size) => {
            if (size === "large")
                return 5;
            if (size === "xlarge")
                return 6;
            return 4;
        });
        return (_jsx(Icon, { className: iconClassName, svg: (position === "start" ? icon : endIcon), size: iconSize, autoWidth: true }));
    };
    return (_jsxs(Actionable, { disabled: disabled || loading, className: rootClassName, attributes: Object.assign(Object.assign({}, attributes), { "data-rs-aligner-target": true }), type: type, onClick: onClick, href: href, ref: ref, as: as, children: [loading && (_jsx("div", { className: s.loader, children: _jsx(Loader, { size: "small", color: "inherit" }) })), renderIcon("start"), children && _jsx("span", { className: s.text, children: children }), renderIcon("end")] }));
});
Button.Group = ButtonGroup;
Button.Aligner = ButtonAligner;
export default Button;
