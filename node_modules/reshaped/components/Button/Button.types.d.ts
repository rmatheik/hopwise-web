import type React from "react";
import type { IconProps } from "../Icon";
import type { ActionableProps } from "../Actionable";
import type { AlignerProps as BaseAlignerProps } from "../_private/Aligner";
import type * as G from "../../types/global";
export type Size = "xlarge" | "large" | "medium" | "small";
export type Props = Pick<ActionableProps, "attributes" | "className" | "disabled" | "children" | "href" | "onClick" | "type" | "as"> & {
    color?: "black" | "white" | "primary" | "critical" | "positive" | "neutral" | "inherit";
    variant?: "solid" | "outline" | "ghost" | "faded";
    icon?: IconProps["svg"];
    endIcon?: IconProps["svg"];
    size?: G.Responsive<Size>;
    rounded?: boolean;
    loading?: boolean;
    elevated?: boolean;
    fullWidth?: G.Responsive<boolean>;
    highlighted?: boolean;
};
export type GroupProps = {
    children: React.ReactNode;
    className?: G.ClassName;
    attributes?: G.Attributes<"div", Props>;
};
export type AlignerProps = BaseAlignerProps & {
    /**
     * @deprecated The method should not be used
     */
    position?: BaseAlignerProps["side"];
};
export type Export = React.ForwardRefExoticComponent<Props> & {
    Aligner: React.ComponentType<AlignerProps>;
    Group: React.ComponentType<GroupProps>;
};
