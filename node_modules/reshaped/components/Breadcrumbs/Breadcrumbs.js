"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from "react";
import { classNames } from "../../utilities/helpers.js";
import View from "../View/index.js";
import Icon from "../Icon/index.js";
import Text from "../Text/index.js";
import Button from "../Button/index.js";
import IconChevronRight from "../../icons/ChevronRight.js";
import IconDotsHorizontal from "../../icons/DotsHorizontal.js";
const Breadcrumbs = (props) => {
    const { children, separator, color, defaultVisibleItems, disableExpand, ariaLabel, className, attributes, } = props;
    const visibleItems = defaultVisibleItems && defaultVisibleItems >= 2 ? defaultVisibleItems : null;
    const [expanded, setExpanded] = React.useState(false);
    const rootClassNames = classNames(className);
    const childrenLength = React.Children.count(children);
    let renderIndex = 0;
    const handleExpand = () => {
        setExpanded(true);
    };
    return (_jsx("nav", Object.assign({}, attributes, { "aria-label": ariaLabel || (attributes === null || attributes === void 0 ? void 0 : attributes["aria-label"]), className: rootClassNames, children: _jsx(View, { as: "ol", direction: "row", gap: 2, align: "center", children: React.Children.map(children, (child, index) => {
                if (!child)
                    return null;
                const lastCollapsedIndex = childrenLength - (visibleItems || 0);
                const isBeforeCollapse = renderIndex === 0;
                const isAfterCollapse = renderIndex > lastCollapsedIndex;
                const isDisplayed = !visibleItems || isBeforeCollapse || isAfterCollapse || expanded;
                const isCollapseButton = renderIndex === lastCollapsedIndex;
                renderIndex += 1;
                let itemNode = null;
                if (isDisplayed) {
                    itemNode = child;
                }
                else if (isCollapseButton) {
                    itemNode = disableExpand ? (_jsx(Icon, { svg: IconDotsHorizontal, size: 4 })) : (_jsx(Button.Aligner, { children: _jsx(Button, { variant: "ghost", size: "small", icon: IconDotsHorizontal, onClick: handleExpand }) }));
                }
                if (itemNode === null)
                    return null;
                return (_jsxs(View, { as: "li", gap: 2, direction: "row", align: "center", children: [index > 0 && (isDisplayed || isCollapseButton) && (_jsx(Text, { color: "neutral-faded", children: separator || _jsx(Icon, { svg: IconChevronRight, size: 3 }) })), _jsx(Text, { variant: "body-3", color: color === "primary" ? "primary" : "neutral-faded", children: itemNode })] }, index));
            }) }) })));
};
export default Breadcrumbs;
