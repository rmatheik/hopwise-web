"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import useIsomorphicLayoutEffect from "../../hooks/useIsomorphicLayoutEffect.js";
import { enableTransitions, disableTransitions, onNextFrame } from "../../utilities/animation.js";
import { GlobalColorModeContext } from "./Theme.context.js";
const GlobalColorMode = (props) => {
    const { defaultMode, children } = props;
    const [mode, setMode] = React.useState(defaultMode || "light");
    const changeColorMode = React.useCallback((targetMode) => {
        document.documentElement.setAttribute("data-rs-color-mode", targetMode);
        setMode((prevMode) => {
            if (prevMode !== targetMode) {
                // Avoid components styles animating when switching to another color mode
                disableTransitions();
            }
            return targetMode;
        });
    }, []);
    useIsomorphicLayoutEffect(() => {
        onNextFrame(() => {
            enableTransitions();
        });
    }, [mode]);
    /**
     * In case color mode was set in html but was not provided to the provider - hydrate the state
     * This could happen if we're receiving the mode on the client but before React hydration
     */
    useIsomorphicLayoutEffect(() => {
        const nextColorMode = document.documentElement.getAttribute("data-rs-color-mode");
        if (nextColorMode)
            changeColorMode(nextColorMode);
    }, []);
    const value = React.useMemo(() => ({
        mode,
        setMode: changeColorMode,
        invertMode: () => {
            changeColorMode(mode === "light" ? "dark" : "light");
        },
    }), [mode, changeColorMode]);
    return (_jsx(GlobalColorModeContext.Provider, { value: value, children: children }));
};
export default GlobalColorMode;
