"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import { classNames } from "../../utilities/helpers.js";
import { focusableSelector } from "../../utilities/a11y/focus.js";
import ToastContainer from "./ToastContainer.js";
import ToastContext from "./Toast.context.js";
import s from "./Toast.module.css";
const ToastRegion = (props) => {
    const { position, nested } = props;
    const { queues, options } = React.useContext(ToastContext);
    const [inspecting, setInspecting] = React.useState(false);
    const ignoreHoverRef = React.useRef(false);
    const rootRef = React.useRef(null);
    const queue = queues[position];
    const { width, expanded } = (options === null || options === void 0 ? void 0 : options[position]) || {};
    const regionClassNames = classNames(s.region, s[`region--position-${position}`], nested && s["region--nested"]);
    const filteredLength = queue.filter((item) => item.status === "entered").length;
    let hiddenCount = 0;
    // If touch event was triggered â€“ ignore hover events
    const handleTouchStart = () => {
        ignoreHoverRef.current = true;
    };
    const handleClick = (e) => {
        let currentEl = e.target;
        let isFocusable = false;
        while (currentEl && currentEl !== rootRef.current && !isFocusable) {
            isFocusable = currentEl.matches(focusableSelector);
            currentEl = currentEl.parentElement;
        }
        // Change inspecting mode when clicking on static content
        if (!isFocusable) {
            setInspecting((prevInspecting) => !prevInspecting);
        }
        // Click is called last so we reset our hover events ignore
        ignoreHoverRef.current = false;
    };
    const handleMouseEnter = () => {
        if (ignoreHoverRef.current)
            return;
        setInspecting(true);
    };
    const handleMouseLeave = () => {
        if (ignoreHoverRef.current)
            return;
        setInspecting(false);
    };
    React.useEffect(() => {
        if (queue.length === 0)
            setInspecting(false);
    }, [queue.length]);
    if (!queue.length)
        return null;
    return (
    // We only use onClick for touch devices since touchend is not supported
    // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
    _jsx("ul", { role: "region", "aria-live": "polite", className: regionClassNames, ref: rootRef, onTouchStart: handleTouchStart, onClick: handleClick, onMouseEnter: handleMouseEnter, onMouseLeave: handleMouseLeave, style: { width }, children: queue.map((data, index) => {
            const visibleIndex = filteredLength - index + hiddenCount - 1;
            if (data.status !== "entered")
                hiddenCount += 1;
            return (_jsx(ToastContainer, Object.assign({}, data, { index: visibleIndex, inspected: inspecting || !!expanded }), data.id));
        }) }));
};
export default ToastRegion;
