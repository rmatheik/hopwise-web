"use client";
import { createElement as _createElement } from "react";
import { jsxs as _jsxs, jsx as _jsx, Fragment as _Fragment } from "react/jsx-runtime";
import View from "../View/index.js";
import Button from "../Button/index.js";
import Icon from "../Icon/index.js";
import Theme from "../Theme/index.js";
import Text from "../Text/index.js";
import s from "./Toast.module.css";
const Toast = (props) => {
    const { size = "small", text, children, color = "inverted", icon, title, actionsSlot, startSlot, collapsed, className, attributes, } = props;
    let backgroundColor = color === "inverted" || color === "neutral" ? "elevation-overlay" : color;
    if (color === "neutral")
        backgroundColor = collapsed ? "neutral" : "elevation-overlay";
    const borderColor = color === "neutral" ? "neutral-faded" : "transparent";
    const textTagName = size === "small" ? "span" : "div";
    const isLarge = size === "large";
    let actions = [];
    if (actionsSlot) {
        actions = Array.isArray(actionsSlot) ? actionsSlot : [actionsSlot];
    }
    const textContent = (title || text) && (_jsxs(_Fragment, { children: [title && (_jsxs(Text, { variant: "body-3", weight: "bold", as: textTagName, children: [title, " "] })), _jsx(Text, { variant: "body-3", as: textTagName, children: text })] }));
    const toastNode = (_jsxs(View, { backgroundColor: backgroundColor, borderColor: borderColor, padding: 4, borderRadius: "medium", animated: true, direction: "row", gap: 3, align: isLarge ? "start" : "center", className: [s.toast, className], attributes: attributes, children: [icon && _jsx(Icon, { size: 5, svg: icon, className: s.icon }), startSlot && !icon && _jsx(View.Item, { children: startSlot }), _jsx(View.Item, { grow: true, children: _jsxs(View, { direction: isLarge ? "column" : "row", align: isLarge ? "start" : "center", gap: 3, children: [_jsx(View.Item, { grow: true, children: (textContent && children) || size !== "small" ? (_jsxs(View, { gap: 0.5, children: [textContent, children && _jsx(View, { gap: 3, children: children })] })) : (textContent || children) }), actions.length && (_jsx(View, { direction: "row", align: "center", gap: 2, children: actions.map((slot, index) => {
                                const isPrimary = size === "large" ? index === 0 : index === actions.length - 1;
                                const primaryColor = color === "neutral" || color === "inverted" ? "neutral" : "white";
                                const defaultProps = {
                                    variant: isPrimary ? "solid" : "ghost",
                                    size: "small",
                                    color: isPrimary ? primaryColor : "inherit",
                                    elevated: color !== "neutral",
                                };
                                if (slot.type === Button) {
                                    return _createElement(Button, Object.assign({}, defaultProps, slot.props, { key: index }));
                                }
                                else {
                                    return slot;
                                }
                            }) }))] }) })] }));
    if (color === "inverted") {
        return _jsx(Theme, { colorMode: "inverted", children: toastNode });
    }
    return toastNode;
};
export default Toast;
