"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from "react";
import { classNames } from "../../utilities/helpers.js";
import useIsomorphicLayoutEffect from "../../hooks/useIsomorphicLayoutEffect.js";
import HiddenInput from "../_private/HiddenInput/index.js";
import { useFormControl } from "../FormControl/index.js";
import { useCheckboxGroup } from "../CheckboxGroup/index.js";
import Icon from "../Icon/index.js";
import IconCheckmark from "../../icons/Checkmark.js";
import s from "./Checkbox.module.css";
const Checkbox = (props) => {
    var _a;
    const { children, value, onChange, onFocus, onBlur, indeterminate, className, attributes, inputAttributes, } = props;
    const checkboxGroup = useCheckboxGroup();
    const formControl = useFormControl();
    const hasError = (formControl === null || formControl === void 0 ? void 0 : formControl.hasError) || props.hasError || (checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.hasError);
    const disabled = (formControl === null || formControl === void 0 ? void 0 : formControl.disabled) || props.disabled || (checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.disabled);
    const checked = checkboxGroup ? (_a = checkboxGroup.value) === null || _a === void 0 ? void 0 : _a.includes(value) : props.checked;
    const defaultChecked = checkboxGroup ? undefined : props.defaultChecked;
    const name = checkboxGroup ? checkboxGroup.name : props.name;
    const inputRef = React.useRef(null);
    const rootClassName = classNames(s.root, className, hasError && s["--error"], disabled && s["--disabled"]);
    const handleChange = (event) => {
        if (!name)
            return;
        const { checked } = event.target;
        const changeArgs = { name, value, checked, event };
        if (onChange)
            onChange(changeArgs);
        if (checkboxGroup === null || checkboxGroup === void 0 ? void 0 : checkboxGroup.onChange)
            checkboxGroup.onChange(changeArgs);
    };
    useIsomorphicLayoutEffect(() => {
        inputRef.current.indeterminate = indeterminate || false;
    }, [indeterminate, checked]);
    return (_jsxs("label", Object.assign({}, attributes, { className: rootClassName, children: [_jsxs("span", { className: s.field, children: [_jsx(HiddenInput, { className: s.input, type: "checkbox", checked: checked, defaultChecked: defaultChecked, name: name, disabled: disabled, value: value, onChange: handleChange, onFocus: onFocus, onBlur: onBlur, attributes: Object.assign(Object.assign({}, inputAttributes), { ref: inputRef }) }), _jsx("div", { className: s.decorator, children: _jsx(Icon, { svg: IconCheckmark, className: s.icon }) })] }), children && _jsx("span", { className: s.text, children: children })] })));
};
export default Checkbox;
