"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import Button from "../Button/index.js";
import View from "../View/index.js";
import IconChevronLeft from "../../icons/ChevronLeft.js";
import IconChevronRight from "../../icons/ChevronRight.js";
import { range } from "../../utilities/helpers.js";
import s from "./Pagination.module.css";
const PaginationControlled = (props) => {
    const { total, page: selectedPage = 1, onChange, pageAriaLabel, previousAriaLabel, nextAriaLabel, className, attributes, } = props;
    const selectionRadius = 1;
    const edgeRadius = 1;
    const pages = [];
    const hasHead = selectedPage - selectionRadius > edgeRadius + 2;
    const hasTail = selectedPage + selectionRadius < total - edgeRadius;
    /**
     * Calculate the amount of rendered pages + dots
     * Removing head or tail also removes their dots
     */
    let count = selectionRadius * 2 + 1;
    if (!hasHead)
        count += edgeRadius + 1;
    if (!hasTail)
        count += edgeRadius + 1;
    const selectionStart = hasHead
        ? Math.min(total - count + 1, Math.max(1, selectedPage - selectionRadius))
        : 1;
    const selectionEnd = hasTail ? Math.min(selectionStart + count - 1, total) : total;
    if (hasHead)
        pages.push(...range(1, edgeRadius), null);
    pages.push(...range(selectionStart, selectionEnd));
    if (hasTail)
        pages.push(null, ...range(total - edgeRadius + 1, total));
    const changePage = (page) => {
        const resolvedValue = Math.min(total, Math.max(1, page));
        onChange === null || onChange === void 0 ? void 0 : onChange({ page: resolvedValue });
    };
    return (_jsxs(View, { direction: "row", align: "center", gap: 1, className: className, attributes: attributes, children: [_jsx(Button, { variant: "ghost", size: "small", icon: IconChevronLeft, onClick: () => changePage(selectedPage - 1), disabled: selectedPage === 1, attributes: { "aria-label": previousAriaLabel } }), pages.map((page, index) => {
                if (page === null) {
                    return (_jsx(View, { width: 7, align: "center", children: "..." }, `dots-${index}`));
                }
                return (_jsx(Button, { size: "small", variant: page === selectedPage ? "solid" : "ghost", color: page === selectedPage ? "primary" : "neutral", onClick: () => changePage(page), attributes: {
                        "aria-label": pageAriaLabel === null || pageAriaLabel === void 0 ? void 0 : pageAriaLabel({ page }),
                        "aria-current": page === selectedPage,
                    }, className: s.page, children: page }, index));
            }), _jsx(Button, { variant: "ghost", size: "small", className: s.page, icon: IconChevronRight, onClick: () => changePage(selectedPage + 1), disabled: selectedPage === total, attributes: { "aria-label": nextAriaLabel } })] }));
};
export default PaginationControlled;
