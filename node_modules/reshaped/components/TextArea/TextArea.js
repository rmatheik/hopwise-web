"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import { classNames, responsiveClassNames } from "../../utilities/helpers.js";
import { useFormControl } from "../FormControl/index.js";
import Aligner from "../_private/Aligner/index.js";
import useElementId from "../../hooks/useElementId.js";
import s from "./TextArea.module.css";
const TextArea = (props) => {
    var _a, _b;
    const { onChange, onFocus, onBlur, name, value, defaultValue, placeholder, size = "medium", variant = "outline", resize, className, attributes, } = props;
    const [autogrowValue, setAutogrowValue] = React.useState(value || defaultValue || "");
    const formControl = useFormControl();
    const id = useElementId(props.id);
    const inputId = ((_a = formControl === null || formControl === void 0 ? void 0 : formControl.attributes) === null || _a === void 0 ? void 0 : _a.id) || ((_b = props.inputAttributes) === null || _b === void 0 ? void 0 : _b.id) || id;
    const disabled = (formControl === null || formControl === void 0 ? void 0 : formControl.disabled) || props.disabled;
    const hasError = (formControl === null || formControl === void 0 ? void 0 : formControl.hasError) || props.hasError;
    const inputAttributes = Object.assign(Object.assign({}, props.inputAttributes), formControl === null || formControl === void 0 ? void 0 : formControl.attributes);
    const rootClassName = classNames(s.root, size && responsiveClassNames(s, "--size", size), hasError && s["--status-error"], disabled && s["--disabled"], variant && s[`--variant-${variant}`], resize !== undefined && s[`--resize-${resize}`], className);
    const handleChange = (event) => {
        const nextValue = event.target.value;
        onChange === null || onChange === void 0 ? void 0 : onChange({ name, value: nextValue, event });
        if (resize === "auto" && typeof value !== "string") {
            setAutogrowValue(nextValue);
        }
    };
    React.useEffect(() => {
        if (typeof value !== "string" || resize !== "auto")
            return;
        setAutogrowValue(value);
    }, [value, resize]);
    return (_jsx("div", Object.assign({}, attributes, { "data-rs-aligner-target": true, className: rootClassName, "data-rs-textarea-value": autogrowValue, children: _jsx("textarea", Object.assign({ rows: 3 }, inputAttributes, { className: s.input, disabled: disabled, name: name, placeholder: placeholder, value: value, defaultValue: defaultValue, onChange: handleChange, onFocus: onFocus || (inputAttributes === null || inputAttributes === void 0 ? void 0 : inputAttributes.onFocus), onBlur: onBlur || (inputAttributes === null || inputAttributes === void 0 ? void 0 : inputAttributes.onBlur), id: inputId })) })));
};
TextArea.Aligner = Aligner;
export default TextArea;
