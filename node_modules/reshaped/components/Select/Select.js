"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React from "react";
import Icon from "../Icon/index.js";
import { useFormControl } from "../FormControl/index.js";
import Actionable from "../Actionable/index.js";
import Text from "../Text/index.js";
import IconArrow from "../../icons/ChevronVertical.js";
import { classNames, responsiveClassNames, responsivePropDependency } from "../../utilities/helpers.js";
import useElementId from "../../hooks/useElementId.js";
import s from "./Select.module.css";
const Select = (props) => {
    var _a, _b;
    const { onChange, onClick, onFocus, onBlur, name, value, defaultValue, placeholder, options, children, icon, startSlot, size = "medium", variant = "outline", className, attributes, } = props;
    const [empty, setEmpty] = React.useState(value === undefined ? !defaultValue : !value);
    const formControl = useFormControl();
    const id = useElementId(props.id);
    const inputId = ((_a = formControl === null || formControl === void 0 ? void 0 : formControl.attributes) === null || _a === void 0 ? void 0 : _a.id) || ((_b = props.inputAttributes) === null || _b === void 0 ? void 0 : _b.id) || id;
    const disabled = (formControl === null || formControl === void 0 ? void 0 : formControl.disabled) || props.disabled;
    const hasError = (formControl === null || formControl === void 0 ? void 0 : formControl.hasError) || props.hasError;
    const inputAttributes = Object.assign(Object.assign({}, props.inputAttributes), formControl === null || formControl === void 0 ? void 0 : formControl.attributes);
    const rootClassName = classNames(s.root, className, size && responsiveClassNames(s, "--size", size), hasError && s["--status-error"], disabled && s["--disabled"], empty && options && s["--placeholder"], variant && s[`--variant-${variant}`]);
    const handleChange = (event) => {
        const nextValue = event.target.value;
        // Uncontrolled placeholder
        if (value === undefined)
            setEmpty(!nextValue);
        if (!onChange)
            return;
        onChange({ name, value: nextValue, event });
    };
    // Controlled placeholder
    React.useEffect(() => {
        if (value === undefined)
            return;
        setEmpty(!value);
    }, [value]);
    const startContent = (startSlot || icon) && (_jsx("div", { className: s.slot, children: icon ? (_jsx(Icon, { size: responsivePropDependency(size, (size) => {
                if (size === "large")
                    return 5;
                if (size === "xlarge")
                    return 6;
                return 4;
            }), svg: icon })) : (startSlot) }));
    return (_jsxs("div", Object.assign({}, attributes, { className: rootClassName, children: [options ? (_jsxs(_Fragment, { children: [startContent, _jsxs("select", Object.assign({}, inputAttributes, { className: s.input, disabled: disabled, name: name, value: value, defaultValue: defaultValue, onChange: handleChange, onFocus: onFocus || (inputAttributes === null || inputAttributes === void 0 ? void 0 : inputAttributes.onFocus), onBlur: onBlur || (inputAttributes === null || inputAttributes === void 0 ? void 0 : inputAttributes.onBlur), id: inputId, children: [placeholder && _jsx("option", { value: "", children: placeholder }), options.map((option) => (_jsx("option", { value: option.value, disabled: option.disabled, children: option.label }, option.value)))] }))] })) : (_jsxs(_Fragment, { children: [_jsxs(Actionable, { className: s.input, disabled: disabled, onClick: onClick, attributes: Object.assign(Object.assign({}, inputAttributes), { onFocus: onFocus || (inputAttributes === null || inputAttributes === void 0 ? void 0 : inputAttributes.onFocus), onBlur: onBlur || (inputAttributes === null || inputAttributes === void 0 ? void 0 : inputAttributes.onBlur) }), children: [startContent, children || (placeholder ? _jsx(Text, { color: "neutral-faded", children: placeholder }) : null)] }), _jsx("input", { type: "hidden", value: value, name: name })] })), _jsx("div", { className: s.arrow, children: _jsx(Icon, { svg: IconArrow, color: disabled ? "disabled" : "neutral-faded", size: responsivePropDependency(size, (size) => {
                        return size === "large" || size === "xlarge" ? 5 : 4;
                    }) }) })] })));
};
export default Select;
