import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from "react";
import { classNames, responsiveClassNames, responsivePropDependency } from "../../utilities/helpers.js";
import Actionable from "../Actionable/index.js";
import Icon from "../Icon/index.js";
import View from "../View/index.js";
import MenuItemAligner from "./MenuItemAligner.js";
import s from "./MenuItem.module.css";
const MenuItem = forwardRef((props, ref) => {
    const { icon, startSlot, endSlot, children, color = "primary", selected, disabled, onClick, href, size = "medium", roundedCorners, as, className, attributes, } = props;
    const rootClassNames = classNames(s.root, className, responsiveClassNames(s, "--size", size), responsiveClassNames(s, "--rounded-corners", roundedCorners), color && s[`--color-${color}`], selected && s["--selected"], disabled && s["--disabled"]);
    const gapSize = responsivePropDependency(size, (size) => (size === "large" ? 3 : 2));
    const iconSize = responsivePropDependency(size, (size) => (size === "large" ? 5 : 4));
    return (_jsx(Actionable, { disabled: disabled, className: rootClassNames, attributes: Object.assign(Object.assign({}, attributes), { "data-rs-aligner-target": true }), onClick: onClick, href: href, ref: ref, as: as, children: _jsxs(View, { direction: "row", gap: gapSize, align: "center", children: [icon && _jsx(Icon, { svg: icon, className: s.icon, size: iconSize }), !icon && startSlot, children && (_jsx(View.Item, { grow: true, className: s.content, children: children })), endSlot] }) }));
});
MenuItem.Aligner = MenuItemAligner;
export default MenuItem;
