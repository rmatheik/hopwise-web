"use client";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import Popover from "../Popover/index.js";
import MenuItem from "../MenuItem/index.js";
import Icon from "../Icon/index.js";
import { useFlyoutContext } from "../_private/Flyout/index.js";
import IconChevronRight from "../../icons/ChevronRight.js";
import useHotkeys from "../../hooks/useHotkeys.js";
import useRTL from "../../hooks/useRTL.js";
import { classNames } from "../../utilities/helpers.js";
import * as keys from "../../constants/keys.js";
import s from "./DropdownMenu.module.css";
const DropdownMenuSubContext = React.createContext(null);
const DropdownMenu = (props) => {
    const { children, position = "bottom-start", triggerType = "click", trapFocusMode = "action-menu" } = props, popoverProps = __rest(props, ["children", "position", "triggerType", "trapFocusMode"]);
    return (_jsx(Popover, Object.assign({}, popoverProps, { position: position, padding: 0, trapFocusMode: trapFocusMode, triggerType: triggerType, children: children })));
};
const DropdownMenuContent = (props) => {
    const { children, attributes, className } = props;
    const { flyout } = useFlyoutContext();
    const subMenuInstance = React.useContext(DropdownMenuSubContext);
    const [rtl] = useRTL();
    const { ref } = useHotkeys({
        [rtl ? keys.RIGHT : keys.LEFT]: () => {
            var _a;
            (_a = subMenuInstance === null || subMenuInstance === void 0 ? void 0 : subMenuInstance.current) === null || _a === void 0 ? void 0 : _a.close();
        },
    }, [subMenuInstance === null || subMenuInstance === void 0 ? void 0 : subMenuInstance.current], {
        disabled: flyout.status === "idle",
    });
    const contentClassName = classNames(s.menu, className);
    return (_jsx(Popover.Content, { className: contentClassName, attributes: Object.assign(Object.assign({}, attributes), { ref }), children: children }));
};
const DropdownMenuSection = (props) => {
    const { children } = props;
    return (_jsx("div", { className: s.section, role: "group", children: children }));
};
const DropdownMenuItem = (props) => {
    const { onClick } = props;
    const { handleClose } = useFlyoutContext();
    const handleClick = (e) => {
        if (handleClose)
            handleClose({ closeParents: true });
        if (onClick)
            onClick(e);
    };
    return (_jsx(MenuItem, Object.assign({}, props, { roundedCorners: true, className: s.item, attributes: Object.assign({ role: "menuitem" }, props.attributes), onClick: handleClick })));
};
const DropdownMenuSubMenu = (props) => {
    const { children } = props;
    const dropdownMenuRef = React.useRef();
    return (_jsx(DropdownMenuSubContext.Provider, { value: dropdownMenuRef, children: _jsx(DropdownMenu, { triggerType: "hover", position: "end-top", contentGap: 0.5, instanceRef: dropdownMenuRef, children: children }) }));
};
const DropdownMenuSubTriggerItem = (props) => {
    const { children, attributes } = props, menuItemProps = __rest(props, ["children", "attributes"]);
    const subMenuInstance = React.useContext(DropdownMenuSubContext);
    const [rtl] = useRTL();
    const { ref } = useHotkeys({
        [rtl ? keys.LEFT : keys.RIGHT]: () => {
            var _a;
            (_a = subMenuInstance === null || subMenuInstance === void 0 ? void 0 : subMenuInstance.current) === null || _a === void 0 ? void 0 : _a.open();
        },
    }, [], { ref: attributes === null || attributes === void 0 ? void 0 : attributes.ref, preventDefault: true });
    return (_jsx(DropdownMenuItem, Object.assign({}, menuItemProps, { attributes: Object.assign(Object.assign({}, attributes), { ref }), endSlot: _jsx(Icon, { autoWidth: true, svg: IconChevronRight, className: s.arrow }), children: children })));
};
const DropdownMenuSubTrigger = (props) => {
    const { children } = props;
    return (_jsx(DropdownMenu.Trigger, { children: (attributes) => (_jsx(DropdownMenuSubTriggerItem, { attributes: attributes, children: children })) }));
};
DropdownMenu.Trigger = Popover.Trigger;
DropdownMenu.Content = DropdownMenuContent;
DropdownMenu.Section = DropdownMenuSection;
DropdownMenu.Item = DropdownMenuItem;
DropdownMenu.SubMenu = DropdownMenuSubMenu;
DropdownMenu.SubTrigger = DropdownMenuSubTrigger;
export default DropdownMenu;
