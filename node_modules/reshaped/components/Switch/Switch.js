"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { classNames } from "../../utilities/helpers.js";
import { useFormControl } from "../FormControl/index.js";
import Text from "../Text/index.js";
import useElementId from "../../hooks/useElementId.js";
import s from "./Switch.module.css";
const Switch = (props) => {
    var _a;
    const { children, name, checked, size, reversed, defaultChecked, onChange, onFocus, onBlur, className, attributes, } = props;
    const rootClassNames = classNames(s.root, size && s[`root--size-${size}`], reversed && s["root--reversed"], className);
    const formControl = useFormControl();
    const id = useElementId((formControl === null || formControl === void 0 ? void 0 : formControl.attributes.id) || props.id || ((_a = props.inputAttributes) === null || _a === void 0 ? void 0 : _a.id));
    const inputAttributes = Object.assign(Object.assign({}, props.inputAttributes), formControl === null || formControl === void 0 ? void 0 : formControl.attributes);
    const disabled = (formControl === null || formControl === void 0 ? void 0 : formControl.disabled) || props.disabled;
    const handleChange = (event) => {
        if (!onChange)
            return;
        onChange({
            name,
            event,
            checked: event.target.checked,
        });
    };
    return (_jsxs("label", Object.assign({}, attributes, { className: rootClassNames, children: [_jsx("input", Object.assign({ type: "checkbox" }, inputAttributes, { className: s.input, name: name, checked: checked, defaultChecked: defaultChecked, disabled: disabled, onChange: handleChange, onFocus: onFocus || (inputAttributes === null || inputAttributes === void 0 ? void 0 : inputAttributes.onFocus), onBlur: onBlur || (inputAttributes === null || inputAttributes === void 0 ? void 0 : inputAttributes.onBlur), id: id })), _jsx("span", { className: s.area, "aria-hidden": "true", children: _jsx("span", { className: s.thumb }) }), children && (_jsx(Text, { variant: "body-3", weight: "medium", children: children }))] })));
};
export default Switch;
