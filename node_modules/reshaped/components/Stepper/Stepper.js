import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from "react";
import { responsivePropDependency } from "../../utilities/helpers.js";
import Expandable from "../_private/Expandable/index.js";
import View from "../View/index.js";
import Text from "../Text/index.js";
import Divider from "../Divider/index.js";
import Icon from "../Icon/index.js";
import Hidden from "../Hidden/index.js";
import IconCheckmark from "../../icons/Checkmark.js";
import s from "./Stepper.module.css";
const StepperItemPrivate = (props) => {
    const { title, subtitle, children, direction, className, attributes, labelDisplay, step, completed, active, last, } = props;
    const labelHidden = labelDisplay && responsivePropDependency(labelDisplay, (value) => value === "hidden");
    const labelNode = (_jsx(View, { gap: 3, grow: true, children: _jsxs(View.Item, { children: [_jsx(Text, { variant: "body-3", weight: "medium", children: title }), _jsx(Text, { variant: "caption-1", color: "neutral-faded", children: subtitle })] }) }));
    return (_jsxs(View, { children: [_jsxs(View, { attributes: attributes, className: className, direction: "row", gap: 2, align: "center", position: "static", children: [_jsxs(View.Item, { children: [_jsx(View, { align: "center", justify: "center", backgroundColor: active || completed ? "primary" : "neutral-faded", borderColor: active || completed ? undefined : "neutral-faded", borderRadius: "circular", as: "span", width: 8, height: 8, zIndex: 5, children: _jsx(Text, { variant: "body-3", weight: active ? "bold" : "medium", children: completed ? _jsx(Icon, { svg: IconCheckmark, size: 4 }) : step }) }), direction === "column" && !last && _jsx(Divider, { vertical: true, className: s.verticalDivider })] }), labelDisplay ? _jsx(Hidden, { hide: labelHidden, children: labelNode }) : labelNode] }), direction === "column" && children && (_jsx(Expandable, { active: active, children: _jsx(View, { paddingStart: 10, paddingTop: 2, children: children }) }))] }));
};
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const StepperItem = (_) => null;
const Stepper = (props) => {
    const { children, direction = "row", activeId, labelDisplay, className, attributes } = props;
    const vertical = direction === "column";
    const length = React.Children.count(children);
    return (_jsx(View, { attributes: attributes, direction: direction, align: vertical ? "stretch" : "center", className: className, gap: 3, wrap: false, children: React.Children.map(children, (child, index) => {
            const itemId = child.props.id || `${index}`;
            return (_jsxs(React.Fragment, { children: [_jsx(StepperItemPrivate, Object.assign({}, child.props, { id: child.props.id || `${index}`, active: (activeId === null || activeId === void 0 ? void 0 : activeId.toString()) === itemId, step: index + 1, last: index === length - 1, direction: direction, labelDisplay: labelDisplay })), !vertical && index < length - 1 && (_jsx(View, { grow: true, children: _jsx(Divider, {}) }))] }, index));
        }) }));
};
Stepper.Item = StepperItem;
export default Stepper;
