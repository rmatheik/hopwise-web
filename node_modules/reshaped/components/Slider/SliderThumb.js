"use client";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import React from "react";
import { classNames } from "../../utilities/helpers.js";
import Theme from "../Theme/index.js";
import Text from "../Text/index.js";
import { getPrecision } from "./Slider.utilities.js";
import s from "./Slider.module.css";
const SliderThumb = (props, ref) => {
    const { name, value, disabled, active, position, max, min, step, onChange, onDragStart, renderValue, tooltipRef, } = props;
    const id = React.useId();
    const thumbClassNames = classNames(s.thumb, active && s["thumb--active"]);
    const precision = getPrecision(step);
    const tooltipValue = renderValue ? renderValue({ value }) : value.toFixed(precision);
    const handleChange = (e) => {
        onChange(+e.target.value);
    };
    return (_jsxs(_Fragment, { children: [_jsx("input", { className: s.input, type: "range", name: name, value: value, onChange: handleChange, disabled: disabled, max: max, min: min, step: step, "aria-labelledby": id }), _jsx("div", { ref: ref, className: thumbClassNames, onMouseDown: onDragStart, onTouchStart: onDragStart, style: { insetInlineStart: `${position}%` }, id: id, "aria-hidden": "true", children: _jsx(Theme, { colorMode: "inverted", children: _jsx(Text, { variant: "caption-1", weight: "medium", className: s.tooltip, attributes: { ref: tooltipRef }, children: tooltipValue }) }) })] }));
};
export default React.forwardRef(SliderThumb);
