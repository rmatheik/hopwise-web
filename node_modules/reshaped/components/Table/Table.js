import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import { classNames, responsiveVariables } from "../../utilities/helpers.js";
import getWidthStyles from "../../styles/width/index.js";
import getMinWidthStyles from "../../styles/minWidth/index.js";
import s from "./Table.module.css";
const TableCellPrivate = (props) => {
    const { minWidth, rowSpan, colSpan, align, verticalAlign, tagName: TagName, padding, paddingInline, paddingBlock, children, attributes, } = props;
    const width = props.width === "auto" ? "0px" : props.width;
    const widthStyles = getWidthStyles(width);
    const minWidthStyles = getMinWidthStyles(minWidth || width);
    const headingClassNames = classNames(s.cell, widthStyles === null || widthStyles === void 0 ? void 0 : widthStyles.classNames, minWidthStyles === null || minWidthStyles === void 0 ? void 0 : minWidthStyles.classNames, (width === 0 || width === "0px") && s["cell--width-auto"], align && s[`cell--align-${align}`], verticalAlign && s[`cell--valign-${verticalAlign}`]);
    const headingStyle = Object.assign(Object.assign(Object.assign(Object.assign({}, widthStyles === null || widthStyles === void 0 ? void 0 : widthStyles.variables), minWidthStyles === null || minWidthStyles === void 0 ? void 0 : minWidthStyles.variables), responsiveVariables("--rs-table-p-vertical", paddingBlock !== null && paddingBlock !== void 0 ? paddingBlock : padding)), responsiveVariables("--rs-table-p-horizontal", paddingInline !== null && paddingInline !== void 0 ? paddingInline : padding));
    return (_jsx(TagName, Object.assign({}, attributes, { className: headingClassNames, rowSpan: rowSpan, colSpan: colSpan, style: headingStyle, children: children })));
};
const TableCell = (props) => {
    return _jsx(TableCellPrivate, Object.assign({}, props, { tagName: "td" }));
};
const TableHeading = (props) => {
    return _jsx(TableCellPrivate, Object.assign({}, props, { tagName: "th" }));
};
const TableRow = (props) => {
    const { highlighted, children, attributes } = props;
    const rowClassNames = classNames(s.row, highlighted && s["--row-highlighted"]);
    return (_jsx("tr", Object.assign({}, attributes, { className: rowClassNames, children: children })));
};
const TableBody = (props) => {
    return _jsx("tbody", { children: props.children });
};
const TableHead = (props) => {
    return _jsx("thead", { children: props.children });
};
const Table = (props) => {
    const { children, border, columnBorder, className, attributes } = props;
    const rootClassNames = classNames(s.root, className, border && s["--border-outer"], columnBorder && s["--border-column"]);
    const [firstChild] = React.Children.toArray(children);
    return (_jsx("div", Object.assign({}, attributes, { className: rootClassNames, children: _jsx("table", { className: s.table, children: React.isValidElement(firstChild) &&
                (firstChild.type === TableBody || firstChild.type === TableHead) ? (children) : (_jsx(TableBody, { children: children })) }) })));
};
Table.Cell = TableCell;
Table.Heading = TableHeading;
Table.Row = TableRow;
Table.Body = TableBody;
Table.Head = TableHead;
export default Table;
