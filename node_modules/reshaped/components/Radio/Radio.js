"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { classNames } from "../../utilities/helpers.js";
import HiddenInput from "../_private/HiddenInput/index.js";
import { useRadioGroup } from "../RadioGroup/index.js";
import { useFormControl } from "../FormControl/index.js";
import s from "./Radio.module.css";
const Radio = (props) => {
    const { children, value, onChange, onFocus, onBlur, className, attributes, inputAttributes } = props;
    const formControl = useFormControl();
    const radioGroup = useRadioGroup();
    const hasError = (formControl === null || formControl === void 0 ? void 0 : formControl.hasError) || props.hasError || (radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.hasError);
    const disabled = (formControl === null || formControl === void 0 ? void 0 : formControl.disabled) || props.disabled || (radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.disabled);
    const checked = radioGroup ? radioGroup.value === value : props.checked;
    const defaultChecked = radioGroup ? undefined : props.defaultChecked;
    const name = radioGroup ? radioGroup.name : props.name;
    const rootClassName = classNames(s.root, className, hasError && s["--error"], disabled && s["--disabled"]);
    const handleChange = (event) => {
        if (!name)
            return;
        const { checked } = event.target;
        const changeArgs = { name, value, checked, event };
        if (onChange)
            onChange(changeArgs);
        if (radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.onChange)
            radioGroup.onChange(changeArgs);
    };
    return (_jsxs("label", Object.assign({}, attributes, { className: rootClassName, children: [_jsxs("span", { className: s.field, children: [_jsx(HiddenInput, { className: s.input, type: "radio", checked: checked, defaultChecked: defaultChecked, name: name, disabled: disabled, value: value, onChange: handleChange, onFocus: onFocus, onBlur: onBlur, attributes: inputAttributes }), _jsx("div", { className: s.decorator })] }), children && _jsx("span", { className: s.text, children: children })] })));
};
export default Radio;
