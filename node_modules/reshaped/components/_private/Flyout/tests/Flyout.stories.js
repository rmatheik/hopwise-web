var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from "react";
import { Example } from "../../../../utilities/storybook/index.js";
import View from "../../../View/index.js";
import Theme from "../../../Theme/index.js";
import Button from "../../../Button/index.js";
import Flyout from "../index.js";
export default { title: "Utilities/Internal/Flyout" };
const Demo = (props) => {
    const { position = "bottom-start", children } = props, rest = __rest(props, ["position", "children"]);
    return (<Flyout triggerType="click" position={position} {...rest}>
			<Flyout.Trigger>
				{(attributes) => <Button attributes={attributes}>{position}</Button>}
			</Flyout.Trigger>
			<Flyout.Content>
				<div style={{
            background: "var(--rs-color-background-elevation-overlay)",
            padding: "var(--rs-unit-x4)",
            height: 100,
            width: 160,
            borderRadius: "var(--rs-unit-radius-medium)",
            border: "1px solid var(--rs-color-border-neutral-faded)",
            boxSizing: "border-box",
        }}>
					{children || "Content"}
				</div>
			</Flyout.Content>
		</Flyout>);
};
export const positions = () => (<div style={{ paddingTop: 200 }}>
		<View gap={3} direction="row">
			<Demo position="bottom-start"/>
			<Demo position="bottom-end"/>
			<Demo position="bottom"/>

			<Demo position="top-start"/>
			<Demo position="top-end"/>
			<Demo position="top"/>

			<Demo position="end"/>
			<Demo position="end-top"/>
			<Demo position="end-bottom"/>

			<Demo position="start"/>
			<Demo position="start-top"/>
			<Demo position="start-bottom"/>
		</View>
	</div>);
export const dynamicPosition = () => (<div style={{ position: "absolute", top: 0, left: "50%" }}>
		<Demo position="top"/>
	</div>);
export const modeDialogClick = () => (<Demo position="bottom-start" trapFocusMode="dialog">
		<button type="button">Item 1</button>
		<button type="button">Item 2</button>
		<button type="button">Close</button>
	</Demo>);
export const modeActionMenuClick = () => (<Demo position="bottom-start" trapFocusMode="action-menu">
		<button type="button">Item 1</button>
		<button type="button">Item 2</button>
		<button type="button">Close</button>
	</Demo>);
export const modeContentMenuClick = () => (<Demo position="bottom-start" trapFocusMode="content-menu">
		<button type="button">Item 1</button>
		<button type="button">Item 2</button>
		<button type="button">Close</button>
	</Demo>);
export const modeDialogHover = () => (<Demo position="bottom-start" trapFocusMode="dialog" triggerType="hover">
		<button type="button">Item 1</button>
		<button type="button">Item 2</button>
		<button type="button">Close</button>
	</Demo>);
export const modeActionMenuHover = () => (<Demo position="bottom-start" trapFocusMode="action-menu" triggerType="hover">
		<button type="button">Item 1</button>
		<button type="button">Item 2</button>
		<button type="button">Close</button>
	</Demo>);
export const modeContentMenuHover = () => (<Demo position="bottom-start" trapFocusMode="content-menu" triggerType="hover">
		<button type="button">Item 1</button>
		<button type="button">Item 2</button>
		<button type="button">Close</button>
	</Demo>);
export const testWidthOverflowOnMobile = () => (<Demo position="bottom-start" width={600}>
		Should work on mobile
		<button type="button">Item 1</button>
		<button type="button">Item 2</button>
		<button type="button">Close</button>
	</Demo>);
export const testInsideScrollArea = () => (<Example>
		<Example.Item title="should move the content on area scroll">
			<div style={{ overflow: "scroll", height: 200, margin: 40, position: "relative" }}>
				<Flyout triggerType="click" position="bottom-start">
					<Flyout.Trigger>{(attributes) => <button {...attributes}>Foo</button>}</Flyout.Trigger>
					<Flyout.Content>
						<div style={{
        background: "var(--rs-color-background-elevation-overlay)",
        padding: "var(--rs-unit-x4)",
        height: 100,
        width: 160,
        borderRadius: "var(--rs-unit-radius-medium)",
        border: "1px solid var(--rs-color-border-neutral-faded)",
        boxSizing: "border-box",
    }}>
							{"Content"}
						</div>
					</Flyout.Content>
				</Flyout>
				<View height="300px" backgroundColor="neutral-faded"/>
			</div>
			<div style={{ height: 2000 }}/>
		</Example.Item>
	</Example>);
export const testInsideFixed = () => (<Example>
		<Example.Item title="should move the content on page scroll">
			<View position="fixed" insetTop={20} insetStart={0} insetEnd={0} backgroundColor="neutral-faded" padding={4}>
				<Flyout triggerType="click" position="bottom-start">
					<Flyout.Trigger>{(attributes) => <button {...attributes}>Foo</button>}</Flyout.Trigger>
					<Flyout.Content>
						<div style={{
        background: "var(--rs-color-background-elevation-overlay)",
        padding: "var(--rs-unit-x4)",
        height: 100,
        width: 160,
        borderRadius: "var(--rs-unit-radius-medium)",
        border: "1px solid var(--rs-color-border-neutral-faded)",
        boxSizing: "border-box",
    }}>
							{"Content"}
						</div>
					</Flyout.Content>
				</Flyout>
			</View>
			<div style={{ height: 2000 }}/>
		</Example.Item>
	</Example>);
export const widthTrigger = () => (<Flyout triggerType="click" width="trigger" position="bottom">
		<Flyout.Trigger>
			{(attributes) => <button {...attributes}>Trigger with long text</button>}
		</Flyout.Trigger>
		<Flyout.Content>
			<div style={{
        background: "var(--rs-color-background-elevation-overlay)",
        padding: "var(--rs-unit-x4)",
        borderRadius: "var(--rs-unit-radius-medium)",
        border: "1px solid var(--rs-color-border-neutral-faded)",
        boxSizing: "border-box",
    }}></div>
		</Flyout.Content>
	</Flyout>);
export const scopedTheming = () => (<View gap={3} align="start">
		<Button color="primary">Reshaped button</Button>
		<Theme name="twitter">
			<Flyout triggerType="click" active position="bottom-start">
				<Flyout.Trigger>
					{(attributes) => (<Button color="primary" attributes={attributes}>
							Twitter button
						</Button>)}
				</Flyout.Trigger>
				<Flyout.Content>
					<div style={{
        background: "var(--rs-color-background-elevation-overlay)",
        padding: 8,
        border: "1px solid var(--rs-color-border-neutral-faded)",
        boxSizing: "border-box",
    }}>
						<View gap={1}>
							<View.Item>Portal content, rendered in body</View.Item>
							<Button color="primary">Twitter button</Button>
						</View>
					</div>
				</Flyout.Content>
			</Flyout>
		</Theme>
	</View>);
