"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import { classNames } from "../../../utilities/helpers.js";
import useIsomorphicLayoutEffect from "../../../hooks/useIsomorphicLayoutEffect.js";
import Portal from "../Portal/index.js";
import { getClosestFlyoutTarget } from "../../../utilities/dom.js";
import { useFlyoutContext } from "./Flyout.context.js";
import s from "./Flyout.module.css";
const FlyoutContent = (props) => {
    const { children, className, attributes } = props;
    const { flyout, id, flyoutElRef, triggerElRef, handleTransitionEnd, handleTransitionStart, triggerType, handleMouseEnter, handleMouseLeave, handleContentMouseDown, handleContentMouseUp, contentGap, contentClassName, contentAttributes, trapFocusMode, width, } = useFlyoutContext();
    const { styles, status, position } = flyout;
    const [mounted, setMounted] = React.useState(false);
    useIsomorphicLayoutEffect(() => {
        setMounted(true);
    }, []);
    /**
     * transitionStart doesn't exist as a jsx event handler and needs to be handled with vanilla js
     */
    React.useEffect(() => {
        const el = flyoutElRef.current;
        if (!el)
            return;
        el.addEventListener("transitionstart", handleTransitionStart);
        return () => el.removeEventListener("transitionstart", handleTransitionStart);
    }, [handleTransitionStart, flyoutElRef, status]);
    if (status === "idle" || !mounted)
        return null;
    const contentClassNames = classNames(s.content, status === "visible" && s["--visible"], 
    // Animate after correct position has been assigned
    ["visible", "hidden"].includes(status) && s["--animated"], position && s[`--position-${position}`], width === "trigger" && s["--width-trigger"]);
    // className is applied to inner element because it has the transform and is treated like a real root element
    const innerClassNames = classNames(s.inner, className, contentClassName);
    let role;
    if (triggerType === "hover") {
        role = "tooltip";
    }
    else if (trapFocusMode === "dialog") {
        role = "dialog";
    }
    else if (trapFocusMode === "selection-menu") {
        role = "listbox";
    }
    else if (trapFocusMode === "action-menu") {
        role = "menu";
    }
    const content = (
    // eslint-disable-next-line jsx-a11y/no-static-element-interactions
    _jsx("div", { className: contentClassNames, style: Object.assign(Object.assign({}, styles), { "--rs-flyout-gap": contentGap }), ref: flyoutElRef, onTransitionEnd: handleTransitionEnd, onMouseEnter: triggerType === "hover" ? handleMouseEnter : undefined, onMouseLeave: triggerType === "hover" ? handleMouseLeave : undefined, onMouseDown: handleContentMouseDown, onTouchStart: handleContentMouseDown, onMouseUp: handleContentMouseUp, onTouchEnd: handleContentMouseUp, children: _jsx("div", Object.assign({ role: role }, attributes, { id: id, "aria-modal": triggerType === "click", style: contentAttributes === null || contentAttributes === void 0 ? void 0 : contentAttributes.style, className: innerClassNames, children: children })) }));
    const closestScrollable = getClosestFlyoutTarget(triggerElRef.current);
    return (_jsx(Portal, { targetRef: closestScrollable === document.body ? undefined : { current: closestScrollable }, children: content }));
};
export default FlyoutContent;
