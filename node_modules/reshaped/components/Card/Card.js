import { jsx as _jsx } from "react/jsx-runtime";
import { forwardRef } from "react";
import { classNames } from "../../utilities/helpers.js";
import Actionable from "../Actionable/index.js";
import s from "./Card.module.css";
import getRadiusStyles from "../../styles/radius/index.js";
import getBleedStyles from "../../styles/bleed/index.js";
import getPaddingStyles from "../../styles/padding/index.js";
import getHeightStyles from "../../styles/height/index.js";
const Card = forwardRef((props, ref) => {
    const { padding = 4 } = props;
    const { selected, elevated, bleed, height, onClick, href, children, className, attributes, 
    /**
     * Using any here to let TS save on type resolving, otherwise TS throws an error due to the type complexity
     * It still resolves the attributes correctly based on the tag
     */
    as: TagName = "div", } = props;
    const isActionable = !!href || !!onClick;
    const radiusStyles = getRadiusStyles("medium");
    const bleedStyles = getBleedStyles(bleed);
    const paddingStyles = getPaddingStyles(padding);
    const heightStyles = getHeightStyles(height);
    const rootClassNames = classNames(s.root, radiusStyles === null || radiusStyles === void 0 ? void 0 : radiusStyles.classNames, bleedStyles === null || bleedStyles === void 0 ? void 0 : bleedStyles.classNames, paddingStyles === null || paddingStyles === void 0 ? void 0 : paddingStyles.classNames, heightStyles === null || heightStyles === void 0 ? void 0 : heightStyles.classNames, isActionable && s["--actionable"], elevated && s["--elevated"], selected && s["--selected"], className);
    const style = Object.assign(Object.assign(Object.assign(Object.assign({}, attributes === null || attributes === void 0 ? void 0 : attributes.style), bleedStyles === null || bleedStyles === void 0 ? void 0 : bleedStyles.variables), paddingStyles === null || paddingStyles === void 0 ? void 0 : paddingStyles.variables), heightStyles === null || heightStyles === void 0 ? void 0 : heightStyles.variables);
    if (isActionable) {
        return (_jsx(Actionable, { className: rootClassNames, attributes: Object.assign(Object.assign({}, attributes), { style }), href: href, as: TagName, onClick: onClick, ref: ref, children: _jsx("span", { className: s.content, children: children }) }));
    }
    return (_jsx(TagName, Object.assign({}, attributes, { onClick: onClick, href: href, ref: ref, className: rootClassNames, style: style, children: _jsx("span", { className: s.content, children: children }) })));
});
export default Card;
