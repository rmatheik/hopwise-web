const DAYS_IN_WEEK = 7;
const FIRST_WEEK_DAY = 1;
/**
 * Return the ISO date format without the timezones adjustemnts
 */
export const getLocalISODate = (args) => {
    const { date } = args;
    return [
        date.getFullYear(),
        (date.getMonth() + 1).toString().padStart(2, "0"),
        date.getDate().toString().padStart(2, "0"),
    ].join("-");
};
const getNormalizedDay = (args) => {
    const { date, firstWeekDay = FIRST_WEEK_DAY } = args;
    const day = date.getDay();
    return day < firstWeekDay ? DAYS_IN_WEEK - day - firstWeekDay : day - firstWeekDay;
};
/**
 * Return an array of US weekday names for the calendar
 */
export const getWeekdayNames = (args) => {
    const { firstWeekDay = FIRST_WEEK_DAY, renderWeekDay } = args;
    const baseDate = new Date(2021, 1, firstWeekDay); // Starting from Sunday + firstWeekDay
    const weekdays = [];
    for (let i = firstWeekDay; i < firstWeekDay + DAYS_IN_WEEK; i++) {
        const weekday = renderWeekDay
            ? renderWeekDay({ weekDay: i, date: baseDate })
            : baseDate.toLocaleDateString("en-US", { weekday: "short" });
        weekdays.push(weekday.slice(0, 2));
        baseDate.setDate(baseDate.getDate() + 1);
    }
    return weekdays;
};
/**
 * Return an array of all month names
 */
export const getMonthNames = (args) => {
    const { renderMonthLabel } = args;
    return new Array(12).fill(null).map((_, i) => {
        const date = new Date(0, i);
        return renderMonthLabel
            ? renderMonthLabel({ month: i, date })
            : date.toLocaleString("default", { month: "short" });
    });
};
/**
 * Return an array of weeks based on the month passed to the function
 */
export const getMonthWeeks = (args) => {
    const { date, firstWeekDay } = args;
    const month = date.getMonth();
    const year = date.getFullYear();
    const weeks = [];
    const currentDate = new Date(year, month, 1);
    // Fill in the days if month starts in the middle of the week
    const firstDay = getNormalizedDay({ date: currentDate, firstWeekDay });
    if (firstDay !== 0)
        weeks.push(new Array(firstDay).fill(null));
    while (month === currentDate.getMonth()) {
        const day = getNormalizedDay({ date: currentDate, firstWeekDay });
        if (day === 0 || !weeks.length)
            weeks.push([]);
        weeks[weeks.length - 1].push(new Date(currentDate));
        currentDate.setDate(currentDate.getDate() + 1);
    }
    // Fill in the days if month ends in the middle of the week
    const lastDay = getNormalizedDay({ date: currentDate, firstWeekDay });
    if (lastDay !== 0)
        weeks[weeks.length - 1].push(...new Array(7 - lastDay).fill(null));
    return weeks;
};
export const getFocusableDates = (rootEl) => {
    return ((rootEl === null || rootEl === void 0 ? void 0 : rootEl.querySelectorAll("[data-rs-date]")) || []);
};
export const changeDate = (date, delta) => new Date(date.getFullYear(), date.getMonth(), date.getDate() + delta);
export const setMonthTo = (date, value) => {
    const resultDate = new Date(date);
    resultDate.setMonth(value);
    return resultDate;
};
export const setMonthToPrevious = (date) => {
    return setMonthTo(date, date.getMonth() - 1);
};
export const setMonthToNext = (date) => {
    return setMonthTo(date, date.getMonth() + 1);
};
export const setYearTo = (date, value) => {
    const resultDate = new Date(date);
    resultDate.setFullYear(value);
    return resultDate;
};
export const setYearToPrevious = (date) => {
    return setYearTo(date, date.getFullYear() - 1);
};
export const setYearToNext = (date) => {
    return setYearTo(date, date.getFullYear() + 1);
};
export const applyNavigationBounds = (args) => {
    const { date, min, max } = args;
    const currentMonth = date.getMonth();
    const currentYear = date.getFullYear();
    const prevMonthLastDate = new Date(currentYear, currentMonth, 0);
    const nextMonthFirstDate = setMonthToNext(date);
    nextMonthFirstDate.setDate(0);
    return {
        isFirstMonth: min && min > prevMonthLastDate,
        isLastMonth: max && max < nextMonthFirstDate,
    };
};
