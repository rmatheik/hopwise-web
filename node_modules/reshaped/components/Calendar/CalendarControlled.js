"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from "react";
import View from "../View/index.js";
import { onNextFrame } from "../../utilities/animation.js";
import { setMonthToPrevious, setMonthToNext, setMonthTo, setYearToNext, setYearToPrevious, applyNavigationBounds, } from "./Calendar.utils.js";
import useCalendarKeyboardNavigation from "./useCalendarKeyboardNavigation.js";
import CalendarMonth from "./CalendarMonth.js";
import CalendarYear from "./CalendarYear.js";
import CalendarControls from "./CalendarControls.js";
const CalendarControlled = (props) => {
    const { value, onChange, defaultMonth, min, max, range, firstWeekDay, renderMonthLabel, renderSelectedMonthLabel, renderWeekDay, previousMonthAriaLabel, previousYearAriaLabel, nextMonthAriaLabel, nextYearAriaLabel, monthSelectionAriaLabel, renderMonthAriaLabel, renderDateAriaLabel, } = props;
    const [selectionMode, setSelectionMode] = React.useState("date");
    const [monthDate, setMonthDate] = React.useState(defaultMonth || new Date());
    const [hoveredDate, setHoveredDate] = React.useState(null);
    const monthTitleRef = React.useRef(null);
    const prevSelectionModeRef = React.useRef(selectionMode);
    const bounds = applyNavigationBounds({ date: monthDate, min, max });
    const selectionRootRef = React.useRef(null);
    const handlePreviousClick = () => {
        if (selectionMode === "month") {
            setMonthDate((prev) => setYearToPrevious(prev));
            return;
        }
        setMonthDate((prev) => setMonthToPrevious(prev));
    };
    const handleNextClick = () => {
        if (selectionMode === "month") {
            setMonthDate((prev) => setYearToNext(prev));
            return;
        }
        setMonthDate((prev) => setMonthToNext(prev));
    };
    const handleMonthTitleClick = () => {
        setSelectionMode("month");
    };
    const handleMonthClick = (i) => {
        setMonthDate((prev) => setMonthTo(prev, i));
        setSelectionMode("date");
    };
    const handleDateHover = (date) => {
        setHoveredDate(date);
    };
    const handleDateHoverEnd = (date) => {
        if (hoveredDate && +hoveredDate === +date)
            setHoveredDate(null);
    };
    React.useEffect(() => {
        if (selectionMode === "date" && selectionMode !== prevSelectionModeRef.current) {
            onNextFrame(() => {
                var _a;
                (_a = monthTitleRef.current) === null || _a === void 0 ? void 0 : _a.focus();
            });
        }
        prevSelectionModeRef.current = selectionMode;
    }, [selectionMode]);
    useCalendarKeyboardNavigation({
        monthDate,
        rootRef: selectionRootRef,
        changeToNextMonth: handleNextClick,
        changeToPreviousMonth: handlePreviousClick,
        // Each row has 7 days in date selection and 3 months in month
        verticalDelta: selectionMode === "date" ? 7 : 3,
        min,
        max,
    });
    return (_jsxs(View, { gap: 2, children: [_jsx(CalendarControls, { renderSelectedMonthLabel: renderSelectedMonthLabel, monthDate: monthDate, selectionMode: selectionMode, isFirstMonth: bounds.isFirstMonth, isLastMonth: bounds.isLastMonth, monthTitleRef: monthTitleRef, onMonthTitleClick: handleMonthTitleClick, onNextClick: handleNextClick, onPreviousClick: handlePreviousClick, previousMonthAriaLabel: previousMonthAriaLabel, previousYearAriaLabel: previousYearAriaLabel, nextMonthAriaLabel: nextMonthAriaLabel, nextYearAriaLabel: nextYearAriaLabel, monthSelectionAriaLabel: monthSelectionAriaLabel }), _jsxs(View.Item, { attributes: { ref: selectionRootRef }, children: [selectionMode === "date" && (_jsx(CalendarMonth, { date: monthDate, value: value, onChange: onChange, min: min, max: max, range: range, firstWeekDay: firstWeekDay, hoveredDate: hoveredDate, onDateHover: handleDateHover, onDateHoverEnd: handleDateHoverEnd, renderWeekDay: renderWeekDay, renderDateAriaLabel: renderDateAriaLabel })), selectionMode === "month" && (_jsx(CalendarYear, { monthDate: monthDate, onMonthClick: handleMonthClick, renderMonthLabel: renderMonthLabel, renderMonthAriaLabel: renderMonthAriaLabel, min: min, max: max }))] })] }));
};
export default CalendarControlled;
