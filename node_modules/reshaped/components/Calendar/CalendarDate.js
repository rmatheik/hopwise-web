"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import Actionable from "../Actionable/index.js";
import { classNames } from "../../utilities/helpers.js";
import { getLocalISODate } from "./Calendar.utils.js";
import s from "./Calendar.module.css";
const CalendarDate = (props) => {
    const { date, startValue, endValue, isActiveStart, isActiveEnd, disabled, focusable, onChange, range, hoveredDate, onDateHover, onDateHoverEnd, renderAriaLabel, } = props;
    if (!date)
        return _jsx("td", { className: s.cell, "aria-hidden": "true" });
    const inRange = startValue &&
        startValue < date &&
        ((endValue && endValue > date) || (hoveredDate && !endValue && hoveredDate > date));
    const dateClassNames = classNames([
        s.cell,
        !range && isActiveStart && s["cell--active-single"],
        isActiveStart && s["cell--active-start"],
        (isActiveEnd ||
            (!endValue && isActiveStart && !(hoveredDate && startValue && hoveredDate > startValue))) &&
            s["cell--active-end"],
        inRange && s["cell--in-range"],
    ]);
    const handleClick = () => {
        if (!range) {
            onChange === null || onChange === void 0 ? void 0 : onChange({ value: date });
            return;
        }
        const bothDatesSelected = startValue && endValue;
        const noneDatesSelected = !startValue && !endValue;
        const selectingBeforeStart = startValue && date < startValue;
        const selectingStart = bothDatesSelected || noneDatesSelected || selectingBeforeStart;
        const start = selectingStart ? date : startValue;
        const end = !selectingStart ? date : null;
        onChange === null || onChange === void 0 ? void 0 : onChange({ value: { start, end } });
    };
    const handleMouseEnter = () => {
        onDateHover(date);
    };
    const handleMouseLeave = () => {
        onDateHoverEnd(date);
    };
    return (_jsx("td", { className: dateClassNames, role: disabled ? "presentation" : "gridcell", children: _jsx(Actionable, { fullWidth: true, insetFocus: true, className: s["cell-button"], disabled: disabled, onClick: handleClick, attributes: {
                role: "checkbox",
                tabIndex: focusable ? 0 : -1,
                "aria-hidden": disabled,
                "aria-label": renderAriaLabel
                    ? renderAriaLabel({ date })
                    : date.toLocaleDateString("en-us", { month: "long", day: "numeric", weekday: "long" }),
                "aria-checked": isActiveStart || isActiveEnd,
                "data-rs-date": getLocalISODate({ date }),
                onMouseEnter: handleMouseEnter,
                onMouseLeave: handleMouseLeave,
                onFocus: handleMouseEnter,
                onBlur: handleMouseLeave,
            }, children: date.getDate() }) }));
};
export default CalendarDate;
