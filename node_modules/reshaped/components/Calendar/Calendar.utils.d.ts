import type * as T from "./Calendar.types";
/**
 * Return the ISO date format without the timezones adjustemnts
 */
export declare const getLocalISODate: (args: {
    date: Date;
}) => string;
/**
 * Return an array of US weekday names for the calendar
 */
export declare const getWeekdayNames: (args: {
    firstWeekDay?: number;
    renderWeekDay: T.BaseProps["renderWeekDay"];
}) => string[];
/**
 * Return an array of all month names
 */
export declare const getMonthNames: (args: {
    renderMonthLabel: T.BaseProps["renderMonthLabel"];
}) => string[];
/**
 * Return an array of weeks based on the month passed to the function
 */
export declare const getMonthWeeks: (args: {
    date: Date;
    firstWeekDay?: number;
}) => (Date | null)[][];
export declare const getFocusableDates: (rootEl: HTMLElement | null) => HTMLButtonElement[];
export declare const changeDate: (date: Date, delta: number) => Date;
export declare const setMonthTo: (date: Date, value: number) => Date;
export declare const setMonthToPrevious: (date: Date) => Date;
export declare const setMonthToNext: (date: Date) => Date;
export declare const setYearTo: (date: Date, value: number) => Date;
export declare const setYearToPrevious: (date: Date) => Date;
export declare const setYearToNext: (date: Date) => Date;
export declare const applyNavigationBounds: (args: {
    date: Date;
    min?: Date;
    max?: Date;
}) => {
    isFirstMonth: boolean | undefined;
    isLastMonth: boolean | undefined;
};
