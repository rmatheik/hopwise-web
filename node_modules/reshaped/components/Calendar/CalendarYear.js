import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import Actionable from "../Actionable/index.js";
import { onNextFrame } from "../../utilities/animation.js";
import { getMonthNames } from "./Calendar.utils.js";
import s from "./Calendar.module.css";
const MONTHS_PER_ROW = 3;
const CalendarYear = (props) => {
    const { renderMonthLabel, renderMonthAriaLabel, monthDate, min, max, onMonthClick } = props;
    const rootRef = React.useRef(null);
    const monthNames = getMonthNames({ renderMonthLabel });
    const rows = [];
    for (let i = 0; i < monthNames.length; i += MONTHS_PER_ROW) {
        const chunk = monthNames.slice(i, i + MONTHS_PER_ROW);
        rows.push(chunk);
    }
    React.useEffect(() => {
        var _a;
        const focusableEl = (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.querySelector('[tabIndex="0"]');
        // Waitinf for key press events to finish before focusing the month
        // To avoid it trigger the month click
        onNextFrame(() => {
            focusableEl === null || focusableEl === void 0 ? void 0 : focusableEl.focus();
        });
    }, []);
    return (_jsx("table", { ref: rootRef, role: "grid", className: s.selection, children: _jsx("tbody", { children: rows.map((row, i) => (_jsx("tr", { className: s.row, children: row.map((name, j) => {
                    const monthIndex = i * MONTHS_PER_ROW + j;
                    const date = new Date(monthDate.getFullYear(), monthIndex);
                    const isOutsideMinBound = min && min.getFullYear() >= date.getFullYear() && min.getMonth() > date.getMonth();
                    const isOutsideMaxBound = max && max.getFullYear() <= date.getFullYear() && max.getMonth() < date.getMonth();
                    const disabled = isOutsideMaxBound || isOutsideMinBound;
                    return (_jsx("td", { role: disabled ? "presentation" : "gridcell", className: s.cell, children: _jsx(Actionable, { fullWidth: true, insetFocus: true, className: s["cell-button"], disabled: disabled, onClick: () => onMonthClick(monthIndex), attributes: {
                                tabIndex: monthIndex === monthDate.getMonth() ? 0 : -1,
                                "aria-hidden": disabled,
                                "aria-label": renderMonthAriaLabel
                                    ? renderMonthAriaLabel({ month: monthIndex })
                                    : name,
                                "data-rs-date": `${monthDate.getFullYear()}-${(monthIndex + 1)
                                    .toString()
                                    .padStart(2, "0")}`,
                            }, children: name }) }, name));
                }) }, i))) }) }));
};
export default CalendarYear;
