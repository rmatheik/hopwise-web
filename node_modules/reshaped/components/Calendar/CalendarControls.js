import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from "react";
import Button from "../Button/index.js";
import View from "../View/index.js";
import Hidden from "../Hidden/index.js";
import Text from "../Text/index.js";
import HiddenVisually from "../HiddenVisually/index.js";
import IconChevronLeft from "../../icons/ChevronLeft.js";
import IconChevronRight from "../../icons/ChevronRight.js";
import { onNextFrame } from "../../utilities/animation.js";
import s from "./Calendar.module.css";
const CalendarControls = (props) => {
    const { selectionMode, onMonthTitleClick, monthTitleRef, monthDate, renderSelectedMonthLabel, isFirstMonth, isLastMonth, onNextClick, onPreviousClick, monthSelectionAriaLabel = "Select a month", previousMonthAriaLabel = "Previous month", previousYearAriaLabel = "Previous year", nextMonthAriaLabel = "Next month", nextYearAriaLabel = "Next year", } = props;
    const prevRef = React.useRef(null);
    const nextRef = React.useRef(null);
    React.useEffect(() => {
        if (!isFirstMonth)
            return;
        if (document.activeElement !== prevRef.current)
            return;
        const targetEl = nextRef.current || monthTitleRef.current;
        onNextFrame(() => {
            targetEl === null || targetEl === void 0 ? void 0 : targetEl.focus();
        });
    }, [isFirstMonth, monthTitleRef]);
    React.useEffect(() => {
        if (!isLastMonth)
            return;
        if (document.activeElement !== nextRef.current)
            return;
        const targetEl = prevRef.current || monthTitleRef.current;
        onNextFrame(() => {
            targetEl === null || targetEl === void 0 ? void 0 : targetEl.focus();
        });
    }, [isLastMonth, monthTitleRef]);
    return (_jsxs(View, { direction: "row", gap: 2, align: "center", children: [_jsx(Hidden, { visibility: true, hide: isFirstMonth, children: _jsx("div", { className: s.control, children: _jsx(Button, { variant: "ghost", icon: IconChevronLeft, onClick: onPreviousClick, attributes: {
                            ref: prevRef,
                            "aria-label": selectionMode === "date" ? previousMonthAriaLabel : previousYearAriaLabel,
                        } }) }) }), _jsxs(View.Item, { grow: true, children: [selectionMode === "date" && (_jsxs(Button, { fullWidth: true, variant: "ghost", onClick: onMonthTitleClick, attributes: { ref: monthTitleRef }, children: [renderSelectedMonthLabel
                                ? renderSelectedMonthLabel({ date: monthDate })
                                : monthDate.toLocaleDateString("en-US", { month: "long", year: "numeric" }), _jsx(HiddenVisually, { children: monthSelectionAriaLabel })] })), selectionMode === "month" && (_jsx(Text, { align: "center", weight: "medium", children: monthDate.toLocaleDateString("en-US", { year: "numeric" }) }))] }), _jsx(Hidden, { visibility: true, hide: isLastMonth, children: _jsx("div", { className: s.control, children: _jsx(Button, { variant: "ghost", icon: IconChevronRight, onClick: onNextClick, attributes: {
                            ref: nextRef,
                            "aria-label": selectionMode === "date" ? nextMonthAriaLabel : nextYearAriaLabel,
                        } }) }) })] }));
};
export default CalendarControls;
