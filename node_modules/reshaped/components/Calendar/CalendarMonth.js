"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { getMonthWeeks, getWeekdayNames, getLocalISODate } from "./Calendar.utils.js";
import CalendarDate from "./CalendarDate.js";
import s from "./Calendar.module.css";
const CalendarMonth = (props) => {
    const { date, value, onChange, min, max, range, firstWeekDay, hoveredDate, onDateHover, onDateHoverEnd, renderWeekDay, renderDateAriaLabel, } = props;
    let foundFocusableDate = false;
    const month = date.getMonth();
    const weeks = getMonthWeeks({ date, firstWeekDay });
    const weekdayNames = getWeekdayNames({ firstWeekDay, renderWeekDay });
    return (_jsxs("table", { className: s.selection, role: "grid", children: [_jsx("thead", { "aria-hidden": "true", children: _jsx("tr", { children: weekdayNames.map((dayName) => (_jsx("th", { className: s.weekday, scope: "col", children: dayName }, dayName))) }) }), _jsx("tbody", { children: weeks.map((week) => {
                    var _a;
                    const key = [month, (_a = week[0]) === null || _a === void 0 ? void 0 : _a.getDate()].filter(Boolean).join("-");
                    return (_jsx("tr", { className: s.row, children: week.map((date, index) => {
                            const disabled = !!date && ((min && date < min) || (max && date > max));
                            const month = date === null || date === void 0 ? void 0 : date.getMonth();
                            const today = new Date();
                            const isoToday = getLocalISODate({ date: today });
                            const startValue = value && "start" in value ? value.start : value;
                            const endValue = value && "end" in value ? value.end : value;
                            const isoDate = date && getLocalISODate({ date });
                            const isoStartValue = startValue && getLocalISODate({ date: startValue });
                            const isoEndValue = endValue && getLocalISODate({ date: endValue });
                            const isActiveStart = !!isoDate && !!isoStartValue && isoDate === isoStartValue;
                            const isActiveEnd = !!isoDate && !!isoEndValue && isoDate === isoEndValue;
                            /**
                             * Decide if date has to be focusable with Tab (only one date should be)
                             * 1. If there is a selected value - it's focusable
                             * 2. Otherwise, today's date is focusable
                             * 3. Otherwise, first non-disabled date is focusable
                             */
                            let focusable = false;
                            if (!foundFocusableDate && date) {
                                if (!!startValue && startValue.getMonth() === (date === null || date === void 0 ? void 0 : date.getMonth())) {
                                    focusable = getLocalISODate({ date: startValue }) === getLocalISODate({ date });
                                }
                                else if (isoDate && month === today.getMonth()) {
                                    focusable = isoDate >= isoToday && !disabled;
                                }
                                else {
                                    focusable = !disabled;
                                }
                            }
                            if (focusable)
                                foundFocusableDate = true;
                            return (_jsx(CalendarDate, { date: date, disabled: disabled, range: range, focusable: focusable, startValue: startValue, endValue: endValue, isActiveStart: isActiveStart, isActiveEnd: isActiveEnd, onChange: onChange, hoveredDate: hoveredDate, onDateHover: onDateHover, onDateHoverEnd: onDateHoverEnd, renderAriaLabel: renderDateAriaLabel }, index));
                        }) }, key));
                }) })] }));
};
export default CalendarMonth;
