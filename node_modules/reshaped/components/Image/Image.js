"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import { classNames } from "../../utilities/helpers.js";
import s from "./Image.module.css";
import getRadiusStyles from "../../styles/radius/index.js";
import getWidthStyles from "../../styles/width/index.js";
import getHeightStyles from "../../styles/height/index.js";
const Image = (props) => {
    const { src, alt, width, height, onLoad, onError, fallback, displayMode = "cover", borderRadius, className, attributes, imageAttributes, } = props;
    const [status, setStatus] = React.useState("loading");
    const radiusStyles = getRadiusStyles(borderRadius);
    const widthStyles = getWidthStyles(width);
    const heightStyles = getHeightStyles(height);
    const baseClassNames = classNames(s.root, radiusStyles === null || radiusStyles === void 0 ? void 0 : radiusStyles.classNames, widthStyles === null || widthStyles === void 0 ? void 0 : widthStyles.classNames, heightStyles === null || heightStyles === void 0 ? void 0 : heightStyles.classNames, displayMode && s[`--display-mode-${displayMode}`], className);
    const imgClassNames = classNames(s.image, baseClassNames);
    const fallbackClassNames = classNames(s.fallback, baseClassNames);
    const style = Object.assign(Object.assign({}, widthStyles === null || widthStyles === void 0 ? void 0 : widthStyles.variables), heightStyles === null || heightStyles === void 0 ? void 0 : heightStyles.variables);
    const handleLoad = (e) => {
        setStatus("success");
        onLoad === null || onLoad === void 0 ? void 0 : onLoad(e);
    };
    const handleError = (e) => {
        setStatus("error");
        onError === null || onError === void 0 ? void 0 : onError(e);
    };
    React.useEffect(() => {
        setStatus("loading");
    }, [src]);
    if ((status === "error" || !src) && !!fallback) {
        if (typeof fallback === "string") {
            return (_jsx("img", Object.assign({}, attributes, { src: fallback, alt: alt, role: alt ? undefined : "presentation", className: fallbackClassNames, style: style })));
        }
        return (_jsx("div", Object.assign({}, attributes, { className: fallbackClassNames, style: style, children: fallback })));
    }
    return (_jsx("img", Object.assign({}, attributes, imageAttributes, { src: src, alt: alt, role: alt ? undefined : "presentation", onLoad: handleLoad, onError: handleError, className: imgClassNames, style: style })));
};
export default Image;
