"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { classNames } from "../../utilities/helpers.js";
import View from "../View/index.js";
import HiddenVisually from "../HiddenVisually/index.js";
import useToggle from "../../hooks/useToggle.js";
import s from "./FileUpload.module.css";
const FileUploadTrigger = (props) => {
    const { children } = props;
    return _jsx("span", { className: s.trigger, children: children });
};
const FileUpload = (props) => {
    const { name, children, className, attributes, inputAttributes, onChange } = props;
    const highlightToggle = useToggle();
    const rootClassNames = classNames(s.root, highlightToggle.active && s["--highlighted"], className);
    const handleDragOver = (event) => {
        var _a;
        event.preventDefault();
        (_a = attributes === null || attributes === void 0 ? void 0 : attributes.onDragOver) === null || _a === void 0 ? void 0 : _a.call(attributes, event);
    };
    const handleDragEnter = (event) => {
        var _a;
        highlightToggle.activate();
        (_a = attributes === null || attributes === void 0 ? void 0 : attributes.onDragEnter) === null || _a === void 0 ? void 0 : _a.call(attributes, event);
    };
    const handleDragLeave = (event) => {
        var _a;
        // Ignore elements inside the field
        if (event.currentTarget.contains(event.relatedTarget))
            return;
        highlightToggle.deactivate();
        (_a = attributes === null || attributes === void 0 ? void 0 : attributes.onDragLeave) === null || _a === void 0 ? void 0 : _a.call(attributes, event);
    };
    const handleDrop = (event) => {
        var _a;
        event.preventDefault();
        highlightToggle.deactivate();
        onChange === null || onChange === void 0 ? void 0 : onChange({ name, value: Array.from(event.dataTransfer.files), event });
        (_a = attributes === null || attributes === void 0 ? void 0 : attributes.onDrop) === null || _a === void 0 ? void 0 : _a.call(attributes, event);
    };
    const handleChange = (event) => {
        var _a;
        const nextValue = event.target.files;
        if (!nextValue)
            return;
        onChange === null || onChange === void 0 ? void 0 : onChange({ name, event, value: Array.from(nextValue) });
        (_a = inputAttributes === null || inputAttributes === void 0 ? void 0 : inputAttributes.onChange) === null || _a === void 0 ? void 0 : _a.call(inputAttributes, event);
    };
    return (_jsx("div", Object.assign({}, attributes, { className: rootClassNames, onDragOver: handleDragOver, onDragEnter: handleDragEnter, onDragLeave: handleDragLeave, onDrop: handleDrop, children: _jsxs(View, { as: "label", className: s.triggerLayer, padding: 6, borderRadius: "medium", gap: 2, align: "center", textAlign: "center", animated: true, children: [_jsx(View.Item, { children: children }), _jsx(HiddenVisually, { children: _jsx("input", Object.assign({}, inputAttributes, { type: "file", className: s.field, name: name, onChange: handleChange })) })] }) })));
};
FileUpload.Trigger = FileUploadTrigger;
export default FileUpload;
