import { jsx as _jsx } from "react/jsx-runtime";
import { classNames, responsiveClassNames } from "../../utilities/helpers.js";
import s from "./Text.module.css";
const tagMap = {
    "title-1": "h1",
    "title-2": "h2",
    "title-3": "h3",
    "title-4": "h4",
    "title-5": "h5",
    "title-6": "h6",
};
const Text = (props) => {
    const { variant, color, weight, align, decoration, maxLines, wrap, children, className, attributes, } = props;
    const largestVariant = typeof variant === "string" ? variant : (variant === null || variant === void 0 ? void 0 : variant.xl) || (variant === null || variant === void 0 ? void 0 : variant.l) || (variant === null || variant === void 0 ? void 0 : variant.m) || (variant === null || variant === void 0 ? void 0 : variant.s);
    /**
     * Using any here to let TS save on type resolving, otherwise TS throws an error due to the type complexity
     * It still resolves the attributes correctly based on the tag
     */
    const TagName = props.as || (largestVariant && tagMap[largestVariant]) || "div";
    const rootClassName = classNames(s.root, color && s[`--color-${color}`], ...responsiveClassNames(s, "--variant", variant), ...responsiveClassNames(s, "--align", align), weight && s[`--weight-${weight}`], decoration && s[`--decoration-${decoration}`], maxLines !== undefined && s[`--clamp`], maxLines === 1 && s["--break-all"], wrap && s[`--wrap-${wrap}`], className);
    const style = Object.assign(Object.assign({}, attributes === null || attributes === void 0 ? void 0 : attributes.style), { "--rs-text-lines": maxLines });
    return (_jsx(TagName, Object.assign({}, attributes, { className: rootClassName, style: style, children: children })));
};
export default Text;
