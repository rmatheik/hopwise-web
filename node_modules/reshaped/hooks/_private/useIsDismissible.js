/**
 * Singleton hook to check if multiple elements can be dismissed and returns flag only for the latest one
 * Example: Use to only close the latest opened Flyout/Modal
 */
import React from "react";
import useElementId from "../useElementId.js";
let queue = {};
let latestId = null;
const removeFromQueue = (id) => {
    // Ignore removal of non-existing ids when called on component mount with active: false
    if (!queue[id])
        return;
    if (id === latestId)
        latestId = queue[id].parentId;
    delete queue[id];
    // Clear up all unused ids after the queue is resolved
    if (latestId === null)
        queue = {};
};
const addToQueue = (id, contentRef, triggerRef) => {
    var _a;
    const parentItem = latestId ? queue[latestId] : undefined;
    const insideParent = (triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) &&
        parentItem &&
        ((_a = parentItem.contentRef.current) === null || _a === void 0 ? void 0 : _a.contains(triggerRef.current));
    if (!insideParent && triggerRef && latestId) {
        removeFromQueue(latestId);
    }
    queue[id] = { parentId: latestId, triggerRef, contentRef };
    latestId = id;
};
const useIsDismissible = (active = false, contentRef, triggerRef) => {
    const id = useElementId();
    const isDismissible = React.useCallback(() => latestId === id, [id]);
    React.useEffect(() => {
        if (active) {
            addToQueue(id, contentRef, triggerRef);
        }
        else {
            removeFromQueue(id);
        }
    }, [active, id, contentRef, triggerRef]);
    return isDismissible;
};
export default useIsDismissible;
