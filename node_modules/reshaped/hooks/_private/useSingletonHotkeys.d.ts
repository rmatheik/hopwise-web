import React from "react";
/**
 * Types
 */
type Callback = (e: KeyboardEvent) => void;
type PressedMap = Record<string, KeyboardEvent>;
type Hotkeys = Record<string, Callback | null>;
type HotkeyOptions = {
    preventDefault?: boolean;
};
type Context = {
    isPressed: (key: string) => boolean;
    addHotkeys: (hotkeys: Hotkeys, ref: React.RefObject<HTMLElement | null>, options?: HotkeyOptions) => (() => void) | undefined;
};
type HotkeyData = {
    callback: Callback;
    ref: React.RefObject<HTMLElement | null>;
    options: HotkeyOptions;
};
export declare class HotkeyStore {
    hotkeyMap: Record<string, Set<HotkeyData>>;
    getSize: () => number;
    bindHotkeys: (hotkeys: Hotkeys, ref: React.RefObject<HTMLElement | null>, options: HotkeyOptions) => void;
    unbindHotkeys: (hotkeys: Hotkeys) => void;
    handleKeyDown: (pressedMap: PressedMap, e: KeyboardEvent) => void;
}
/**
 * Components / Hooks
 */
export declare const HotkeyContext: React.Context<Context>;
export declare const SingletonHotkeysProvider: (props: {
    children: React.ReactNode;
}) => import("react/jsx-runtime").JSX.Element;
declare const useSingletonHotkeys: () => Context;
export default useSingletonHotkeys;
