"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addTheme = exports.addThemeFragment = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const mergeDefinitions_1 = __importDefault(require("../../themes/_generator/utilities/mergeDefinitions"));
const transform_1 = __importDefault(require("../../themes/_generator/transform"));
const reshaped_1 = __importDefault(require("../../themes/_generator/definitions/reshaped"));
const transformDefinition = (name, definition, options) => {
    const { isFragment, outputPath } = options;
    const code = (0, transform_1.default)(name, definition, options);
    const themeFolderPath = isFragment
        ? path_1.default.resolve(outputPath, "fragments", name)
        : path_1.default.resolve(outputPath, name);
    const themePath = path_1.default.resolve(themeFolderPath, "theme.css");
    const themeMediaPath = path_1.default.resolve(themeFolderPath, "media.css");
    const themeJsonPath = path_1.default.resolve(themeFolderPath, "theme.json");
    fs_1.default.mkdirSync(themeFolderPath, { recursive: true });
    fs_1.default.writeFileSync(themePath, code.variables);
    fs_1.default.writeFileSync(themeJsonPath, JSON.stringify(definition));
    if (code.media)
        fs_1.default.writeFileSync(themeMediaPath, code.media);
    const logOutput = `Compiled ${chalk_1.default.bold(name)} theme${isFragment ? " fragment" : ""}`;
    // eslint-disable-next-line no-console
    console.log(chalk_1.default.green(logOutput));
};
const addThemeFragment = (name, definition, options) => {
    transformDefinition(name, definition, Object.assign(Object.assign({}, options), { isFragment: true }));
};
exports.addThemeFragment = addThemeFragment;
const addTheme = (name, definition, options) => {
    transformDefinition(name, (0, mergeDefinitions_1.default)(reshaped_1.default, definition), options);
};
exports.addTheme = addTheme;
