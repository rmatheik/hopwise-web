import type * as G from "../types/global";
export declare const range: (start: number, end: number) => number[];
export declare const debounce: <T extends Function>(cb: T, wait?: number) => T;
export declare function debounceHandler<T extends React.SyntheticEvent | Event>(handler: (event: T) => void, timeout: number): (event: T) => void;
export declare const throttle: <T extends Function>(cb: T, wait: number) => (...args: unknown[]) => void;
export declare function throttleHandler<T extends React.SyntheticEvent | Event>(handler: (event: T) => void, timeout: number): (event: T) => void;
type Value = string | boolean | number | undefined;
type ClassNameResolver = string | ((value: Value) => string);
export declare const classNames: (...args: G.ClassName[]) => string;
export declare const responsiveClassNames: <V extends G.Responsive<Value>>(s: Record<string, string>, className: ClassNameResolver, value: V, options?: {
    excludeValueFromClassName?: boolean;
}) => string[];
export declare const responsiveVariables: <V extends Value = Value>(variableName: G.CSSVariable, value?: G.Responsive<V>) => Record<G.CSSVariable, V>;
export declare const responsivePropDependency: <Result, T>(prop: G.Responsive<T>, resolver: (value: T, key: G.Viewport) => Result) => Result;
export declare const resolveViewportValue: <T>(viewport: G.Viewport, value: G.Responsive<T>) => T | undefined;
export {};
