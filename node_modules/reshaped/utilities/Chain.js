class Chain {
    constructor() {
        this.chain = {};
        this.tailId = null;
        this.idCounter = 0;
    }
    generateId() {
        this.idCounter += 1;
        return this.idCounter;
    }
    getAll() {
        return this.chain;
    }
    get(id) {
        return this.chain[id];
    }
    isLast(id) {
        return this.tailId !== null && id === this.tailId;
    }
    isEmpty() {
        return typeof this.tailId !== "number";
    }
    add(data) {
        const previousId = this.tailId;
        const previousItem = previousId && this.get(previousId);
        const id = this.generateId();
        this.chain[id] = { previousId, data };
        if (previousItem)
            previousItem.nextId = id;
        this.tailId = id;
        return id;
    }
    remove(id) {
        var _a, _b;
        const target = this.chain[id];
        if (!target)
            return;
        const previousId = target.previousId;
        const previousItem = previousId && this.get(previousId);
        const nextId = target.nextId;
        const nextItem = nextId && this.get(nextId);
        if (previousItem)
            previousItem.nextId = (_a = target.nextId) !== null && _a !== void 0 ? _a : null;
        if (nextItem)
            nextItem.previousId = (_b = target.previousId) !== null && _b !== void 0 ? _b : null;
        if (!nextId)
            this.tailId = previousId !== null && previousId !== void 0 ? previousId : null;
        const data = this.get(id).data;
        delete this.chain[id];
        return data;
    }
    removePreviousTill(id, condition) {
        const target = this.get(id);
        const data = this.remove(id);
        if (!target || !target.previousId)
            return data;
        const keepIterating = !condition(target);
        if (keepIterating)
            return this.removePreviousTill(target.previousId, condition);
        return data;
    }
}
export default Chain;
