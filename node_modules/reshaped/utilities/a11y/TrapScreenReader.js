class TrapScreenReader {
    constructor(root) {
        /**
         * Elements ignored by screen reader when trap is active
         */
        this.hiddenElements = [];
        /**
         * Apply aria-hidden to all elements except the passed
         */
        this.hideSiblingsFromScreenReader = (el) => {
            let sibling = el.parentNode && el.parentNode.firstChild;
            while (sibling) {
                const notCurrent = sibling !== el;
                const isValid = sibling.nodeType === 1 && !sibling.hasAttribute("aria-hidden");
                if (notCurrent && isValid) {
                    sibling.setAttribute("aria-hidden", "true");
                    this.hiddenElements.push(sibling);
                }
                sibling = sibling.nextSibling;
            }
        };
        this.release = () => {
            this.hiddenElements.forEach((el) => {
                el.removeAttribute("aria-hidden");
            });
            this.hiddenElements = [];
        };
        this.trap = () => {
            let currentEl = this.root;
            this.release();
            while (currentEl !== document.body) {
                this.hideSiblingsFromScreenReader(currentEl);
                currentEl = currentEl.parentElement;
            }
        };
        this.root = root;
    }
}
export default TrapScreenReader;
