import Chain from "../Chain";
import TrapScreenReader from "./TrapScreenReader";
import type { FocusableElement, TrapMode } from "./types";
type ReleaseOptions = {
    withoutFocusReturn?: boolean;
};
type TrapOptions = {
    onNavigateOutside?: () => void;
    includeTrigger?: boolean;
    initialFocusEl?: FocusableElement;
    mode?: TrapMode;
};
declare class TrapFocus {
    static chain: Chain<TrapFocus>;
    chainId?: number;
    root: HTMLElement;
    trigger: FocusableElement | null;
    options: TrapOptions & {
        pseudoFocus?: boolean;
    };
    trapped?: boolean;
    screenReaderTrap: TrapScreenReader;
    mutationObserver: MutationObserver | null;
    constructor(root: HTMLElement);
    /**
     * Handle keyboard navigation while focus is trapped
     */
    handleKeyDown: (event: KeyboardEvent) => void;
    addListeners: () => void;
    removeListeners: () => void;
    /**
     * Trap the focus, add observer and keyboard event listeners
     * and create a chain item
     */
    trap: (options?: TrapOptions) => void;
    /**
     * Disabled the trap focus for the element,
     * cleanup all observers/handlers and trap for the previous element in the chain
     */
    release: (releaseOptions?: ReleaseOptions) => void;
}
export default TrapFocus;
