"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTheme = void 0;
const reshaped_1 = __importDefault(require("../themes/_generator/definitions/reshaped"));
const string_1 = require("../utilities/string");
const mergeDefinitions_1 = __importDefault(require("../themes/_generator/utilities/mergeDefinitions"));
const constants_1 = require("../themes/_generator/constants");
const getTheme = (theme) => {
    const config = {
        backgroundColor: {},
        textColor: {},
        borderColor: {},
        colors: {},
        borderRadius: {},
        spacing: {},
        boxShadow: {},
        screens: {},
    };
    const definition = theme
        ? (0, mergeDefinitions_1.default)(reshaped_1.default, theme)
        : reshaped_1.default;
    Object.keys(definition.color).forEach((tokenName) => {
        const cssTokenName = (0, string_1.camelToKebab)(tokenName);
        const cssVariable = ["rs", "color", cssTokenName].join("-");
        const configValue = `var(--${cssVariable})`;
        if (tokenName.startsWith("background")) {
            const name = cssTokenName.replace("background-", "");
            config.backgroundColor[name] = configValue;
            if (constants_1.bgWithDynamicForeground.includes(tokenName)) {
                const cssVariable = ["rs", "color", "on", cssTokenName].join("-");
                const configValue = `var(--${cssVariable})`;
                config.textColor[`on-${name}`] = configValue;
            }
            return;
        }
        if (tokenName.startsWith("foreground")) {
            const name = cssTokenName.replace("foreground-", "");
            config.textColor[name] = configValue;
            return;
        }
        if (tokenName.startsWith("border")) {
            const name = cssTokenName.replace("border-", "");
            config.borderColor[name] = configValue;
            return;
        }
        config.backgroundColor[cssTokenName] = configValue;
        config.borderColor[cssTokenName] = configValue;
        config.textColor[cssTokenName] = configValue;
        config.colors[cssTokenName] = configValue;
    });
    Object.keys(definition.unit).forEach((tokenName) => {
        const cssTokenName = (0, string_1.camelToKebab)(tokenName);
        const cssVariable = ["rs", "unit", cssTokenName].join("-");
        const configValue = `var(--${cssVariable})`;
        if (tokenName.startsWith("radius")) {
            const name = cssTokenName.replace("radius-", "");
            config.borderRadius[name] = configValue;
            return;
        }
        if (tokenName.startsWith("base")) {
            [...Array(11).keys()].forEach((i) => {
                if (i === 0) {
                    config.spacing["0"] = "0px";
                }
                else {
                    config.spacing[`x${i}`] = `var(--rs-unit-x${i})`;
                }
            });
            return;
        }
    });
    Object.keys(definition.shadow).forEach((tokenName) => {
        const cssTokenName = (0, string_1.camelToKebab)(tokenName);
        const cssVariable = ["rs", "shadow", cssTokenName].join("-");
        const configValue = `var(--${cssVariable})`;
        const name = cssTokenName.replace("shadow-", "");
        config.boxShadow[name] = configValue;
        return;
    });
    Object.entries(definition.viewport).forEach(([tokenName, tokenValue]) => {
        if (!tokenValue.minPx)
            return;
        config.screens[tokenName] = `${tokenValue.minPx}px`;
    });
    return config;
};
exports.getTheme = getTheme;
