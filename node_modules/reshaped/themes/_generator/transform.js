"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const transforms = __importStar(require("./tokens/transforms"));
const css_1 = require("./utilities/css");
const generateBackgroundColors_1 = __importDefault(require("./utilities/generateBackgroundColors"));
const generateUnits_1 = __importDefault(require("./utilities/generateUnits"));
const transform = (name, definition, options) => {
    var _a, _b;
    const { isFragment, themeOptions } = options;
    (0, generateBackgroundColors_1.default)(definition, themeOptions);
    (0, generateUnits_1.default)(definition);
    // Generate s viewport
    if ((_b = (_a = definition.viewport) === null || _a === void 0 ? void 0 : _a.m) === null || _b === void 0 ? void 0 : _b.minPx) {
        definition.viewport.s = { maxPx: definition.viewport.m.minPx - 1 };
    }
    const transformedStorage = {
        variable: [],
        media: [],
    };
    Object.entries(definition).forEach(([tokenType, tokenValues]) => {
        if (!tokenValues)
            return;
        const transform = transforms.css[tokenType];
        Object.entries(tokenValues).forEach(([tokenName, token]) => {
            const transformedTokens = transform(tokenName, token, definition);
            transformedTokens.forEach((transformedToken) => {
                transformedStorage[transformedToken.type].push(transformedToken);
            });
        });
    });
    return {
        variables: (0, css_1.variablesTemplate)(name, transformedStorage.variable),
        media: !isFragment ? (0, css_1.mediaTemplate)(transformedStorage.media) : undefined,
    };
};
exports.default = transform;
