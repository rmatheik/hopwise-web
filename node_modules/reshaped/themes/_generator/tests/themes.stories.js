import { Example } from "../../../utilities/storybook/index.js";
import View from "../../../components/View/index.js";
import Button from "../../../components/Button/index.js";
import Badge from "../../../components/Badge/index.js";
import Alert from "../../../components/Alert/index.js";
import Card from "../../../components/Card/index.js";
import Avatar from "../../../components/Avatar/index.js";
import DropdownMenu from "../../../components/DropdownMenu/index.js";
import Theme from "../../../components/Theme/index.js";
import { getThemeCSS, generateThemeColors, baseThemeDefinition } from "../../index.js";
export default {
    title: "Themes",
    parameters: {
        iframe: { url: "https://reshaped.so/docs/tokens/theming/runtime-theming" },
    },
};
const css = getThemeCSS("green", {
    color: {
        backgroundPrimary: { hex: "#1abc9c", hexDark: "#00E5C4" },
        backgroundPrimaryHighlighted: { hex: "#16a085", hexDark: "#00E5C4" },
    },
});
const css2 = getThemeCSS("peach", {
    color: {
        backgroundPrimary: { hex: "#ffbe76" },
        backgroundPrimaryHighlighted: { hex: "#ffbe76" },
    },
});
const cssGenerated = getThemeCSS("generated", Object.assign(Object.assign({}, baseThemeDefinition), { color: generateThemeColors({ primary: "#2563eb" }) }));
const componentExamples = (<View gap={4}>
		<View gap={2} direction="row">
			<Button color="primary">Primary button</Button>
			<Button color="critical">Primary button</Button>
			<Button color="positive">Primary button</Button>
			<Button color="neutral">Primary button</Button>
		</View>
		<View gap={2} direction="row">
			<Button color="primary" variant="outline">
				Primary button
			</Button>
			<Button color="critical" variant="outline">
				Primary button
			</Button>
			<Button color="positive" variant="outline">
				Primary button
			</Button>
			<Button color="neutral" variant="outline">
				Primary button
			</Button>
		</View>
		<View direction="row" gap={4}>
			<View.Item columns={6}>
				<Alert color="primary">Primary</Alert>
			</View.Item>
			<View.Item columns={6}>
				<Alert color="critical">Critical</Alert>
			</View.Item>
			<View.Item columns={6}>
				<Alert color="warning">Warning</Alert>
			</View.Item>
			<View.Item columns={6}>
				<Alert color="positive">Positive</Alert>
			</View.Item>
			<View.Item columns={6}>
				<Alert color="neutral">Neutral</Alert>
			</View.Item>
			<View.Item columns={12}>
				<View direction="row" gap={2}>
					<View backgroundColor="neutral" width={10} height={10}/>
					<View backgroundColor="neutral-faded" width={10} height={10}/>
					<View backgroundColor="primary" width={10} height={10}/>
					<View backgroundColor="primary-faded" width={10} height={10}/>
					<View backgroundColor="critical" width={10} height={10}/>
					<View backgroundColor="critical-faded" width={10} height={10}/>
					<View backgroundColor="warning" width={10} height={10}/>
					<View backgroundColor="warning-faded" width={10} height={10}/>
					<View backgroundColor="positive" width={10} height={10}/>
					<View backgroundColor="positive-faded" width={10} height={10}/>
				</View>
			</View.Item>
			<View.Item columns={12}>
				<View direction="row" gap={2}>
					<Avatar initials="RS" color="warning" variant="faded"/>
					<Badge color="warning">Warning</Badge>
				</View>
			</View.Item>
			<View.Item columns={12}>
				<View direction="row">
					<View padding={4} gap={4} backgroundColor="page">
						Page
						<View backgroundColor="neutral" padding={4}>
							Neutral
						</View>
						<View backgroundColor="neutral-faded" padding={4}>
							Neutral faded
						</View>
					</View>

					<View padding={4} gap={4} backgroundColor="page-faded">
						Page faded
						<View backgroundColor="neutral" padding={4}>
							Neutral
						</View>
						<View backgroundColor="neutral-faded" padding={4}>
							Neutral faded
						</View>
					</View>
				</View>
			</View.Item>
			<View.Item columns={6}>
				<Card>
					<View gap={2} align="start">
						<Badge variant="outline" color="primary">
							Badge
						</Badge>
						<DropdownMenu>
							<DropdownMenu.Trigger>
								{(attributes) => (<Button variant="faded" attributes={attributes}>
										Menu
									</Button>)}
							</DropdownMenu.Trigger>
							<DropdownMenu.Content>
								<DropdownMenu.Item>Item 1</DropdownMenu.Item>
								<DropdownMenu.Item>Item 1</DropdownMenu.Item>
							</DropdownMenu.Content>
						</DropdownMenu>
					</View>
				</Card>
			</View.Item>
		</View>
	</View>);
export const base = () => (<Example>
		<Example.Item title="custom runtime theme">
			<style>{css}</style>
			<Theme name="green">
				<Button color="primary">Primary button</Button>
			</Theme>
		</Example.Item>
		<Example.Item title="on colors generation">
			<style>{css2}</style>
			<Theme name="peach">
				<Button color="primary">Primary button</Button>
			</Theme>
		</Example.Item>
	</Example>);
export const generation = () => (<Example>
		<Example.Item>
			<style>{cssGenerated}</style>
			<View gap={4}>
				<View.Item>Generated theme</View.Item>
				<Theme name="generated">{componentExamples}</Theme>
				{/* <View.Item>Reshaped theme</View.Item> */}
				{/* <Theme name="reshaped">{componentExamples}</Theme> */}
			</View>
		</Example.Item>
	</Example>);
const onColorsCss = getThemeCSS("on-color", {
    color: {
        backgroundPrimary: { hex: "#1abc9c", hexDark: "#16a085" },
        backgroundPrimaryHighlighted: { hex: "#16a085", hexDark: "#1abc9c" },
    },
}, {
    onColorValues: {
        primary: {
            hexLight: "#d1fae5",
            hexDark: "#022c22",
        },
    },
});
export const onColors = () => (<Example>
		<Example.Item title="custom on color values">
			<style>{onColorsCss}</style>
			<Theme name="on-color">
				<View gap={2} direction="row">
					<Button color="primary">Primary button</Button>
					<Button color="critical">Critical button</Button>
				</View>
			</Theme>
		</Example.Item>
	</Example>);
