"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const color_1 = require("./color");
/**
 * Generator
 */
const FG_L_DARK = 62;
const generateColorValues = (args) => {
    const { key, hex } = args;
    const capitalizedKey = key.charAt(0).toUpperCase() + key.slice(1);
    const hsl = (0, color_1.hexToHsl)(hex);
    const rgb = (0, color_1.hexToRgb)(hex);
    const hsluv = (0, color_1.hexToHsluv)(hex);
    const luminance = (0, color_1.getRgbLuminance)(rgb);
    const luminanceDelta = (0, color_1.getLuminanceDelta)(luminance);
    const hslDark = (0, color_1.getDarkModeColor)(hsl);
    const bgHex = hex;
    const bgHexDark = (0, color_1.hslToHex)(hslDark);
    const hsluvDark = (0, color_1.hexToHsluv)(bgHexDark);
    const bdHex = (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluv), { l: hsluv.l - 5 - luminanceDelta }));
    const bdHexDark = (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluvDark), { l: key === "neutral" ? 35 : FG_L_DARK }));
    const fgHsluv = Object.assign(Object.assign({}, hsluv), { l: 43 });
    const fgHsluvDark = Object.assign(Object.assign({}, hsluv), { l: key === "neutral" ? 80 : FG_L_DARK });
    const fgHex = (0, color_1.hsluvToHex)(fgHsluv);
    const fgHexDark = (0, color_1.hsluvToHex)(fgHsluvDark);
    const saturationModifier = hsl.s / 40;
    const bgFadedHex = (0, color_1.rgbToHex)((0, color_1.hslToRgb)(Object.assign(Object.assign({}, hsl), { l: 98 - saturationModifier - (key === "neutral" ? 2 : 0) })));
    const bgFadedHsluv = (0, color_1.hexToHsluv)(bgFadedHex);
    const bgFadedHsluvDark = Object.assign(Object.assign({}, hsluv), { l: 16, s: 32 });
    const bgFadedHexDark = (0, color_1.hsluvToHex)(bgFadedHsluvDark);
    const fadedLuminance = (0, color_1.getRgbLuminance)((0, color_1.hexToRgb)(bgFadedHex));
    const fadedLuminanceDark = (0, color_1.getRgbLuminance)((0, color_1.hexToRgb)(bgFadedHexDark));
    const fadedLuminanceDeltaDark = (0, color_1.getLuminanceDelta)(fadedLuminanceDark);
    const bdFadedHex = (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, bgFadedHsluv), { s: Math.max(0, bgFadedHsluv.s - 6 - Math.max(0, fadedLuminance - 98) * 20), l: bgFadedHsluv.l - 7 + saturationModifier }));
    const bdFadedHexDark = (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, bgFadedHsluvDark), { s: 40, l: bgFadedHsluvDark.l + 7 - fadedLuminanceDeltaDark }));
    const output = {
        [`background${capitalizedKey}`]: {
            hex: bgHex,
            hexDark: bgHexDark,
        },
        [`background${capitalizedKey}Faded`]: {
            hex: bgFadedHex,
            hexDark: bgFadedHexDark,
        },
        [`background${capitalizedKey}Highlighted`]: {
            hex: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluv), { l: hsluv.l - 4 })),
            hexDark: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluvDark), { l: hsluvDark.l + 4 })),
        },
        [`border${capitalizedKey}`]: {
            hex: bdHex,
            hexDark: bdHexDark,
        },
        [`border${capitalizedKey}Faded`]: {
            hex: bdFadedHex,
            hexDark: bdFadedHexDark,
        },
        [`foreground${capitalizedKey}`]: {
            hex: fgHex,
            hexDark: fgHexDark,
        },
    };
    if (key === "neutral") {
        output[`foreground${capitalizedKey}`] = {
            hex: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, fgHsluv), { l: 8 })),
            hexDark: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, fgHsluvDark), { l: 95 })),
        };
        output[`foreground${capitalizedKey}Faded`] = {
            hex: fgHex,
            hexDark: fgHexDark,
        };
        output[`backgroundDisabled`] = {
            hex: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluv), { l: 94 })),
            hexDark: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluvDark), { l: 13 })),
        };
        output[`backgroundDisabledFaded`] = {
            hex: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluv), { l: 97 })),
            hexDark: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluvDark), { l: 9 })),
        };
        output[`borderDisabled`] = {
            hex: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluv), { l: 90 })),
            hexDark: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluvDark), { l: 17 })),
        };
        output[`foregroundDisabled`] = {
            hex: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluv), { l: 82 })),
            hexDark: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluvDark), { l: 31 })),
        };
        output[`backgroundElevationBase`] = {
            hex: "#ffffff",
            hexDark: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluvDark), { l: 8 })),
        };
        output[`backgroundElevationRaised`] = {
            hex: "#ffffff",
            hexDark: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluvDark), { l: 10 })),
        };
        output[`backgroundElevationOverlay`] = {
            hex: "#ffffff",
            hexDark: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluvDark), { l: 12 })),
        };
        output[`backgroundPage`] = {
            hex: "#ffffff",
            hexDark: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluvDark), { l: 5 })),
        };
        output[`backgroundPageFaded`] = {
            hex: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluv), { l: 98 })),
            hexDark: (0, color_1.hsluvToHex)(Object.assign(Object.assign({}, hsluvDark), { l: 6 })),
        };
    }
    else {
        output[`foreground${capitalizedKey}`] = {
            hex: fgHex,
            hexDark: fgHexDark,
        };
    }
    return output;
};
const validateHexColor = (color) => {
    const hexColorRegex = /^#([A-Fa-f0-9]{3}){2}$/;
    if (!hexColorRegex.test(color)) {
        throw new Error(`Invalid hex color: ${color}`);
    }
    return color;
};
const generate = (args = {}) => {
    const { primary = "#5a58f2", critical = "#e22c2c", warning = "#facc15", positive = "#118850", neutral = "#dfe2ea", brand, } = args;
    const primaryColors = generateColorValues({
        key: "primary",
        hex: validateHexColor(primary),
    });
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, primaryColors), generateColorValues({ key: "critical", hex: validateHexColor(critical) })), generateColorValues({ key: "warning", hex: validateHexColor(warning) })), generateColorValues({ key: "positive", hex: validateHexColor(positive) })), generateColorValues({ key: "neutral", hex: validateHexColor(neutral) })), { brand: { hex: brand || primary }, white: { hex: "#ffffff" }, black: { hex: "#000000" } });
};
exports.default = generate;
